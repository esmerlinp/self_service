{"version":3,"sources":["../node_modules/react/index.js","../../src/event.mjs","../../src/event-target.mjs","../node_modules/flatbuffers/js/flatbuffers.mjs","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs","../util/utf8.ts","../io/interfaces.ts","../util/compat.ts","../util/buffer.ts","../io/adapters.ts","../vector.ts","../fb/Schema.ts","../fb/Message.ts","../enum.ts","../util/bit.ts","../visitor.ts","../visitor/typecomparator.ts","../type.ts","../data.ts","../util/pretty.ts","../builder/valid.ts","../builder/buffer.ts","../builder.ts","../builder/bool.ts","../builder/null.ts","../builder/date.ts","../builder/decimal.ts","../builder/dictionary.ts","../builder/fixedsizebinary.ts","../util/math.ts","../builder/float.ts","../util/bn.ts","../builder/int.ts","../builder/time.ts","../builder/timestamp.ts","../builder/interval.ts","../builder/binary.ts","../builder/utf8.ts","../builder/run.ts","../vector/row.ts","../util/vector.ts","../vector/chunked.ts","../column.ts","../util/args.ts","../schema.ts","../builder/list.ts","../builder/fixedsizelist.ts","../builder/map.ts","../builder/struct.ts","../builder/union.ts","../visitor/set.ts","../visitor/builderctor.ts","../fb/File.ts","../builder/index.ts","../ipc/metadata/file.ts","../io/stream.ts","../io/file.ts","../util/int.ts","../visitor/vectorloader.ts","../visitor/typeassembler.ts","../ipc/metadata/json.ts","../ipc/metadata/message.ts","../ipc/message.ts","../visitor/vectorassembler.ts","../ipc/writer.ts","../util/recordbatch.ts","../vector/base.ts","../vector/binary.ts","../vector/bool.ts","../vector/date.ts","../vector/decimal.ts","../vector/dictionary.ts","../vector/fixedsizebinary.ts","../vector/fixedsizelist.ts","../vector/float.ts","../vector/interval.ts","../vector/int.ts","../vector/list.ts","../vector/map.ts","../vector/null.ts","../vector/struct.ts","../vector/timestamp.ts","../vector/time.ts","../vector/union.ts","../vector/utf8.ts","../util/fn.ts","../visitor/get.ts","../visitor/indexof.ts","../visitor/iterator.ts","../visitor/toarray.ts","../visitor/bytewidth.ts","../visitor/vectorctor.ts","../vector/index.ts","../table.ts","../recordbatch.ts","../ipc/reader.ts","../io/whatwg/builder.ts","../compute/predicate.ts","../compute/dataframe.ts","../Arrow.dom.ts","../io/whatwg/iterable.ts","../io/whatwg/reader.ts","../io/whatwg/writer.ts","../node_modules/streamlit-component-lib/dist/ArrowTable.js","../node_modules/streamlit-component-lib/dist/streamlit.js","../node_modules/streamlit-component-lib/dist/StreamlitReact.js","../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js","../node_modules/react-is/index.js","../node_modules/react-is/cjs/react-is.production.min.js","../node_modules/react/cjs/react.production.min.js","../node_modules/object-assign/index.js"],"names":["module","exports","require","privateData","WeakMap","wrappers","pd","event","retv","get","console","assert","setCancelFlag","data","passiveListener","cancelable","canceled","preventDefault","error","Event","eventTarget","set","this","eventPhase","currentTarget","stopped","immediateStopped","timeStamp","Date","now","Object","defineProperty","value","enumerable","keys","i","length","key","defineRedirectDescriptor","configurable","defineCallDescriptor","apply","arguments","getWrapper","proto","prototype","wrapper","BaseEvent","CustomEvent","call","create","constructor","writable","isFunc","getOwnPropertyDescriptor","defineWrapper","getPrototypeOf","isStopped","setPassiveListener","type","target","composedPath","NONE","CAPTURING_PHASE","AT_TARGET","BUBBLING_PHASE","stopPropagation","stopImmediatePropagation","bubbles","Boolean","defaultPrevented","composed","srcElement","cancelBubble","returnValue","initEvent","window","setPrototypeOf","listenersMap","ATTRIBUTE","isObject","x","getListeners","listeners","TypeError","defineEventAttribute","eventTargetPrototype","eventName","node","listenerType","listener","next","prev","delete","newNode","passive","once","defineEventAttributeDescriptor","defineCustomEventTarget","eventNames","CustomEventTarget","EventTarget","Array","isArray","types","Map","addEventListener","options","optionsIsObj","capture","undefined","removeEventListener","dispatchEvent","wrappedEvent","wrapEvent","err","handleEvent","setEventPhase","setCurrentTarget","flatbuffers","inRange","a","min","max","ToDictionary","o","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","Int32Array","float32","Float32Array","buffer","float64","Float64Array","isLittleEndian","Uint16Array","Uint8Array","Long","low","high","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","bb","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","bytes","subarray","position","offset","prep","size","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","Error","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","len","existing_vtable","vt1","outer_loop","vt2","readInt16","j","push","finish","root_table","opt_file_identifier","file_identifier","charCodeAt","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","s","utf8","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","result","String","fromCharCode","__offset","bb_pos","vtable_offset","__union","t","__string","opt_encoding","b","c","__indirect","__vector","__vector_len","__has_identifier","ident","Stream","tokens","slice","endOfStream","read","shift","prepend","token","unshift","pop","finished","decoderError","fatal","opt_code_point","DEFAULT_ENCODING","TextDecoder","encoding","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","TextEncoder","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","handler","stream","bite","code_point","UTF8Encoder","count","temp","decode","input","ArrayBuffer","byteOffset","byteLength","input_stream","code_points","indexOf","cp","codePointsToString","encode","opt_string","string","n","u","d","stringToCodePoints","_Buffer","Buffer","useNativeEncoders","decodeUtf8","decoder","toUint8Array","from","toString","encodeUtf8","encoder","ITERATOR_DONE","freeze","done","ArrowJSON","_json","schema","batches","dictionaries","ReadableInterop","tee","_getDOMStream","pipe","_getNodeStream","pipeTo","pipeThrough","duplex","_DOMStream","toDOMStream","_nodeStream","toNodeStream","super","_values","resolvers","_closedPromise","Promise","r","_closedPromiseResolve","closed","cancel","reason","return","write","_ensureOpen","resolve","abort","_error","reject","close","Symbol","asyncIterator","_","peek","BigIntCtor","BigIntAvailable","BigIntUnavailableError","BigIntUnavailable","asIntN","asUintN","BigInt","BigInt64ArrayCtor","BigInt64ArrayAvailable","BigInt64ArrayUnavailableError","BigInt64Array","BYTES_PER_ELEMENT","of","BigUint64ArrayCtor","BigUint64ArrayAvailable","BigUint64ArrayUnavailableError","BigUint64Array","isNumber","isBoolean","isFunction","isPromise","then","isIterable","iterator","isAsyncIterable","isArrowJSON","isIteratorResult","isFileHandle","isFetchResponse","isReadableDOMStream","isReadableNodeStream","SharedArrayBuf","SharedArrayBuffer","memcpy","source","targetByteOffset","sourceByteLength","targetByteLength","dst","src","Math","joinUint8Arrays","chunks","sliced","xOffset","yOffset","xLen","yLen","y","collapseContiguousByteRanges","reduce","index","Infinity","toArrayBufferView","ArrayBufferViewCtor","isView","toInt8Array","Int8Array","toInt16Array","Int16Array","toInt32Array","toBigInt64Array","toUint16Array","toUint32Array","Uint32Array","toBigUint64Array","toFloat32Array","toFloat64Array","toUint8ClampedArray","Uint8ClampedArray","pump","toArrayBufferViewIterator","ArrayCtor","wrap","buffers","it","toInt8ArrayIterator","toInt16ArrayIterator","toInt32ArrayIterator","toUint8ArrayIterator","toUint16ArrayIterator","toUint32ArrayIterator","toFloat32ArrayIterator","toFloat64ArrayIterator","toUint8ClampedArrayIterator","async","toArrayBufferViewAsyncIterator","emit","toInt8ArrayAsyncIterator","toInt16ArrayAsyncIterator","toInt32ArrayAsyncIterator","toUint8ArrayAsyncIterator","toUint16ArrayAsyncIterator","toUint32ArrayAsyncIterator","toFloat32ArrayAsyncIterator","toFloat64ArrayAsyncIterator","toUint8ClampedArrayAsyncIterator","rebaseValueOffsets","valueOffsets","compareArrayLike","fromIterable","cmd","threw","bufferLength","byteRange","isNaN","e","throw","fromAsyncIterable","fromDOMStream","releaseLock","fromNodeStream","events","onEvent","race","map","isFinite","cleanup","evt","fn","destroy","byobReader","defaultReader","supportsBYOB","reader","getBYOBReader","getDefaultReader","catch","readFromBYOBReader","mode","readInto","AbstractVector","arrow","apache","org","flatbuf","MetadataVersion","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","Type","Endianness","Null","__init","getRootAsNull","startNull","builder","endNull","createNull","Struct_","getRootAsStruct_","startStruct_","endStruct_","createStruct_","List","getRootAsList","startList","endList","createList","LargeList","getRootAsLargeList","startLargeList","endLargeList","createLargeList","FixedSizeList","getRootAsFixedSizeList","listSize","startFixedSizeList","addListSize","endFixedSizeList","createFixedSizeList","getRootAsMap","keysSorted","startMap","addKeysSorted","endMap","createMap","Union","getRootAsUnion","Sparse","typeIds","typeIdsLength","typeIdsArray","startUnion","addMode","addTypeIds","typeIdsOffset","createTypeIdsVector","startTypeIdsVector","numElems","endUnion","createUnion","Int","getRootAsInt","bitWidth","isSigned","startInt","addBitWidth","addIsSigned","endInt","createInt","FloatingPoint","getRootAsFloatingPoint","precision","HALF","startFloatingPoint","addPrecision","endFloatingPoint","createFloatingPoint","Utf8","getRootAsUtf8","startUtf8","endUtf8","createUtf8","Binary","getRootAsBinary","startBinary","endBinary","createBinary","LargeUtf8","getRootAsLargeUtf8","startLargeUtf8","endLargeUtf8","createLargeUtf8","LargeBinary","getRootAsLargeBinary","startLargeBinary","endLargeBinary","createLargeBinary","FixedSizeBinary","getRootAsFixedSizeBinary","byteWidth","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","createFixedSizeBinary","Bool","getRootAsBool","startBool","endBool","createBool","Decimal","getRootAsDecimal","scale","startDecimal","addScale","endDecimal","createDecimal","getRootAsDate","unit","MILLISECOND","startDate","addUnit","endDate","createDate","Time","getRootAsTime","startTime","endTime","createTime","Timestamp","getRootAsTimestamp","SECOND","timezone","optionalEncoding","startTimestamp","addTimezone","timezoneOffset","endTimestamp","createTimestamp","Interval","getRootAsInterval","YEAR_MONTH","startInterval","endInterval","createInterval","Duration","getRootAsDuration","startDuration","endDuration","createDuration","KeyValue","getRootAsKeyValue","startKeyValue","addKey","keyOffset","addValue","valueOffset","endKeyValue","createKeyValue","DictionaryEncoding","getRootAsDictionaryEncoding","id","indexType","isOrdered","startDictionaryEncoding","addId","addIndexType","indexTypeOffset","addIsOrdered","endDictionaryEncoding","createDictionaryEncoding","Field","getRootAsField","name","nullable","typeType","dictionary","children","childrenLength","customMetadata","customMetadataLength","startField","addName","nameOffset","addNullable","addTypeType","addType","typeOffset","addDictionary","dictionaryOffset","addChildren","childrenOffset","createChildrenVector","startChildrenVector","addCustomMetadata","customMetadataOffset","createCustomMetadataVector","startCustomMetadataVector","endField","createField","createBuffer","Schema","getRootAsSchema","endianness","Little","fields","fieldsLength","startSchema","addEndianness","addFields","fieldsOffset","createFieldsVector","startFieldsVector","endSchema","finishSchemaBuffer","createSchema","MessageHeader","FieldNode","nullCount","createFieldNode","null_count","RecordBatch","getRootAsRecordBatch","nodes","nodesLength","buffersLength","startRecordBatch","addLength","addNodes","nodesOffset","startNodesVector","addBuffers","buffersOffset","startBuffersVector","endRecordBatch","createRecordBatch","DictionaryBatch","getRootAsDictionaryBatch","isDelta","startDictionaryBatch","addData","dataOffset","addIsDelta","endDictionaryBatch","createDictionaryBatch","Message","getRootAsMessage","version","V1","headerType","header","bodyLength","startMessage","addVersion","addHeaderType","addHeader","headerOffset","addBodyLength","endMessage","finishMessageBuffer","createMessage","BufferType","getBool","_data","_index","byte","bit","getBit","setBool","truncateBitmap","bitmap","alignedSize","packBools","iterateBits","values","xs","begin","context","byteIndex","remaining","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","popcnt_array","arr","cnt","pos","view","DataView","popcnt_uint32","getUint32","getUint16","getUint8","uint32","Visitor","visitMany","args","visit","getVisitFn","visitor","throwIfNotFound","dtype","inferDType","visitNull","visitBool","visitInt","Int8","visitInt8","Int16","visitInt16","Int32","visitInt32","Int64","visitInt64","Uint8","visitUint8","Uint16","visitUint16","Uint32","visitUint32","Uint64","visitUint64","Float","visitFloat","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","visitTimestamp","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","visitTime","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","visitDecimal","visitList","Struct","visitStruct","visitUnion","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","Dictionary","visitDictionary","visitInterval","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","visitFixedSizeList","visitMap","_node","typeId","SINGLE","DOUBLE","MICROSECOND","NANOSECOND","DAY","DAY_TIME","Dense","compareSchemas","instance","compareFields","others","every","f","compareField","compareConstructor","compareAny","compareInt","compareFloat","compareDate","compareTimestamp","compareTime","compareUnion","compareInterval","indices","isNull","isInt","isFloat","isBinary","isUtf8","isBool","isDecimal","isDate","isTime","isTimestamp","isInterval","isList","isStruct","isUnion","isFixedSizeBinary","isFixedSizeList","isMap","isDictionary","compareTo","toStringTag","ArrayType","child","valueType","valueField","join","typeIdToChildIndex","idx","keyType","getId","atomicDictionaryId","strideForType","childData","floor","_nullCount","stride","nullBitmap","clone","childStride","_sliceBuffers","_sliceChildren","_changeLengthAndBackfillNullBitmap","newLength","fill","VALIDITY","TYPE","OFFSET","DATA","valueOffsetsOrChildren","undf","valueToString","toPrimitive","JSON","stringify","createIsValidFunction","nullValues","fnBody","noNaNs","filter","valueToCase","Function","roundLengthUpToNearest64Bytes","BPE","_resize","reservedLength","reservedByteLength","append","reserve","extra","reserved","flush","array","sliceOrExtendArray","DataBufferBuilder","last","BitmapBufferBuilder","numValid","numInvalid","val","cur","OffsetsBufferBuilder","ArrayType64","_ArrayType64","buffer64","nulls","_nulls","_isValid","throughNode","throughDOM","throughIterable","queueingStrategy","highWaterMark","sizeProperty","numChunks","new","toVector","throughAsyncIterable","numChildren","_offsets","_typeIds","isValid","setValid","setValue","_setValue","valid","addChild","getChildAt","offsets","forEach","opts","_pendingLength","pending","_pending","current","_flush","pendingLength","_flushPending","DateDayBuilder","DateMillisecondBuilder","hashFn","_dictionaryOffset","_keysToIndices","valueToKey","keysToIndices","_dictionary","curr","concat","f64","u32","uint16ToFloat64","h","expo","sigf","sign","NaN","float64ToUint16","Float32Builder","Float64Builder","isArrowBigNumSymbol","for","BigNum","SignedBigNum","UnsignedBigNum","DecimalBigNum","bignumToNumber","bn","hi","lo","signed","words","number","bignumToString","bignumToBigInt","decimalToString","digits","base64","base32","checks","reverse","toJSON","valueOf","assign","num","unsigned","decimal","Int8Builder","Int16Builder","Int32Builder","toBigInt","values64","Uint8Builder","Uint16Builder","Uint32Builder","memo","TimeSecondBuilder","TimeMillisecondBuilder","TimeMicrosecondBuilder","TimeNanosecondBuilder","TimestampSecondBuilder","TimestampMillisecondBuilder","TimestampMicrosecondBuilder","TimestampNanosecondBuilder","IntervalDayTimeBuilder","IntervalYearMonthBuilder","bind","kParent","kRowIndex","kKeyToIdx","kIdxToVal","kCustomInspect","parent","numKeys","entries","has","ktoi","itov","getValue","getIndex","ki","vi","k","v","kr","vr","callbackfn","thisArg","callback","m","toArray","inspect","str","defineProperties","MapRow","createRowProxy","getKey","StructRow","defineRowProxyProperties","findIndex","desc","row","getter","setter","hasOwnProperty","Proxy","RowProxyHandler","isExtensible","deleteProperty","preventExtensions","ownKeys","receiver","Reflect","clampIndex","adjust","tmp","clampRange","end","big0","isNaNFast","createElementComparator","search","typeofSearch","valueOfSearch","comparators","createSubElementsComparator","creatMapComparator","createArrayLikeComparator","createVectorComparator","createObjectComparator","compareArray","compareObject","vec","compareVector","lKeyItr","rKeyItr","rValItr","rVal","lKey","rKey","vectors","calculateOffsets","_type","_chunks","_chunkOffsets","_length","_numChildren","flatten","selectChunkArgs","VectorName","chunk","_indices","_sliceInternal","columns","_children","vector","mid","isValidInternal","getInternal","element","self","indexOfInternal","arraySet","typedSet","chunkIndex","fromIndex","start","found","slices","chunkOffsets","chunkLength","chunkOffset","to","_field","SingleChunkColumn","rest","some","metadata","column","_chunk","selectArgs","Ctor","vals","_selectArgs","selectFieldArgs","_selectFieldArgs","_selectChunkArgs","selectVectorChildrenArgs","_selectVectorChildrenArgs","res","toKeysAndValues","ret","fieldIndex","valueIndex","generateDictionaryMap","select","columnNames","names","selectAt","columnIndices","curFields","mergeMaps","newFields","f2","newDictionaries","m1","m2","_run","run","childIndex","_valueToChildTypeId","childTypeId","SparseUnionBuilder","setEpochMsToMillisecondsLong","epochMs","setVariableWidthBytes","setDateDay","setEpochMsToDays","setDateMillisecond","setNumeric","setFloat16","setNumericX2","long","setTimestampSecond","setTimestampMillisecond","setTimestampMicrosecond","setEpochMsToMicrosecondsLong","setTimestampNanosecond","setEpochMsToNanosecondsLong","setTimeSecond","setTimeMillisecond","setTimeMicrosecond","setTimeNanosecond","setDenseUnion","setSparseUnion","setIntervalDayTime","setIntervalYearMonth","itr","_setStructVectorValue","_setStructArrayValue","_setStructObjectValue","newBuilder","defaultOptions","getChildOptions","T","Footer","getRootAsFooter","Block","dictionariesLength","recordBatches","recordBatchesLength","startFooter","addSchema","schemaOffset","addDictionaries","dictionariesOffset","startDictionariesVector","addRecordBatches","recordBatchesOffset","startRecordBatchesVector","endFooter","finishFooterBuffer","createFooter","metaDataLength","createBlock","_Block","_Footer","V4","dictionaryBatches","_recordBatches","_dictionaryBatches","buf","footer","OffHeapFooter","numRecordBatches","rb","FileBlock","numDictionaries","db","dictionaryBatchesOffset","block","getRecordBatch","getDictionaryBatch","_footer","fileBlock","body","readAt","getInt32","seek","nBytes","file","_handle","stat","bytesRead","intAsHex","kPowersOfTen","BaseInt64","_times","L","R","product","_plus","lessThan","greaterThan","hex","times","plus","out_buffer","fromString","fromNumber","out","posn","group","parseInt","substr","multiple","convertArray","multiply","left","right","add","negate","this_high","other_high","startsWith","Int128","L0","L1","L2","L3","R0","R1","R2","R3","sums","nodesIndex","buffersIndex","nextFieldNode","readNullBitmap","readData","readOffsets","readTypeIds","readDictionary","nextBufferRange","sources","joined","binaryDataFromJSON","recordBatchFromJSON","fieldNodesFromJSON","buffersFromJSON","fieldChildrenFromJSON","fromJSON","fieldNodes","validity","BufferRegion","customMetadataFromJSON","_metadata","indexTypeFromJSON","typeFromJSON","_Field","_Schema","_Message","_KeyValue","_FieldNode","_Endianness","_RecordBatch","_DictionaryBatch","_version","_headerType","_createHeader","_bodyLength","msg","message","messageHeaderFromJSON","_message","decodeMessageHeader","isSchema","isRecordBatch","isDictionaryBatch","_nodes","_buffers","_id","_isDelta","decodeFieldChildren","decodeCustomMetadata","entry","decodeIndexType","decodeFieldType","childOffsets","childrenVectorOffset","metadataOffset","dictType","dictMeta","fieldOffsets","fieldsVectorOffset","platformIsLittleEndian","Big","_schema","decodeSchemaFields","schemaFieldsFromJSON","recordBatch","nodesVectorOffset","b_","buffersVectorOffset","batch","decodeFieldNodes","bufferRegions","decodeBuffers","dictionaryBatch","setInt16","invalidMessageType","nullMessage","invalidMessageMetadata","expected","actual","invalidMessageBodyLength","readMetadataLength","readMetadata","readMessage","readMessageBody","readSchema","throwIfNull","PADDING","metadataLength","_body","_batchIndex","_dictionaryIndex","flattenDataSources","MAGIC_STR","MAGIC","checkForMagicArrowString","magicLength","magicAndPadding","magicX2AndPadding","_byteLength","_bufferRegions","assemble","assembler","vectorChildren","assembleResult","RangeError","addBuffer","_nullV","assembleFlatVector","assembleFlatListVector","firstOffset","lastOffset","assembleListVector","assembleNestedVector","maxChildTypeId","childLengths","shiftedOffsets","unshiftedOffsets","childLength","_position","_started","_sink","_dictionaryBlocks","_recordBatchBlocks","_dictionaryDeltaOffsets","autoDestroy","writeLegacyIpcFormat","_autoDestroy","_writeLegacyIpcFormat","writableStrategy","readableStrategy","sync","writeAll","writeAllAsync","reset","sink","isWritableNodeStream","objectMode","_writeFooter","_writeSchema","payload","_writeRecordBatch","_writeMessage","flatbufferSize","prefixSize","nPaddingBytes","_write","_writePadding","_writeMagic","_writeDictionaries","_writeBodyBuffers","_writeDictionaryBatch","padding","writer","noopBuf","nullBufs","bitmapLength","distributeVectorsIntoRecordBatches","vecs","batchArgs","numBatches","batchLength","numColumns","Number","POSITIVE_INFINITY","distributeChildData","uniformlyDistributeChunksAcrossRecordBatches","_bindDataAccessors","isConcatSpreadable","asUtf8","vectorFromValuesWithType","DateDayVector","DateMillisecondVector","reverseLookup","setKey","ArrowType","vectorTypeToDataType","InputType","arrayTypeToDataType","convertTo16Bit","Float16Vector","Float32Vector","Float64Vector","typeCtor","dataCtor","ctor","IntervalDayTimeVector","IntervalYearMonthVector","is64bit","convert32To64Bit","Int8Vector","Int16Vector","Int32Vector","_values64","Uint8Vector","Uint16Vector","Uint32Vector","asList","_row","bound","TimestampSecondVector","TimestampMillisecondVector","TimestampMicrosecondVector","TimestampNanosecondVector","TimeSecondVector","TimeMillisecondVector","TimeMicrosecondVector","TimeNanosecondVector","DenseUnionVector","SparseUnionVector","asBinary","partial0","partial2","epochMillisecondsLongToMs","epochMillisecondsToDate","getVariableWidthBytes","getDateDay","epochDaysToMs","epochDaysToDate","getDateMillisecond","epochMillisecondsLongToDate","getNumeric","getFloat16","getBigInts","getTimestampSecond","getTimestampMillisecond","getTimestampMicrosecond","epochMicrosecondsLongToMs","getTimestampNanosecond","epochNanosecondsLongToMs","getTimeSecond","getTimeMillisecond","getTimeMicrosecond","getTimeNanosecond","getDenseUnion","getSparseUnion","getIntervalDayTime","getIntervalYearMonth","interval","int32s","_vector","indexOfValue","searchElement","indexOfNull","compare","indexOfUnion","vectorIterator","getFn","nullByte","nullBit","nullableIterator","arrayOfVector","variableWidthColumnErrorMessage","____","visitFields","visitSchema","newDataType","transform","getByteWidth","wrapNullableSet","VectorCtor","partialType0","empty","fromStruct","tableFromIterable","tableFromAsyncIterable","isSync","open","opening","fromAsync","cols","selectColumnArgs","numCols","getColumn","getColumnAt","getColumnIndex","serialize","nameToIndex","columnName","oldToNew","newIdx","_f","_fs","fs","vs","l","batchData","ensureSameLengthData","_dictionaries","collect","impl","_impl","isFile","isAsync","isStream","readRecordBatch","RecordBatchStreamReader","fromArrowJSON","AsyncRecordBatchFileReader","AsyncRecordBatchStreamReader","fromFileHandle","RecordBatchFileReader","fromAsyncByteStream","fromByteStream","readAll","readAllSync","readAllAsync","_recordBatchIndex","_loadRecordBatch","_loadVectors","_loadDictionaryBatch","_reader","shouldAutoDestroy","_readNextMessageAndValidate","_readFooter","_readDictionaryBatch","_numChunks","_finished","_bufferedSize","builderOptions","_controller","_builder","_getSize","chunkByteLength","readableHighWaterMark","writableHighWaterMark","ReadableStream","_maybeFlush","WritableStream","_writeValueAndReturnChunkSize","bufferedSize","controller","desiredSize","_enqueue","enqueue","Value","eq","Literal","le","LTeq","ge","GTeq","lt","Not","gt","ne","Col","colidx","Predicate","and","expr","And","or","Or","not","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","accum","p","_batch","rtrn","left_func","right_func","col","lit","col_func","lastDictionary","lastKey","func","countBy","scan","scanReverse","predicate","batchIndex","numRows","count_by","countByteLength","ceil","log","counts","_predicate","isBound","bm","hwm","pull","asyncIterableAsReadableDOMStream","iterableAsReadableDOMStream","queue","readable","ComponentMessageType","ArrowTable","indexBuffer","columnsBuffer","styler","_this","getCell","rowIndex","columnIndex","isBlankCell","headerRows","headerColumns","isIndexCell","isColumnsCell","classNames","content","dataColumnIndex","getContent","columnsTable","dataRowIndex","uuid","indexTable","displayValuesTable","dataTable","getColumnTypeId","nanosToDate","caption","displayValues","styles","rows","dataRows","dataColumns","nanos","__assign","Streamlit","API_VERSION","RENDER_EVENT","registeredMessageListener","setComponentReady","onMessageEvent","sendBackMsg","COMPONENT_READY","apiVersion","setFrameHeight","height","document","scrollHeight","lastFrameHeight","SET_FRAME_HEIGHT","setComponentValue","dataType","isBigIntArray","isTypedArray","SET_COMPONENT_VALUE","onRenderMessage","dataframeArgs","argsDataframeToObject","disabled","theme","_injectTheme","eventData","detail","argsDataframe","argsDataframeArrow","_a","toArrowTable","fromEntries","df","postMessage","isStreamlitMessage","style","createElement","head","appendChild","innerHTML","primaryColor","backgroundColor","secondaryBackgroundColor","textColor","font","__extends","extendStatics","__proto__","__","_super","StreamlitComponentBase","componentDidMount","componentDidUpdate","React","PureComponent","reactIs","REACT_STATICS","childContextTypes","contextType","contextTypes","defaultProps","displayName","getDefaultProps","getDerivedStateFromError","getDerivedStateFromProps","mixins","propTypes","KNOWN_STATICS","caller","callee","arity","MEMO_STATICS","TYPE_STATICS","getStatics","component","isMemo","ForwardRef","render","Memo","getOwnPropertyNames","getOwnPropertySymbols","objectPrototype","hoistNonReactStatics","targetComponent","sourceComponent","blacklist","inheritedComponent","targetStatics","sourceStatics","descriptor","g","q","w","z","$$typeof","A","AsyncMode","ConcurrentMode","ContextConsumer","ContextProvider","Element","Fragment","Lazy","Portal","Profiler","StrictMode","Suspense","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isPortal","isProfiler","isStrictMode","isSuspense","isValidElementType","typeOf","B","C","encodeURIComponent","D","isMounted","enqueueForceUpdate","enqueueReplaceState","enqueueSetState","E","F","props","refs","updater","G","H","isReactComponent","setState","forceUpdate","I","isPureReactComponent","J","K","ref","__self","__source","M","_owner","O","P","Q","keyPrefix","S","U","V","replace","escape","W","aa","X","N","Y","Z","ba","ReactCurrentDispatcher","ReactCurrentBatchConfig","suspense","ReactCurrentOwner","IsSomeRendererActing","Children","only","Component","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","cloneElement","createContext","_calculateChangedBits","_currentValue","_currentValue2","_threadCount","Provider","Consumer","_context","createFactory","createRef","forwardRef","isValidElement","lazy","_ctor","_status","_result","useCallback","useContext","useDebugValue","useEffect","useImperativeHandle","useLayoutEffect","useMemo","useReducer","useRef","useState","propIsEnumerable","propertyIsEnumerable","test1","test2","test3","split","letter","shouldUseNative","symbols","toObject"],"mappings":"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","file":"static/js/2.8d0039db.chunk.js","sourcesContent":["'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","/**\n * @typedef {object} PrivateData\n * @property {EventTarget} eventTarget The event target.\n * @property {{type:string}} event The original event object.\n * @property {number} eventPhase The current event phase.\n * @property {EventTarget|null} currentTarget The current event target.\n * @property {boolean} canceled The flag to prevent default.\n * @property {boolean} stopped The flag to stop propagation.\n * @property {boolean} immediateStopped The flag to stop propagation immediately.\n * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.\n * @property {number} timeStamp The unix time.\n * @private\n */\n\n/**\n * Private data for event wrappers.\n * @type {WeakMap<Event, PrivateData>}\n * @private\n */\nconst privateData = new WeakMap()\n\n/**\n * Cache for wrapper classes.\n * @type {WeakMap<Object, Function>}\n * @private\n */\nconst wrappers = new WeakMap()\n\n/**\n * Get private data.\n * @param {Event} event The event object to get private data.\n * @returns {PrivateData} The private data of the event.\n * @private\n */\nfunction pd(event) {\n    const retv = privateData.get(event)\n    console.assert(\n        retv != null,\n        \"'this' is expected an Event object, but got\",\n        event\n    )\n    return retv\n}\n\n/**\n * https://dom.spec.whatwg.org/#set-the-canceled-flag\n * @param data {PrivateData} private data.\n */\nfunction setCancelFlag(data) {\n    if (data.passiveListener != null) {\n        if (\n            typeof console !== \"undefined\" &&\n            typeof console.error === \"function\"\n        ) {\n            console.error(\n                \"Unable to preventDefault inside passive event listener invocation.\",\n                data.passiveListener\n            )\n        }\n        return\n    }\n    if (!data.event.cancelable) {\n        return\n    }\n\n    data.canceled = true\n    if (typeof data.event.preventDefault === \"function\") {\n        data.event.preventDefault()\n    }\n}\n\n/**\n * @see https://dom.spec.whatwg.org/#interface-event\n * @private\n */\n/**\n * The event wrapper.\n * @constructor\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Event|{type:string}} event The original event to wrap.\n */\nfunction Event(eventTarget, event) {\n    privateData.set(this, {\n        eventTarget,\n        event,\n        eventPhase: 2,\n        currentTarget: eventTarget,\n        canceled: false,\n        stopped: false,\n        immediateStopped: false,\n        passiveListener: null,\n        timeStamp: event.timeStamp || Date.now(),\n    })\n\n    // https://heycam.github.io/webidl/#Unforgeable\n    Object.defineProperty(this, \"isTrusted\", { value: false, enumerable: true })\n\n    // Define accessors\n    const keys = Object.keys(event)\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i]\n        if (!(key in this)) {\n            Object.defineProperty(this, key, defineRedirectDescriptor(key))\n        }\n    }\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEvent.prototype = {\n    /**\n     * The type of this event.\n     * @type {string}\n     */\n    get type() {\n        return pd(this).event.type\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get target() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get currentTarget() {\n        return pd(this).currentTarget\n    },\n\n    /**\n     * @returns {EventTarget[]} The composed path of this event.\n     */\n    composedPath() {\n        const currentTarget = pd(this).currentTarget\n        if (currentTarget == null) {\n            return []\n        }\n        return [currentTarget]\n    },\n\n    /**\n     * Constant of NONE.\n     * @type {number}\n     */\n    get NONE() {\n        return 0\n    },\n\n    /**\n     * Constant of CAPTURING_PHASE.\n     * @type {number}\n     */\n    get CAPTURING_PHASE() {\n        return 1\n    },\n\n    /**\n     * Constant of AT_TARGET.\n     * @type {number}\n     */\n    get AT_TARGET() {\n        return 2\n    },\n\n    /**\n     * Constant of BUBBLING_PHASE.\n     * @type {number}\n     */\n    get BUBBLING_PHASE() {\n        return 3\n    },\n\n    /**\n     * The target of this event.\n     * @type {number}\n     */\n    get eventPhase() {\n        return pd(this).eventPhase\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopPropagation() {\n        const data = pd(this)\n\n        data.stopped = true\n        if (typeof data.event.stopPropagation === \"function\") {\n            data.event.stopPropagation()\n        }\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopImmediatePropagation() {\n        const data = pd(this)\n\n        data.stopped = true\n        data.immediateStopped = true\n        if (typeof data.event.stopImmediatePropagation === \"function\") {\n            data.event.stopImmediatePropagation()\n        }\n    },\n\n    /**\n     * The flag to be bubbling.\n     * @type {boolean}\n     */\n    get bubbles() {\n        return Boolean(pd(this).event.bubbles)\n    },\n\n    /**\n     * The flag to be cancelable.\n     * @type {boolean}\n     */\n    get cancelable() {\n        return Boolean(pd(this).event.cancelable)\n    },\n\n    /**\n     * Cancel this event.\n     * @returns {void}\n     */\n    preventDefault() {\n        setCancelFlag(pd(this))\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     */\n    get defaultPrevented() {\n        return pd(this).canceled\n    },\n\n    /**\n     * The flag to be composed.\n     * @type {boolean}\n     */\n    get composed() {\n        return Boolean(pd(this).event.composed)\n    },\n\n    /**\n     * The unix time of this event.\n     * @type {number}\n     */\n    get timeStamp() {\n        return pd(this).timeStamp\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     * @deprecated\n     */\n    get srcElement() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The flag to stop event bubbling.\n     * @type {boolean}\n     * @deprecated\n     */\n    get cancelBubble() {\n        return pd(this).stopped\n    },\n    set cancelBubble(value) {\n        if (!value) {\n            return\n        }\n        const data = pd(this)\n\n        data.stopped = true\n        if (typeof data.event.cancelBubble === \"boolean\") {\n            data.event.cancelBubble = true\n        }\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     * @deprecated\n     */\n    get returnValue() {\n        return !pd(this).canceled\n    },\n    set returnValue(value) {\n        if (!value) {\n            setCancelFlag(pd(this))\n        }\n    },\n\n    /**\n     * Initialize this event object. But do nothing under event dispatching.\n     * @param {string} type The event type.\n     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.\n     * @param {boolean} [cancelable=false] The flag to be possible to cancel.\n     * @deprecated\n     */\n    initEvent() {\n        // Do nothing.\n    },\n}\n\n// `constructor` is not enumerable.\nObject.defineProperty(Event.prototype, \"constructor\", {\n    value: Event,\n    configurable: true,\n    writable: true,\n})\n\n// Ensure `event instanceof window.Event` is `true`.\nif (typeof window !== \"undefined\" && typeof window.Event !== \"undefined\") {\n    Object.setPrototypeOf(Event.prototype, window.Event.prototype)\n\n    // Make association for wrappers.\n    wrappers.set(window.Event.prototype, Event)\n}\n\n/**\n * Get the property descriptor to redirect a given property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to redirect the property.\n * @private\n */\nfunction defineRedirectDescriptor(key) {\n    return {\n        get() {\n            return pd(this).event[key]\n        },\n        set(value) {\n            pd(this).event[key] = value\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Get the property descriptor to call a given method property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to call the method property.\n * @private\n */\nfunction defineCallDescriptor(key) {\n    return {\n        value() {\n            const event = pd(this).event\n            return event[key].apply(event, arguments)\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define new wrapper class.\n * @param {Function} BaseEvent The base wrapper class.\n * @param {Object} proto The prototype of the original event.\n * @returns {Function} The defined wrapper class.\n * @private\n */\nfunction defineWrapper(BaseEvent, proto) {\n    const keys = Object.keys(proto)\n    if (keys.length === 0) {\n        return BaseEvent\n    }\n\n    /** CustomEvent */\n    function CustomEvent(eventTarget, event) {\n        BaseEvent.call(this, eventTarget, event)\n    }\n\n    CustomEvent.prototype = Object.create(BaseEvent.prototype, {\n        constructor: { value: CustomEvent, configurable: true, writable: true },\n    })\n\n    // Define accessors.\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i]\n        if (!(key in BaseEvent.prototype)) {\n            const descriptor = Object.getOwnPropertyDescriptor(proto, key)\n            const isFunc = typeof descriptor.value === \"function\"\n            Object.defineProperty(\n                CustomEvent.prototype,\n                key,\n                isFunc\n                    ? defineCallDescriptor(key)\n                    : defineRedirectDescriptor(key)\n            )\n        }\n    }\n\n    return CustomEvent\n}\n\n/**\n * Get the wrapper class of a given prototype.\n * @param {Object} proto The prototype of the original event to get its wrapper.\n * @returns {Function} The wrapper class.\n * @private\n */\nfunction getWrapper(proto) {\n    if (proto == null || proto === Object.prototype) {\n        return Event\n    }\n\n    let wrapper = wrappers.get(proto)\n    if (wrapper == null) {\n        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto)\n        wrappers.set(proto, wrapper)\n    }\n    return wrapper\n}\n\n/**\n * Wrap a given event to management a dispatching.\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Object} event The event to wrap.\n * @returns {Event} The wrapper instance.\n * @private\n */\nexport function wrapEvent(eventTarget, event) {\n    const Wrapper = getWrapper(Object.getPrototypeOf(event))\n    return new Wrapper(eventTarget, event)\n}\n\n/**\n * Get the immediateStopped flag of a given event.\n * @param {Event} event The event to get.\n * @returns {boolean} The flag to stop propagation immediately.\n * @private\n */\nexport function isStopped(event) {\n    return pd(event).immediateStopped\n}\n\n/**\n * Set the current event phase of a given event.\n * @param {Event} event The event to set current target.\n * @param {number} eventPhase New event phase.\n * @returns {void}\n * @private\n */\nexport function setEventPhase(event, eventPhase) {\n    pd(event).eventPhase = eventPhase\n}\n\n/**\n * Set the current target of a given event.\n * @param {Event} event The event to set current target.\n * @param {EventTarget|null} currentTarget New current target.\n * @returns {void}\n * @private\n */\nexport function setCurrentTarget(event, currentTarget) {\n    pd(event).currentTarget = currentTarget\n}\n\n/**\n * Set a passive listener of a given event.\n * @param {Event} event The event to set current target.\n * @param {Function|null} passiveListener New passive listener.\n * @returns {void}\n * @private\n */\nexport function setPassiveListener(event, passiveListener) {\n    pd(event).passiveListener = passiveListener\n}\n","import {\n    isStopped,\n    setCurrentTarget,\n    setEventPhase,\n    setPassiveListener,\n    wrapEvent,\n} from \"./event.mjs\"\n\n/**\n * @typedef {object} ListenerNode\n * @property {Function} listener\n * @property {1|2|3} listenerType\n * @property {boolean} passive\n * @property {boolean} once\n * @property {ListenerNode|null} next\n * @private\n */\n\n/**\n * @type {WeakMap<object, Map<string, ListenerNode>>}\n * @private\n */\nconst listenersMap = new WeakMap()\n\n// Listener types\nconst CAPTURE = 1\nconst BUBBLE = 2\nconst ATTRIBUTE = 3\n\n/**\n * Check whether a given value is an object or not.\n * @param {any} x The value to check.\n * @returns {boolean} `true` if the value is an object.\n */\nfunction isObject(x) {\n    return x !== null && typeof x === \"object\" //eslint-disable-line no-restricted-syntax\n}\n\n/**\n * Get listeners.\n * @param {EventTarget} eventTarget The event target to get.\n * @returns {Map<string, ListenerNode>} The listeners.\n * @private\n */\nfunction getListeners(eventTarget) {\n    const listeners = listenersMap.get(eventTarget)\n    if (listeners == null) {\n        throw new TypeError(\n            \"'this' is expected an EventTarget object, but got another value.\"\n        )\n    }\n    return listeners\n}\n\n/**\n * Get the property descriptor for the event attribute of a given event.\n * @param {string} eventName The event name to get property descriptor.\n * @returns {PropertyDescriptor} The property descriptor.\n * @private\n */\nfunction defineEventAttributeDescriptor(eventName) {\n    return {\n        get() {\n            const listeners = getListeners(this)\n            let node = listeners.get(eventName)\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    return node.listener\n                }\n                node = node.next\n            }\n            return null\n        },\n\n        set(listener) {\n            if (typeof listener !== \"function\" && !isObject(listener)) {\n                listener = null // eslint-disable-line no-param-reassign\n            }\n            const listeners = getListeners(this)\n\n            // Traverse to the tail while removing old value.\n            let prev = null\n            let node = listeners.get(eventName)\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    // Remove old value.\n                    if (prev !== null) {\n                        prev.next = node.next\n                    } else if (node.next !== null) {\n                        listeners.set(eventName, node.next)\n                    } else {\n                        listeners.delete(eventName)\n                    }\n                } else {\n                    prev = node\n                }\n\n                node = node.next\n            }\n\n            // Add new value.\n            if (listener !== null) {\n                const newNode = {\n                    listener,\n                    listenerType: ATTRIBUTE,\n                    passive: false,\n                    once: false,\n                    next: null,\n                }\n                if (prev === null) {\n                    listeners.set(eventName, newNode)\n                } else {\n                    prev.next = newNode\n                }\n            }\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define an event attribute (e.g. `eventTarget.onclick`).\n * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.\n * @param {string} eventName The event name to define.\n * @returns {void}\n */\nfunction defineEventAttribute(eventTargetPrototype, eventName) {\n    Object.defineProperty(\n        eventTargetPrototype,\n        `on${eventName}`,\n        defineEventAttributeDescriptor(eventName)\n    )\n}\n\n/**\n * Define a custom EventTarget with event attributes.\n * @param {string[]} eventNames Event names for event attributes.\n * @returns {EventTarget} The custom EventTarget.\n * @private\n */\nfunction defineCustomEventTarget(eventNames) {\n    /** CustomEventTarget */\n    function CustomEventTarget() {\n        EventTarget.call(this)\n    }\n\n    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {\n        constructor: {\n            value: CustomEventTarget,\n            configurable: true,\n            writable: true,\n        },\n    })\n\n    for (let i = 0; i < eventNames.length; ++i) {\n        defineEventAttribute(CustomEventTarget.prototype, eventNames[i])\n    }\n\n    return CustomEventTarget\n}\n\n/**\n * EventTarget.\n *\n * - This is constructor if no arguments.\n * - This is a function which returns a CustomEventTarget constructor if there are arguments.\n *\n * For example:\n *\n *     class A extends EventTarget {}\n *     class B extends EventTarget(\"message\") {}\n *     class C extends EventTarget(\"message\", \"error\") {}\n *     class D extends EventTarget([\"message\", \"error\"]) {}\n */\nfunction EventTarget() {\n    /*eslint-disable consistent-return */\n    if (this instanceof EventTarget) {\n        listenersMap.set(this, new Map())\n        return\n    }\n    if (arguments.length === 1 && Array.isArray(arguments[0])) {\n        return defineCustomEventTarget(arguments[0])\n    }\n    if (arguments.length > 0) {\n        const types = new Array(arguments.length)\n        for (let i = 0; i < arguments.length; ++i) {\n            types[i] = arguments[i]\n        }\n        return defineCustomEventTarget(types)\n    }\n    throw new TypeError(\"Cannot call a class as a function\")\n    /*eslint-enable consistent-return */\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEventTarget.prototype = {\n    /**\n     * Add a given listener to this event target.\n     * @param {string} eventName The event name to add.\n     * @param {Function} listener The listener to add.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    addEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n        if (typeof listener !== \"function\" && !isObject(listener)) {\n            throw new TypeError(\"'listener' should be a function or an object.\")\n        }\n\n        const listeners = getListeners(this)\n        const optionsIsObj = isObject(options)\n        const capture = optionsIsObj\n            ? Boolean(options.capture)\n            : Boolean(options)\n        const listenerType = capture ? CAPTURE : BUBBLE\n        const newNode = {\n            listener,\n            listenerType,\n            passive: optionsIsObj && Boolean(options.passive),\n            once: optionsIsObj && Boolean(options.once),\n            next: null,\n        }\n\n        // Set it as the first node if the first node is null.\n        let node = listeners.get(eventName)\n        if (node === undefined) {\n            listeners.set(eventName, newNode)\n            return\n        }\n\n        // Traverse to the tail while checking duplication..\n        let prev = null\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                // Should ignore duplication.\n                return\n            }\n            prev = node\n            node = node.next\n        }\n\n        // Add it.\n        prev.next = newNode\n    },\n\n    /**\n     * Remove a given listener from this event target.\n     * @param {string} eventName The event name to remove.\n     * @param {Function} listener The listener to remove.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    removeEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n\n        const listeners = getListeners(this)\n        const capture = isObject(options)\n            ? Boolean(options.capture)\n            : Boolean(options)\n        const listenerType = capture ? CAPTURE : BUBBLE\n\n        let prev = null\n        let node = listeners.get(eventName)\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                if (prev !== null) {\n                    prev.next = node.next\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next)\n                } else {\n                    listeners.delete(eventName)\n                }\n                return\n            }\n\n            prev = node\n            node = node.next\n        }\n    },\n\n    /**\n     * Dispatch a given event.\n     * @param {Event|{type:string}} event The event to dispatch.\n     * @returns {boolean} `false` if canceled.\n     */\n    dispatchEvent(event) {\n        if (event == null || typeof event.type !== \"string\") {\n            throw new TypeError('\"event.type\" should be a string.')\n        }\n\n        // If listeners aren't registered, terminate.\n        const listeners = getListeners(this)\n        const eventName = event.type\n        let node = listeners.get(eventName)\n        if (node == null) {\n            return true\n        }\n\n        // Since we cannot rewrite several properties, so wrap object.\n        const wrappedEvent = wrapEvent(this, event)\n\n        // This doesn't process capturing phase and bubbling phase.\n        // This isn't participating in a tree.\n        let prev = null\n        while (node != null) {\n            // Remove this listener if it's once\n            if (node.once) {\n                if (prev !== null) {\n                    prev.next = node.next\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next)\n                } else {\n                    listeners.delete(eventName)\n                }\n            } else {\n                prev = node\n            }\n\n            // Call this listener\n            setPassiveListener(\n                wrappedEvent,\n                node.passive ? node.listener : null\n            )\n            if (typeof node.listener === \"function\") {\n                try {\n                    node.listener.call(this, wrappedEvent)\n                } catch (err) {\n                    if (\n                        typeof console !== \"undefined\" &&\n                        typeof console.error === \"function\"\n                    ) {\n                        console.error(err)\n                    }\n                }\n            } else if (\n                node.listenerType !== ATTRIBUTE &&\n                typeof node.listener.handleEvent === \"function\"\n            ) {\n                node.listener.handleEvent(wrappedEvent)\n            }\n\n            // Break if `event.stopImmediatePropagation` was called.\n            if (isStopped(wrappedEvent)) {\n                break\n            }\n\n            node = node.next\n        }\n        setPassiveListener(wrappedEvent, null)\n        setEventPhase(wrappedEvent, 0)\n        setCurrentTarget(wrappedEvent, null)\n\n        return !wrappedEvent.defaultPrevented\n    },\n}\n\n// `constructor` is not enumerable.\nObject.defineProperty(EventTarget.prototype, \"constructor\", {\n    value: EventTarget,\n    configurable: true,\n    writable: true,\n})\n\n// Ensure `eventTarget instanceof window.EventTarget` is `true`.\nif (\n    typeof window !== \"undefined\" &&\n    typeof window.EventTarget !== \"undefined\"\n) {\n    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype)\n}\n\nexport { defineEventAttribute, EventTarget }\nexport default EventTarget\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from './buffer';\nimport {\n    TextDecoder as TextDecoderPolyfill,\n    TextEncoder as TextEncoderPolyfill,\n} from 'text-encoding-utf-8';\n\n/** @ignore @suppress {missingRequire} */\nconst _Buffer = typeof Buffer === 'function' ? Buffer : null;\n/** @ignore */\nconst useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';\n\n/** @ignore */\nexport const decodeUtf8 = ((TextDecoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const decoder = new TextDecoder('utf-8');\n        return (buffer?: ArrayBuffer | ArrayBufferView) => decoder.decode(buffer);\n    }\n    return (input: ArrayBufferLike | ArrayBufferView) => {\n        const { buffer, byteOffset, length } = toUint8Array(input);\n        return _Buffer.from(buffer, byteOffset, length).toString();\n    };\n})(typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill);\n\n/** @ignore */\nexport const encodeUtf8 = ((TextEncoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const encoder = new TextEncoder();\n        return (value?: string) => encoder.encode(value);\n    }\n    return (input = '') => toUint8Array(_Buffer.from(input, 'utf8'));\n})(typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill);\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\n\n/** @ignore */\nexport const ITERATOR_DONE: any = Object.freeze({ done: true, value: void (0) });\n\n/** @ignore */\nexport type FileHandle = import('fs').promises.FileHandle;\n/** @ignore */\nexport type ArrowJSONLike = { schema: any; batches?: any[]; dictionaries?: any[]; };\n/** @ignore */\nexport type ReadableDOMStreamOptions = { type: 'bytes' | undefined, autoAllocateChunkSize?: number, highWaterMark?: number };\n\n/** @ignore */\nexport class ArrowJSON {\n    // @ts-ignore\n    constructor(private _json: ArrowJSONLike) {}\n    public get schema(): any { return this._json['schema']; }\n    public get batches(): any[] { return (this._json['batches'] || []) as any[]; }\n    public get dictionaries(): any[] { return (this._json['dictionaries'] || []) as any[]; }\n}\n\n/** @ignore */\nexport interface Readable<T> {\n\n    readonly closed: Promise<void>;\n    cancel(reason?: any): Promise<void>;\n\n    read(size?: number | null): Promise<T | null>;\n    peek(size?: number | null): Promise<T | null>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(size?: number | null): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nexport interface Writable<T> {\n    readonly closed: Promise<void>;\n    close(): void;\n    write(chunk: T): void;\n    abort(reason?: any): void;\n}\n\n/** @ignore */\nexport interface ReadableWritable<TReadable, TWritable> extends Readable<TReadable>, Writable<TWritable> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<TReadable>;\n    toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<TReadable>;\n    toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n}\n\n/** @ignore */\nexport abstract class ReadableInterop<T> {\n\n    public abstract toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<T>;\n    public abstract toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n\n    public tee(): [ReadableStream<T>, ReadableStream<T>] {\n        return this._getDOMStream().tee();\n    }\n    public pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean; }) {\n        return this._getNodeStream().pipe(writable, options);\n    }\n    public pipeTo(writable: WritableStream<T>, options?: PipeOptions) { return this._getDOMStream().pipeTo(writable, options); }\n    public pipeThrough<R extends ReadableStream<any>>(duplex: { writable: WritableStream<T>, readable: R }, options?: PipeOptions) {\n        return this._getDOMStream().pipeThrough(duplex, options);\n    }\n\n    protected _DOMStream?: ReadableStream<T>;\n    private _getDOMStream() {\n        return this._DOMStream || (this._DOMStream = this.toDOMStream());\n    }\n\n    protected _nodeStream?: import('stream').Readable;\n    private _getNodeStream() {\n        return this._nodeStream || (this._nodeStream = this.toNodeStream());\n    }\n}\n\n/** @ignore */\ntype Resolution<T> = { resolve: (value?: T | PromiseLike<T>) => void; reject: (reason?: any) => void; };\n\n/** @ignore */\nexport class AsyncQueue<TReadable = Uint8Array, TWritable = TReadable> extends ReadableInterop<TReadable>\n    implements AsyncIterableIterator<TReadable>, ReadableWritable<TReadable, TWritable> {\n\n    protected _values: TWritable[] = [];\n    protected _error?: { error: any; };\n    protected _closedPromise: Promise<void>;\n    protected _closedPromiseResolve?: (value?: any) => void;\n    protected resolvers: Resolution<IteratorResult<TReadable>>[] = [];\n\n    constructor() {\n        super();\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public write(value: TWritable) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this._values.push(value))\n                : (this.resolvers.shift()!.resolve({ done: false, value } as any));\n        }\n    }\n    public abort(value?: any) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift()!.reject({ done: true, value }));\n        }\n    }\n    public close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift()!.resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n\n    public [Symbol.asyncIterator]() { return this; }\n    public toDOMStream(options?: ReadableDOMStreamOptions) {\n        return streamAdapters.toDOMStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public toNodeStream(options?: import('stream').ReadableOptions) {\n        return streamAdapters.toNodeStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public async throw(_?: any) { await this.abort(_); return ITERATOR_DONE; }\n    public async return(_?: any) { await this.close(); return ITERATOR_DONE; }\n\n    public async read(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'peek')).value; }\n    public next(..._args: any[]): Promise<IteratorResult<TReadable>> {\n        if (this._values.length > 0) {\n            return Promise.resolve({ done: false, value: this._values.shift()! } as any);\n        } else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        } else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        } else {\n            return new Promise<IteratorResult<TReadable>>((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n\n    protected _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this} is closed`);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ReadableInterop, ArrowJSONLike } from '../io/interfaces';\n\n/** @ignore */\ntype FSReadStream = import('fs').ReadStream;\n/** @ignore */\ntype FileHandle = import('fs').promises.FileHandle;\n\n/** @ignore */\nexport interface Subscription {\n    unsubscribe: () => void;\n}\n\n/** @ignore */\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\n/** @ignore */\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\n/** @ignore */\nconst [BigIntCtor, BigIntAvailable] = (() => {\n    const BigIntUnavailableError = () => { throw new Error('BigInt is not available in this environment'); };\n    function BigIntUnavailable() { throw BigIntUnavailableError(); }\n    BigIntUnavailable.asIntN = () => { throw BigIntUnavailableError(); };\n    BigIntUnavailable.asUintN = () => { throw BigIntUnavailableError(); };\n    return typeof BigInt !== 'undefined' ? [BigInt, true] : [<any> BigIntUnavailable, false];\n})() as [BigIntConstructor, boolean];\n\n/** @ignore */\nconst [BigInt64ArrayCtor, BigInt64ArrayAvailable] = (() => {\n    const BigInt64ArrayUnavailableError = () => { throw new Error('BigInt64Array is not available in this environment'); };\n    class BigInt64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigInt64ArrayUnavailableError(); }\n        static from() { throw BigInt64ArrayUnavailableError(); }\n        constructor() { throw BigInt64ArrayUnavailableError(); }\n    }\n    return typeof BigInt64Array !== 'undefined' ? [BigInt64Array, true] : [<any> BigInt64ArrayUnavailable, false];\n})() as [BigInt64ArrayConstructor, boolean];\n\n/** @ignore */\nconst [BigUint64ArrayCtor, BigUint64ArrayAvailable] = (() => {\n    const BigUint64ArrayUnavailableError = () => { throw new Error('BigUint64Array is not available in this environment'); };\n    class BigUint64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigUint64ArrayUnavailableError(); }\n        static from() { throw BigUint64ArrayUnavailableError(); }\n        constructor() { throw BigUint64ArrayUnavailableError(); }\n    }\n    return typeof BigUint64Array !== 'undefined' ? [BigUint64Array, true] : [<any> BigUint64ArrayUnavailable, false];\n})() as [BigUint64ArrayConstructor, boolean];\n\nexport { BigIntCtor as BigInt, BigIntAvailable };\nexport { BigInt64ArrayCtor as BigInt64Array, BigInt64ArrayAvailable };\nexport { BigUint64ArrayCtor as BigUint64Array, BigUint64ArrayAvailable };\n\n/** @ignore */ const isNumber = (x: any) => typeof x === 'number';\n/** @ignore */ const isBoolean = (x: any) => typeof x === 'boolean';\n/** @ignore */ const isFunction = (x: any) => typeof x === 'function';\n/** @ignore */\nexport const isObject = (x: any): x is Object => x != null && Object(x) === x;\n\n/** @ignore */\nexport const isPromise = <T = any>(x: any): x is PromiseLike<T> => {\n    return isObject(x) && isFunction(x.then);\n};\n\n/** @ignore */\nexport const isObservable = <T = any>(x: any): x is Observable<T> => {\n    return isObject(x) && isFunction(x.subscribe);\n};\n\n/** @ignore */\nexport const isIterable = <T = any>(x: any): x is Iterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.iterator]);\n};\n\n/** @ignore */\nexport const isAsyncIterable = <T = any>(x: any): x is AsyncIterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.asyncIterator]);\n};\n\n/** @ignore */\nexport const isArrowJSON = (x: any): x is ArrowJSONLike  => {\n    return isObject(x) && isObject(x['schema']);\n};\n\n/** @ignore */\nexport const isArrayLike = <T = any>(x: any): x is ArrayLike<T> => {\n    return isObject(x) && isNumber(x['length']);\n};\n\n/** @ignore */\nexport const isIteratorResult = <T = any>(x: any): x is IteratorResult<T> => {\n    return isObject(x) && ('done' in x) && ('value' in x);\n};\n\n/** @ignore */\nexport const isUnderlyingSink = <T = any>(x: any): x is UnderlyingSink<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['close']) &&\n        isFunction(x['start']) &&\n        isFunction(x['write']);\n};\n\n/** @ignore */\nexport const isFileHandle = (x: any): x is FileHandle => {\n    return isObject(x) && isFunction(x['stat']) && isNumber(x['fd']);\n};\n\n/** @ignore */\nexport const isFSReadStream = (x: any): x is FSReadStream => {\n    return isReadableNodeStream(x) && isNumber((<any> x)['bytesRead']);\n};\n\n/** @ignore */\nexport const isFetchResponse = (x: any): x is Response => {\n    return isObject(x) && isReadableDOMStream(x['body']);\n};\n\n/** @ignore */\nexport const isWritableDOMStream = <T = any>(x: any): x is WritableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['getWriter']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableDOMStream = <T = any>(x: any): x is ReadableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['cancel']) &&\n        isFunction(x['getReader']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isWritableNodeStream = (x: any): x is NodeJS.WritableStream => {\n    return isObject(x) &&\n        isFunction(x['end']) &&\n        isFunction(x['write']) &&\n        isBoolean(x['writable']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableNodeStream = (x: any): x is NodeJS.ReadableStream => {\n    return isObject(x) &&\n        isFunction(x['read']) &&\n        isFunction(x['pipe']) &&\n        isBoolean(x['readable']) &&\n        !(x instanceof ReadableInterop);\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    let result = chunks[0] ? [chunks[0]] : [];\n    let xOffset: number, yOffset: number, xLen: number, yLen: number;\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n        x = result[j];\n        y = chunks[i];\n        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\n\n/** @ignore */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/** @ignore */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[], number] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    let result = collapseContiguousByteRanges(chunks);\n    let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let offset = 0, index = -1, length = Math.min(size || Infinity, byteLength);\n    for (let n = result.length; ++index < n;) {\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                result[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\n\n/** @ignore */\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\n\n/** @ignore */\nexport function toArrayBufferView<T extends TypedArray>(ArrayBufferViewCtor: TypedArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView<T extends BigIntArray>(ArrayBufferViewCtor: BigIntArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView(ArrayBufferViewCtor: any, input: ArrayBufferViewInput) {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (value instanceof ArrayBufferViewCtor) {\n        if (ArrayBufferViewCtor === Uint8Array) {\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n        }\n        return value;\n    }\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = encodeUtf8(value); }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toBigInt64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigInt64Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toBigUint64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigUint64Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewIteratorInput) {\n\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n                   (typeof source === 'string') ? wrap(source)\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\n              : (source instanceof ArrayBuffer) ? wrap(source)\n           : (source instanceof SharedArrayBuf) ? wrap(source)\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncIterableIterator<T> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function*(it: Iterator<any>) {\n            let r: IteratorResult<any> = <any> null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                                     : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/** @ignore */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n/** @ignore */\nexport function compareArrayLike<T extends ArrayLike<any>>(a: T, b: T) {\n    let i = 0, n = a.length;\n    if (n !== b.length) { return false; }\n    if (n > 0) {\n        do { if (a[i] !== b[i]) { return false; } } while (++i < n);\n    }\n    return true;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport {\n    toUint8Array,\n    joinUint8Arrays,\n    ArrayBufferViewInput,\n    toUint8ArrayIterator,\n    toUint8ArrayAsyncIterator\n} from '../util/buffer';\n\nimport { ReadableDOMStreamOptions } from './interfaces';\n\n/** @ignore */\nexport default {\n    fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n        return pump(fromIterable<T>(source));\n    },\n    fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromAsyncIterable<T>(source));\n    },\n    fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromDOMStream<T>(source));\n    },\n    fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n        return pump(fromNodeStream(stream));\n    },\n    // @ts-ignore\n    toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n        throw new Error(`\"toDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toNodeStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: import('stream').ReadableOptions): import('stream').Readable {\n        throw new Error(`\"toNodeStream\" not available in this environment`);\n    },\n};\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nfunction* fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayIterator(source)[Symbol.iterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\n                it.next(undefined) : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return());\n    }\n}\n\n/** @ignore */\nasync function* fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it.next(undefined)\n                : await it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (await it.return());\n    }\n}\n\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nasync function* fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done = false, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the reader and lock the stream\n    let it = new AdaptiveByteReader(source);\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it['read'](undefined)\n                : await it['read'](size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(toUint8Array(buffer));\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (await it['cancel'](e));\n    } finally {\n        (threw === false) ? (await it['cancel']())\n            : source['locked'] && it.releaseLock();\n    }\n}\n\n/** @ignore */\nclass AdaptiveByteReader<T extends ArrayBufferViewInput> {\n\n    private supportsBYOB: boolean;\n    private byobReader: ReadableStreamBYOBReader | null = null;\n    private defaultReader: ReadableStreamDefaultReader<T> | null = null;\n    private reader: ReadableStreamBYOBReader | ReadableStreamDefaultReader<T> | null;\n\n    constructor(private source: ReadableStream<T>) {\n        try {\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n        } catch (e) {\n            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n        }\n    }\n\n    get closed(): Promise<void> {\n        return this.reader ? this.reader['closed'].catch(() => {}) : Promise.resolve();\n    }\n\n    releaseLock(): void {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = this.byobReader = this.defaultReader = null;\n    }\n\n    async cancel(reason?: any): Promise<void> {\n        const { reader, source } = this;\n        reader && (await reader['cancel'](reason).catch(() => {}));\n        source && (source['locked'] && this.releaseLock());\n    }\n\n    async read(size?: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n        if (size === 0) {\n            return { done: this.reader == null, value: new Uint8Array(0) };\n        }\n        const result = !this.supportsBYOB || typeof size !== 'number'\n            ? await this.getDefaultReader().read()\n            : await this.readFromBYOBReader(size);\n        !result.done && (result.value = toUint8Array(result as ReadableStreamReadResult<Uint8Array>));\n        return result as ReadableStreamReadResult<Uint8Array>;\n    }\n\n    private getDefaultReader() {\n        if (this.byobReader) { this.releaseLock(); }\n        if (!this.defaultReader) {\n            this.defaultReader = this.source['getReader']();\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.defaultReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.defaultReader);\n    }\n\n    private getBYOBReader() {\n        if (this.defaultReader) { this.releaseLock(); }\n        if (!this.byobReader) {\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.byobReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.byobReader);\n    }\n\n    // This strategy plucked from the example in the streams spec:\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\n    private async readFromBYOBReader(size: number) {\n        return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n    }\n}\n\n/** @ignore */\nasync function readInto(reader: ReadableStreamBYOBReader, buffer: ArrayBufferLike, offset: number, size: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n    if (offset >= size) {\n        return { done: false, value: new Uint8Array(buffer, 0, size) };\n    }\n    const { done, value } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n    if (((offset += value.byteLength) < size) && !done) {\n        return await readInto(reader, value.buffer, offset, size);\n    }\n    return { done, value: new Uint8Array(value.buffer, 0, offset) };\n}\n\n/** @ignore */\ntype EventName = 'end' | 'error' | 'readable';\n/** @ignore */\ntype Event = [EventName, (_: any) => void, Promise<[EventName, Error | null]>];\n/** @ignore */\nconst onEvent = <T extends string>(stream: NodeJS.ReadableStream, event: T) => {\n    let handler = (_: any) => resolve([event, _]);\n    let resolve: (value?: [T, any] | PromiseLike<[T, any]>) => void;\n    return [event, handler, new Promise<[T, any]>(\n        (r) => (resolve = r) && stream['once'](event, handler)\n    )] as Event;\n};\n\n/** @ignore */\nasync function* fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n\n    let events: Event[] = [];\n    let event: EventName = 'error';\n    let done = false, err: Error | null = null;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array | Buffer | string;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we\n    // add the listener for the source stream's 'readable' event.\n    ({ cmd, size } = yield <any> null);\n\n    // ignore stdin if it's a TTY\n    if ((stream as any)['isTTY']) { return yield new Uint8Array(0); }\n\n    try {\n        // initialize the stream event handlers\n        events[0] = onEvent(stream, 'end');\n        events[1] = onEvent(stream, 'error');\n\n        do {\n            events[2] = onEvent(stream, 'readable');\n\n            // wait on the first message event from the stream\n            [event, err] = await Promise.race(events.map((x) => x[2]));\n\n            // if the stream emitted an Error, rethrow it\n            if (event === 'error') { break; }\n            if (!(done = event === 'end')) {\n                // If the size is NaN, request to read everything in the stream's internal buffer\n                if (!isFinite(size - bufferLength)) {\n                    buffer = toUint8Array(stream['read'](undefined));\n                } else {\n                    buffer = toUint8Array(stream['read'](size - bufferLength));\n                    // If the byteLength is 0, then the requested amount is more than the stream has\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                    // continue emitting readable events, so request to read everything the stream\n                    // has in its internal buffer right now.\n                    if (buffer.byteLength < (size - bufferLength)) {\n                        buffer = toUint8Array(stream['read'](undefined));\n                    }\n                }\n                // if chunk is not null or empty, push it onto the queue\n                if (buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } finally {\n        await cleanup(events, event === 'error' ? err : null);\n    }\n\n    function cleanup<T extends Error | null | void>(events: Event[], err?: T) {\n        buffer = buffers = <any> null;\n        return new Promise<T>(async (resolve, reject) => {\n            for (const [evt, fn] of events) {\n                stream['off'](evt, fn);\n            }\n            try {\n                // Some stream implementations don't call the destroy callback,\n                // because it's really a node-internal API. Just calling `destroy`\n                // here should be enough to conform to the ReadableStream contract\n                const destroy = (stream as any)['destroy'];\n                destroy && destroy.call(stream, err);\n                err = undefined;\n            } catch (e) { err = e || err; } finally {\n                err != null ? reject(err) : resolve();\n            }\n        });\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { DataType } from './type';\nimport { Chunked } from './vector/chunked';\n\n/** @ignore */\nexport interface Clonable<R extends AbstractVector> {\n    clone(...args: any[]): R;\n}\n\n/** @ignore */\nexport interface Sliceable<R extends AbstractVector> {\n    slice(begin?: number, end?: number): R;\n}\n\n/** @ignore */\nexport interface Applicative<T extends DataType, R extends Chunked> {\n    concat(...others: Vector<T>[]): R;\n    readonly [Symbol.isConcatSpreadable]: boolean;\n}\n\nexport interface AbstractVector<T extends DataType = any>\n    extends Clonable<Vector<T>>,\n            Sliceable<Vector<T>>,\n            Applicative<T, Chunked<T>> {\n\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\nexport abstract class AbstractVector<T extends DataType = any> implements Iterable<T['TValue'] | null> {\n\n    public abstract readonly data: Data<T>;\n    public abstract readonly type: T;\n    public abstract readonly typeId: T['TType'];\n    public abstract readonly length: number;\n    public abstract readonly stride: number;\n    public abstract readonly nullCount: number;\n    public abstract readonly byteLength: number;\n    public abstract readonly numChildren: number;\n\n    public abstract readonly ArrayType: T['ArrayType'];\n\n    public abstract isValid(index: number): boolean;\n    public abstract get(index: number): T['TValue'] | null;\n    public abstract set(index: number, value: T['TValue'] | null): void;\n    public abstract indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n    public abstract [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n\n    public abstract toArray(): T['TArray'];\n    public abstract getChildAt<R extends DataType = any>(index: number): Vector<R> | null;\n}\n\nexport { AbstractVector as Vector };\n","/* tslint:disable:class-name */\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MetadataVersion {\n        /**\n         * 0.1.0\n         */\n        V1 = 0,\n\n        /**\n         * 0.2.0\n         */\n        V2 = 1,\n\n        /**\n         * 0.3.0 -> 0.7.1\n         */\n        V3 = 2,\n\n        /**\n         * >= 0.8.0\n         */\n        V4 = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum UnionMode {\n        Sparse = 0,\n        Dense = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Precision {\n        HALF = 0,\n        SINGLE = 1,\n        DOUBLE = 2\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum DateUnit {\n        DAY = 0,\n        MILLISECOND = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum TimeUnit {\n        SECOND = 0,\n        MILLISECOND = 1,\n        MICROSECOND = 2,\n        NANOSECOND = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum IntervalUnit {\n        YEAR_MONTH = 0,\n        DAY_TIME = 1\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Type {\n        NONE = 0,\n        Null = 1,\n        Int = 2,\n        FloatingPoint = 3,\n        Binary = 4,\n        Utf8 = 5,\n        Bool = 6,\n        Decimal = 7,\n        Date = 8,\n        Time = 9,\n        Timestamp = 10,\n        Interval = 11,\n        List = 12,\n        Struct_ = 13,\n        Union = 14,\n        FixedSizeBinary = 15,\n        FixedSizeList = 16,\n        Map = 17,\n        Duration = 18,\n        LargeBinary = 19,\n        LargeUtf8 = 20,\n        LargeList = 21\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Endianness {\n        Little = 0,\n        Big = 1\n    }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Null {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Null\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Null= obj\n         * @returns Null\n         */\n        static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n            return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startNull(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Null.startNull(builder);\n            return Null.endNull(builder);\n        }\n    }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Struct_ {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Struct_\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Struct_= obj\n         * @returns Struct_\n         */\n        static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n            return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startStruct_(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Struct_.startStruct_(builder);\n            return Struct_.endStruct_(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class List {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns List\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): List {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param List= obj\n         * @returns List\n         */\n        static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n            return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            List.startList(builder);\n            return List.endList(builder);\n        }\n    }\n}\n/**\n * Same as List, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeList= obj\n         * @returns LargeList\n         */\n        static getRootAsLargeList(bb: flatbuffers.ByteBuffer, obj?: LargeList): LargeList {\n            return (obj || new LargeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeList.startLargeList(builder);\n            return LargeList.endLargeList(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeList= obj\n         * @returns FixedSizeList\n         */\n        static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n            return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of list items per value\n         *\n         * @returns number\n         */\n        listSize(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeList(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number listSize\n         */\n        static addListSize(builder: flatbuffers.Builder, listSize: number) {\n            builder.addFieldInt32(0, listSize, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeList(builder: flatbuffers.Builder, listSize: number): flatbuffers.Offset {\n            FixedSizeList.startFixedSizeList(builder);\n            FixedSizeList.addListSize(builder, listSize);\n            return FixedSizeList.endFixedSizeList(builder);\n        }\n    }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Map {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Map\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Map= obj\n         * @returns Map\n         */\n        static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n            return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Set to true if the keys within each value are sorted\n         *\n         * @returns boolean\n         */\n        keysSorted(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMap(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean keysSorted\n         */\n        static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n            builder.addFieldInt8(0, +keysSorted, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createMap(builder: flatbuffers.Builder, keysSorted: boolean): flatbuffers.Offset {\n            Map.startMap(builder);\n            Map.addKeysSorted(builder, keysSorted);\n            return Map.endMap(builder);\n        }\n    }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Union {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Union\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Union= obj\n         * @returns Union\n         */\n        static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n            return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.UnionMode\n         */\n        mode(): org.apache.arrow.flatbuf.UnionMode {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n        }\n\n        /**\n         * @param number index\n         * @returns number\n         */\n        typeIds(index: number): number | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n        }\n\n        /**\n         * @returns number\n         */\n        typeIdsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns Int32Array\n         */\n        typeIdsArray(): Int32Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUnion(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.UnionMode mode\n         */\n        static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n            builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeIdsOffset\n         */\n        static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, typeIdsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Int32Array): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUnion(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode, typeIdsOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Union.startUnion(builder);\n            Union.addMode(builder, mode);\n            Union.addTypeIds(builder, typeIdsOffset);\n            return Union.endUnion(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Int {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Int\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Int= obj\n         * @returns Int\n         */\n        static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n            return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns boolean\n         */\n        isSigned(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInt(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(0, bitWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isSigned\n         */\n        static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n            builder.addFieldInt8(1, +isSigned, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInt(builder: flatbuffers.Builder, bitWidth: number, isSigned: boolean): flatbuffers.Offset {\n            Int.startInt(builder);\n            Int.addBitWidth(builder, bitWidth);\n            Int.addIsSigned(builder, isSigned);\n            return Int.endInt(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FloatingPoint {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FloatingPoint\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FloatingPoint= obj\n         * @returns FloatingPoint\n         */\n        static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n            return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Precision\n         */\n        precision(): org.apache.arrow.flatbuf.Precision {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFloatingPoint(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Precision precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n            builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFloatingPoint(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision): flatbuffers.Offset {\n            FloatingPoint.startFloatingPoint(builder);\n            FloatingPoint.addPrecision(builder, precision);\n            return FloatingPoint.endFloatingPoint(builder);\n        }\n    }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Utf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Utf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Utf8= obj\n         * @returns Utf8\n         */\n        static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n            return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Utf8.startUtf8(builder);\n            return Utf8.endUtf8(builder);\n        }\n    }\n}\n/**\n * Opaque binary data\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Binary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Binary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Binary= obj\n         * @returns Binary\n         */\n        static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n            return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Binary.startBinary(builder);\n            return Binary.endBinary(builder);\n        }\n    }\n}\n/**\n * Same as Utf8, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeUtf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeUtf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeUtf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeUtf8= obj\n         * @returns LargeUtf8\n         */\n        static getRootAsLargeUtf8(bb: flatbuffers.ByteBuffer, obj?: LargeUtf8): LargeUtf8 {\n            return (obj || new LargeUtf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeUtf8.startLargeUtf8(builder);\n            return LargeUtf8.endLargeUtf8(builder);\n        }\n    }\n}\n/**\n * Same as Binary, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeBinary= obj\n         * @returns LargeBinary\n         */\n        static getRootAsLargeBinary(bb: flatbuffers.ByteBuffer, obj?: LargeBinary): LargeBinary {\n            return (obj || new LargeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeBinary.startLargeBinary(builder);\n            return LargeBinary.endLargeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeBinary= obj\n         * @returns FixedSizeBinary\n         */\n        static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n            return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of bytes per value\n         *\n         * @returns number\n         */\n        byteWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number byteWidth\n         */\n        static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n            builder.addFieldInt32(0, byteWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeBinary(builder: flatbuffers.Builder, byteWidth: number): flatbuffers.Offset {\n            FixedSizeBinary.startFixedSizeBinary(builder);\n            FixedSizeBinary.addByteWidth(builder, byteWidth);\n            return FixedSizeBinary.endFixedSizeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Bool {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Bool\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Bool= obj\n         * @returns Bool\n         */\n        static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n            return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBool(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Bool.startBool(builder);\n            return Bool.endBool(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Decimal {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Decimal\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Decimal= obj\n         * @returns Decimal\n         */\n        static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n            return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Total number of decimal digits\n         *\n         * @returns number\n         */\n        precision(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Number of digits after the decimal point \".\"\n         *\n         * @returns number\n         */\n        scale(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDecimal(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: number) {\n            builder.addFieldInt32(0, precision, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number scale\n         */\n        static addScale(builder: flatbuffers.Builder, scale: number) {\n            builder.addFieldInt32(1, scale, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDecimal(builder: flatbuffers.Builder, precision: number, scale: number): flatbuffers.Offset {\n            Decimal.startDecimal(builder);\n            Decimal.addPrecision(builder, precision);\n            Decimal.addScale(builder, scale);\n            return Decimal.endDecimal(builder);\n        }\n    }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Date {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Date\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Date= obj\n         * @returns Date\n         */\n        static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n            return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.DateUnit\n         */\n        unit(): org.apache.arrow.flatbuf.DateUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDate(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.DateUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDate(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit): flatbuffers.Offset {\n            Date.startDate(builder);\n            Date.addUnit(builder, unit);\n            return Date.endDate(builder);\n        }\n    }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Time {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Time\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Time= obj\n         * @returns Time\n         */\n        static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n            return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 32;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTime(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(1, bitWidth, 32);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTime(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, bitWidth: number): flatbuffers.Offset {\n            Time.startTime(builder);\n            Time.addUnit(builder, unit);\n            Time.addBitWidth(builder, bitWidth);\n            return Time.endTime(builder);\n        }\n    }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Timestamp {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Timestamp\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Timestamp= obj\n         * @returns Timestamp\n         */\n        static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n            return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n        }\n\n        /**\n         * The time zone is a string indicating the name of a time zone, one of:\n         *\n         * * As used in the Olson time zone database (the \"tz database\" or\n         *   \"tzdata\"), such as \"America/New_York\"\n         * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n         *\n         * Whether a timezone string is present indicates different semantics about\n         * the data:\n         *\n         * * If the time zone is null or equal to an empty string, the data is \"time\n         *   zone naive\" and shall be displayed *as is* to the user, not localized\n         *   to the locale of the user. This data can be though of as UTC but\n         *   without having \"UTC\" as the time zone, it is not considered to be\n         *   localized to any time zone\n         *\n         * * If the time zone is set to a valid value, values can be displayed as\n         *   \"localized\" to that time zone, even though the underlying 64-bit\n         *   integers are identical to the same data stored in UTC. Converting\n         *   between time zones is a metadata-only operation and does not change the\n         *   underlying values\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        timezone(): string | null;\n        timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        timezone(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTimestamp(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset timezoneOffset\n         */\n        static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, timezoneOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTimestamp(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, timezoneOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Timestamp.startTimestamp(builder);\n            Timestamp.addUnit(builder, unit);\n            Timestamp.addTimezone(builder, timezoneOffset);\n            return Timestamp.endTimestamp(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Interval {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Interval\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Interval= obj\n         * @returns Interval\n         */\n        static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n            return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.IntervalUnit\n         */\n        unit(): org.apache.arrow.flatbuf.IntervalUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInterval(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.IntervalUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInterval(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit): flatbuffers.Offset {\n            Interval.startInterval(builder);\n            Interval.addUnit(builder, unit);\n            return Interval.endInterval(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Duration {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Duration\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Duration {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Duration= obj\n         * @returns Duration\n         */\n        static getRootAsDuration(bb: flatbuffers.ByteBuffer, obj?: Duration): Duration {\n            return (obj || new Duration).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDuration(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDuration(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDuration(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit): flatbuffers.Offset {\n            Duration.startDuration(builder);\n            Duration.addUnit(builder, unit);\n            return Duration.endDuration(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class KeyValue {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns KeyValue\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param KeyValue= obj\n         * @returns KeyValue\n         */\n        static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n            return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        key(): string | null;\n        key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        key(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        value(): string | null;\n        value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        value(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startKeyValue(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset keyOffset\n         */\n        static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, keyOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset valueOffset\n         */\n        static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, valueOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createKeyValue(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n            KeyValue.startKeyValue(builder);\n            KeyValue.addKey(builder, keyOffset);\n            KeyValue.addValue(builder, valueOffset);\n            return KeyValue.endKeyValue(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryEncoding {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryEncoding\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryEncoding= obj\n         * @returns DictionaryEncoding\n         */\n        static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n            return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * The known dictionary id in the application where this data is used. In\n         * the file or streaming formats, the dictionary ids are found in the\n         * DictionaryBatch messages\n         *\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * The dictionary indices are constrained to be positive integers. If this\n         * field is null, the indices must be signed int32\n         *\n         * @param org.apache.arrow.flatbuf.Int= obj\n         * @returns org.apache.arrow.flatbuf.Int|null\n         */\n        indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * By default, dictionaries are not ordered, or the order does not have\n         * semantic meaning. In some statistical, applications, dictionary-encoding\n         * is used to represent ordered categorical data, and we provide a way to\n         * preserve that metadata here\n         *\n         * @returns boolean\n         */\n        isOrdered(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryEncoding(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset indexTypeOffset\n         */\n        static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, indexTypeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isOrdered\n         */\n        static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n            builder.addFieldInt8(2, +isOrdered, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryEncoding(builder: flatbuffers.Builder, id: flatbuffers.Long, indexTypeOffset: flatbuffers.Offset, isOrdered: boolean): flatbuffers.Offset {\n            DictionaryEncoding.startDictionaryEncoding(builder);\n            DictionaryEncoding.addId(builder, id);\n            DictionaryEncoding.addIndexType(builder, indexTypeOffset);\n            DictionaryEncoding.addIsOrdered(builder, isOrdered);\n            return DictionaryEncoding.endDictionaryEncoding(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Field {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Field\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Field= obj\n         * @returns Field\n         */\n        static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n            return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Name is not required, in i.e. a List\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        name(): string | null;\n        name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        name(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * Whether or not this field can contain nulls. Should be true in general.\n         *\n         * @returns boolean\n         */\n        nullable(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Type\n         */\n        typeType(): org.apache.arrow.flatbuf.Type {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n        }\n\n        /**\n         * This is the type of the decoded value if the field is dictionary encoded.\n         *\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        type<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * Present only if the field is dictionary encoded.\n         *\n         * @param org.apache.arrow.flatbuf.DictionaryEncoding= obj\n         * @returns org.apache.arrow.flatbuf.DictionaryEncoding|null\n         */\n        dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * children apply only to nested data types like Struct, List and Union. For\n         * primitive types children will have length 0.\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        childrenLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * User-defined metadata\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startField(builder: flatbuffers.Builder) {\n            builder.startObject(7);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nameOffset\n         */\n        static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, nameOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean nullable\n         */\n        static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n            builder.addFieldInt8(1, +nullable, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Type typeType\n         */\n        static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n            builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeOffset\n         */\n        static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, typeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionaryOffset\n         */\n        static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, dictionaryOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset childrenOffset\n         */\n        static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(5, childrenOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(6, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createField(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, nullable: boolean, typeType: org.apache.arrow.flatbuf.Type, typeOffset: flatbuffers.Offset, dictionaryOffset: flatbuffers.Offset, childrenOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Field.startField(builder);\n            Field.addName(builder, nameOffset);\n            Field.addNullable(builder, nullable);\n            Field.addTypeType(builder, typeType);\n            Field.addType(builder, typeOffset);\n            Field.addDictionary(builder, dictionaryOffset);\n            Field.addChildren(builder, childrenOffset);\n            Field.addCustomMetadata(builder, customMetadataOffset);\n            return Field.endField(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Buffer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Buffer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The relative offset into the shared memory page where the bytes for this\n         * buffer starts\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The absolute length (in bytes) of the memory buffer. The memory is found\n         * from offset (inclusive) to offset + length (non-inclusive).\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param flatbuffers.Long length\n         * @returns flatbuffers.Offset\n         */\n        static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(length);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Schema {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Schema\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Schema= obj\n         * @returns Schema\n         */\n        static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n            return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * endianness of the buffer\n         * it is Little Endian by default\n         * if endianness doesn't match the underlying system then the vectors need to be converted\n         *\n         * @returns org.apache.arrow.flatbuf.Endianness\n         */\n        endianness(): org.apache.arrow.flatbuf.Endianness {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        fieldsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startSchema(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Endianness endianness\n         */\n        static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n            builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset fieldsOffset\n         */\n        static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, fieldsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createSchema(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness, fieldsOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Schema.startSchema(builder);\n            Schema.addEndianness(builder, endianness);\n            Schema.addFields(builder, fieldsOffset);\n            Schema.addCustomMetadata(builder, customMetadataOffset);\n            return Schema.endSchema(builder);\n        }\n    }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n    export import Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MessageHeader {\n        NONE = 0,\n        Schema = 1,\n        DictionaryBatch = 2,\n        RecordBatch = 3,\n        Tensor = 4,\n        SparseTensor = 5\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FieldNode {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FieldNode\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The number of value slots in the Arrow array at this level of a nested\n         * tree\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The number of observed nulls. Fields with null_count == 0 may choose not\n         * to write their physical validity bitmap out as a materialized buffer,\n         * instead setting the length of the bitmap buffer to 0.\n         *\n         * @returns flatbuffers.Long\n         */\n        nullCount(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         * @param flatbuffers.Long null_count\n         * @returns flatbuffers.Offset\n         */\n        static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(null_count);\n            builder.writeInt64(length);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class RecordBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns RecordBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param RecordBatch= obj\n         * @returns RecordBatch\n         */\n        static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n            return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * number of records / rows. The arrays in the batch should all have this\n         * length\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * Nodes correspond to the pre-ordered flattened logical schema\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.FieldNode= obj\n         * @returns org.apache.arrow.flatbuf.FieldNode\n         */\n        nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        nodesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Buffers correspond to the pre-ordered flattened buffer tree\n         *\n         * The number of buffers appended to this list depends on the schema. For\n         * example, most primitive arrays will have 2 buffers, 1 for the validity\n         * bitmap and 1 for the values. For struct arrays, there will only be a\n         * single buffer for the validity (nulls) bitmap\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Buffer= obj\n         * @returns org.apache.arrow.flatbuf.Buffer\n         */\n        buffers(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Buffer): NS7624605610262437867.org.apache.arrow.flatbuf.Buffer | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        buffersLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startRecordBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         */\n        static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n            builder.addFieldInt64(0, length, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nodesOffset\n         */\n        static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, nodesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset buffersOffset\n         */\n        static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, buffersOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createRecordBatch(builder: flatbuffers.Builder, length: flatbuffers.Long, nodesOffset: flatbuffers.Offset, buffersOffset: flatbuffers.Offset): flatbuffers.Offset {\n            RecordBatch.startRecordBatch(builder);\n            RecordBatch.addLength(builder, length);\n            RecordBatch.addNodes(builder, nodesOffset);\n            RecordBatch.addBuffers(builder, buffersOffset);\n            return RecordBatch.endRecordBatch(builder);\n        }\n    }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryBatch= obj\n         * @returns DictionaryBatch\n         */\n        static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n            return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.RecordBatch= obj\n         * @returns org.apache.arrow.flatbuf.RecordBatch|null\n         */\n        data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * If isDelta is true the values in the dictionary are to be appended to a\n         * dictionary with the indicated id\n         *\n         * @returns boolean\n         */\n        isDelta(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dataOffset\n         */\n        static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, dataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isDelta\n         */\n        static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n            builder.addFieldInt8(2, +isDelta, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryBatch(builder: flatbuffers.Builder, id: flatbuffers.Long, dataOffset: flatbuffers.Offset, isDelta: boolean): flatbuffers.Offset {\n            DictionaryBatch.startDictionaryBatch(builder);\n            DictionaryBatch.addId(builder, id);\n            DictionaryBatch.addData(builder, dataOffset);\n            DictionaryBatch.addIsDelta(builder, isDelta);\n            return DictionaryBatch.endDictionaryBatch(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Message {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Message\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Message= obj\n         * @returns Message\n         */\n        static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n            return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MessageHeader\n         */\n        headerType(): org.apache.arrow.flatbuf.MessageHeader {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n        }\n\n        /**\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        header<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue): NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMessage(builder: flatbuffers.Builder) {\n            builder.startObject(5);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MessageHeader headerType\n         */\n        static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n            builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset headerOffset\n         */\n        static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, headerOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long bodyLength\n         */\n        static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n            builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createMessage(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, headerType: org.apache.arrow.flatbuf.MessageHeader, headerOffset: flatbuffers.Offset, bodyLength: flatbuffers.Long, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Message.startMessage(builder);\n            Message.addVersion(builder, version);\n            Message.addHeaderType(builder, headerType);\n            Message.addHeader(builder, headerOffset);\n            Message.addBodyLength(builder, bodyLength);\n            Message.addCustomMetadata(builder, customMetadataOffset);\n            return Message.endMessage(builder);\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\n\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n\n/**\n * Main data type enumeration.\n *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64).\n *\n * **Note**: Only enum values 0-17 (NONE through Map) are written to an Arrow\n * IPC payload.\n *\n * The rest of the values are specified here so TypeScript can narrow the type\n * signatures further beyond the base Arrow Types. The Arrow DataTypes include\n * metadata like `bitWidth` that impact the type signatures of the values we\n * accept and return.\n *\n * For example, the `Int8Vector` reads 1-byte numbers from an `Int8Array`, an\n * `Int32Vector` reads a 4-byte number from an `Int32Array`, and an `Int64Vector`\n * reads a pair of 4-byte lo, hi 32-bit integers as a zero-copy slice from the\n * underlying `Int32Array`.\n *\n * Library consumers benefit by knowing the narrowest type, since we can ensure\n * the types across all public methods are propagated, and never bail to `any`.\n * These values are _never_ used at runtime, and they will _never_ be written\n * to the flatbuffers metadata of serialized Arrow IPC payloads.\n */\nexport enum Type {\n    /** The default placeholder type */\n    NONE            =  0,\n    /** A NULL type having no physical storage */\n    Null            =  1,\n    /** Signed or unsigned 8, 16, 32, or 64-bit little-endian integer */\n    Int             =  2,\n    /** 2, 4, or 8-byte floating point value */\n    Float           =  3,\n    /** Variable-length bytes (no guarantee of UTF8-ness) */\n    Binary          =  4,\n    /** UTF8 variable-length string as List<Char> */\n    Utf8            =  5,\n    /** Boolean as 1 bit, LSB bit-packed ordering */\n    Bool            =  6,\n    /** Precision-and-scale-based decimal type. Storage type depends on the parameters. */\n    Decimal         =  7,\n    /** int32_t days or int64_t milliseconds since the UNIX epoch */\n    Date            =  8,\n    /** Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight */\n    Time            =  9,\n    /** Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond) */\n    Timestamp       = 10,\n    /** YEAR_MONTH or DAY_TIME interval in SQL style */\n    Interval        = 11,\n    /** A list of some logical data type */\n    List            = 12,\n    /** Struct of logical types */\n    Struct          = 13,\n    /** Union of logical types */\n    Union           = 14,\n    /** Fixed-size binary. Each value occupies the same number of bytes */\n    FixedSizeBinary = 15,\n    /** Fixed-size list. Each value occupies the same number of bytes */\n    FixedSizeList   = 16,\n    /** Map of named logical types */\n    Map             = 17,\n\n    /** Dictionary aka Category type */\n    Dictionary            = -1,\n    Int8                  = -2,\n    Int16                 = -3,\n    Int32                 = -4,\n    Int64                 = -5,\n    Uint8                 = -6,\n    Uint16                = -7,\n    Uint32                = -8,\n    Uint64                = -9,\n    Float16               = -10,\n    Float32               = -11,\n    Float64               = -12,\n    DateDay               = -13,\n    DateMillisecond       = -14,\n    TimestampSecond       = -15,\n    TimestampMillisecond  = -16,\n    TimestampMicrosecond  = -17,\n    TimestampNanosecond   = -18,\n    TimeSecond            = -19,\n    TimeMillisecond       = -20,\n    TimeMicrosecond       = -21,\n    TimeNanosecond        = -22,\n    DenseUnion            = -23,\n    SparseUnion           = -24,\n    IntervalDayTime       = -25,\n    IntervalYearMonth     = -26,\n}\n\nexport enum BufferType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\n/** @ignore */\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\n/** @ignore */\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\n/** @ignore */\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n            // Otherwise iterate each bit from the offset and return a new one\n            packBools(iterateBits(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n        return bytes;\n    }\n    return bitmap;\n}\n\n/** @ignore */\nexport function packBools(values: Iterable<any>) {\n    let xs: number[] = [];\n    let i = 0, bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    let b = new Uint8Array((xs.length + 7) & ~7);\n    b.set(xs);\n    return b;\n}\n\n/** @ignore */\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\n/** @ignore */\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\n/** @ignore */\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface TypeComparator extends Visitor {\n    visit<T extends DataType>(type: T, other?: DataType | null): other is T;\n    visitMany<T extends DataType>(nodes: T[], others?: DataType[] | null): boolean[];\n    getVisitFn<T extends DataType>(node: VectorType<T> |  Data<T> | T): (other?: DataType | null) => other is T;\n    visitNull                 <T extends Null>                 (type: T, other?: DataType | null): other is T;\n    visitBool                 <T extends Bool>                 (type: T, other?: DataType | null): other is T;\n    visitInt                  <T extends Int>                  (type: T, other?: DataType | null): other is T;\n    visitInt8                 <T extends Int8>                 (type: T, other?: DataType | null): other is T;\n    visitInt16                <T extends Int16>                (type: T, other?: DataType | null): other is T;\n    visitInt32                <T extends Int32>                (type: T, other?: DataType | null): other is T;\n    visitInt64                <T extends Int64>                (type: T, other?: DataType | null): other is T;\n    visitUint8                <T extends Uint8>                (type: T, other?: DataType | null): other is T;\n    visitUint16               <T extends Uint16>               (type: T, other?: DataType | null): other is T;\n    visitUint32               <T extends Uint32>               (type: T, other?: DataType | null): other is T;\n    visitUint64               <T extends Uint64>               (type: T, other?: DataType | null): other is T;\n    visitFloat                <T extends Float>                (type: T, other?: DataType | null): other is T;\n    visitFloat16              <T extends Float16>              (type: T, other?: DataType | null): other is T;\n    visitFloat32              <T extends Float32>              (type: T, other?: DataType | null): other is T;\n    visitFloat64              <T extends Float64>              (type: T, other?: DataType | null): other is T;\n    visitUtf8                 <T extends Utf8>                 (type: T, other?: DataType | null): other is T;\n    visitBinary               <T extends Binary>               (type: T, other?: DataType | null): other is T;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (type: T, other?: DataType | null): other is T;\n    visitDate                 <T extends Date_>                (type: T, other?: DataType | null): other is T;\n    visitDateDay              <T extends DateDay>              (type: T, other?: DataType | null): other is T;\n    visitDateMillisecond      <T extends DateMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestamp            <T extends Timestamp>            (type: T, other?: DataType | null): other is T;\n    visitTimestampSecond      <T extends TimestampSecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (type: T, other?: DataType | null): other is T;\n    visitTime                 <T extends Time>                 (type: T, other?: DataType | null): other is T;\n    visitTimeSecond           <T extends TimeSecond>           (type: T, other?: DataType | null): other is T;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (type: T, other?: DataType | null): other is T;\n    visitDecimal              <T extends Decimal>              (type: T, other?: DataType | null): other is T;\n    visitList                 <T extends List>                 (type: T, other?: DataType | null): other is T;\n    visitStruct               <T extends Struct>               (type: T, other?: DataType | null): other is T;\n    visitUnion                <T extends Union>                (type: T, other?: DataType | null): other is T;\n    visitDenseUnion           <T extends DenseUnion>           (type: T, other?: DataType | null): other is T;\n    visitSparseUnion          <T extends SparseUnion>          (type: T, other?: DataType | null): other is T;\n    visitDictionary           <T extends Dictionary>           (type: T, other?: DataType | null): other is T;\n    visitInterval             <T extends Interval>             (type: T, other?: DataType | null): other is T;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (type: T, other?: DataType | null): other is T;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (type: T, other?: DataType | null): other is T;\n    visitFixedSizeList        <T extends FixedSizeList>        (type: T, other?: DataType | null): other is T;\n    visitMap                  <T extends Map_>                 (type: T, other?: DataType | null): other is T;\n}\n\n/** @ignore */\nexport class TypeComparator extends Visitor {\n    compareSchemas<T extends { [key: string]: DataType }>(schema: Schema<T>, other?: Schema | null): other is Schema<T> {\n        return (schema === other) || (\n            other instanceof schema.constructor &&\n            instance.compareFields(schema.fields, other.fields)\n        );\n    }\n    compareFields<T extends { [key: string]: DataType }>(fields: Field<T[keyof T]>[], others?: Field[] | null): others is Field<T[keyof T]>[] {\n        return (fields === others) || (\n            Array.isArray(fields) &&\n            Array.isArray(others) &&\n            fields.length === others.length &&\n            fields.every((f, i) => instance.compareField(f, others[i]))\n        );\n    }\n    compareField<T extends DataType = any>(field: Field<T>, other?: Field | null): other is Field<T> {\n        return (field === other) || (\n            other instanceof field.constructor &&\n            field.name === other.name &&\n            field.nullable === other.nullable &&\n            instance.visit(field.type, other.type)\n        );\n    }\n}\n\nfunction compareConstructor<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return other instanceof type.constructor;\n}\n\nfunction compareAny<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return (type === other) || compareConstructor(type, other);\n}\n\nfunction compareInt<T extends Int>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.bitWidth === other.bitWidth &&\n        type.isSigned === other.isSigned\n    );\n}\n\nfunction compareFloat<T extends Float>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.precision === other.precision\n    );\n}\n\nfunction compareFixedSizeBinary<T extends FixedSizeBinary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.byteWidth === other.byteWidth\n    );\n}\n\nfunction compareDate<T extends Date_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareTimestamp<T extends Timestamp>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.timezone === other.timezone\n    );\n}\n\nfunction compareTime<T extends Time>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.bitWidth === other.bitWidth\n    );\n}\n\nfunction compareList<T extends List>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareStruct<T extends Struct>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareUnion<T extends Union>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.mode === other.mode &&\n        type.typeIds.every((x, i) => x === other.typeIds[i]) &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareDictionary<T extends Dictionary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.id === other.id &&\n        type.isOrdered === other.isOrdered &&\n        instance.visit(<any> type.indices, other.indices) &&\n        instance.visit(type.dictionary, other.dictionary)\n    );\n}\n\nfunction compareInterval<T extends Interval>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareFixedSizeList<T extends FixedSizeList>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.listSize === other.listSize &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareMap<T extends Map_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.keysSorted === other.keysSorted &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nTypeComparator.prototype.visitNull                 =             compareAny;\nTypeComparator.prototype.visitBool                 =             compareAny;\nTypeComparator.prototype.visitInt                  =             compareInt;\nTypeComparator.prototype.visitInt8                 =             compareInt;\nTypeComparator.prototype.visitInt16                =             compareInt;\nTypeComparator.prototype.visitInt32                =             compareInt;\nTypeComparator.prototype.visitInt64                =             compareInt;\nTypeComparator.prototype.visitUint8                =             compareInt;\nTypeComparator.prototype.visitUint16               =             compareInt;\nTypeComparator.prototype.visitUint32               =             compareInt;\nTypeComparator.prototype.visitUint64               =             compareInt;\nTypeComparator.prototype.visitFloat                =           compareFloat;\nTypeComparator.prototype.visitFloat16              =           compareFloat;\nTypeComparator.prototype.visitFloat32              =           compareFloat;\nTypeComparator.prototype.visitFloat64              =           compareFloat;\nTypeComparator.prototype.visitUtf8                 =             compareAny;\nTypeComparator.prototype.visitBinary               =             compareAny;\nTypeComparator.prototype.visitFixedSizeBinary      = compareFixedSizeBinary;\nTypeComparator.prototype.visitDate                 =            compareDate;\nTypeComparator.prototype.visitDateDay              =            compareDate;\nTypeComparator.prototype.visitDateMillisecond      =            compareDate;\nTypeComparator.prototype.visitTimestamp            =       compareTimestamp;\nTypeComparator.prototype.visitTimestampSecond      =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMillisecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMicrosecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampNanosecond  =       compareTimestamp;\nTypeComparator.prototype.visitTime                 =            compareTime;\nTypeComparator.prototype.visitTimeSecond           =            compareTime;\nTypeComparator.prototype.visitTimeMillisecond      =            compareTime;\nTypeComparator.prototype.visitTimeMicrosecond      =            compareTime;\nTypeComparator.prototype.visitTimeNanosecond       =            compareTime;\nTypeComparator.prototype.visitDecimal              =             compareAny;\nTypeComparator.prototype.visitList                 =            compareList;\nTypeComparator.prototype.visitStruct               =          compareStruct;\nTypeComparator.prototype.visitUnion                =           compareUnion;\nTypeComparator.prototype.visitDenseUnion           =           compareUnion;\nTypeComparator.prototype.visitSparseUnion          =           compareUnion;\nTypeComparator.prototype.visitDictionary           =      compareDictionary;\nTypeComparator.prototype.visitInterval             =        compareInterval;\nTypeComparator.prototype.visitIntervalDayTime      =        compareInterval;\nTypeComparator.prototype.visitIntervalYearMonth    =        compareInterval;\nTypeComparator.prototype.visitFixedSizeList        =   compareFixedSizeList;\nTypeComparator.prototype.visitMap                  =             compareMap;\n\n/** @ignore */\nexport const instance = new TypeComparator();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport { Field } from './schema';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypedArrayConstructor } from './interfaces';\nimport { VectorType as V, TypeToDataType } from './interfaces';\nimport { instance as comparer } from './visitor/typecomparator';\n\nimport Long = flatbuffers.Long;\nimport {\n    Type,\n    Precision, UnionMode,\n    DateUnit, TimeUnit, IntervalUnit\n} from './enum';\n\n/** @ignore */\nexport type TimeBitWidth = 32 | 64;\n/** @ignore */\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n/** @ignore */\nexport type IsSigned = { 'true': true; 'false': false };\n/** @ignore */\nexport type RowLike<T extends { [key: string]: DataType }> =\n      ( Iterable<[string, T[keyof T]['TValue'] | null]> )\n    & { [P in keyof T]: T[P]['TValue'] | null }\n    & { get<K extends keyof T>(key: K): T[K]['TValue'] | null; }\n    & { set<K extends keyof T>(key: K, val: T[K]['TValue'] | null): void; }\n    ;\n\n/** @ignore */\nexport type MapLike<K extends DataType = any, V extends DataType = any> =\n      { [P in K['TValue']]: V['TValue'] | null }\n    & ( Map<K['TValue'], V['TValue'] | null> )\n    ;\n\nexport interface DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n    readonly children: Field<TChildren[keyof TChildren]>[];\n}\n\n/**\n * An abstract base class for classes that encapsulate metadata about each of\n * the logical types that Arrow can represent.\n */\nexport abstract class DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    /** @nocollapse */ static            isNull (x: any): x is Null            { return x && x.typeId === Type.Null;            }\n    /** @nocollapse */ static             isInt (x: any): x is Int_            { return x && x.typeId === Type.Int;             }\n    /** @nocollapse */ static           isFloat (x: any): x is Float           { return x && x.typeId === Type.Float;           }\n    /** @nocollapse */ static          isBinary (x: any): x is Binary          { return x && x.typeId === Type.Binary;          }\n    /** @nocollapse */ static            isUtf8 (x: any): x is Utf8            { return x && x.typeId === Type.Utf8;            }\n    /** @nocollapse */ static            isBool (x: any): x is Bool            { return x && x.typeId === Type.Bool;            }\n    /** @nocollapse */ static         isDecimal (x: any): x is Decimal         { return x && x.typeId === Type.Decimal;         }\n    /** @nocollapse */ static            isDate (x: any): x is Date_           { return x && x.typeId === Type.Date;            }\n    /** @nocollapse */ static            isTime (x: any): x is Time_           { return x && x.typeId === Type.Time;            }\n    /** @nocollapse */ static       isTimestamp (x: any): x is Timestamp_      { return x && x.typeId === Type.Timestamp;       }\n    /** @nocollapse */ static        isInterval (x: any): x is Interval_       { return x && x.typeId === Type.Interval;        }\n    /** @nocollapse */ static            isList (x: any): x is List            { return x && x.typeId === Type.List;            }\n    /** @nocollapse */ static          isStruct (x: any): x is Struct          { return x && x.typeId === Type.Struct;          }\n    /** @nocollapse */ static           isUnion (x: any): x is Union_          { return x && x.typeId === Type.Union;           }\n    /** @nocollapse */ static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.typeId === Type.FixedSizeBinary; }\n    /** @nocollapse */ static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.typeId === Type.FixedSizeList;   }\n    /** @nocollapse */ static             isMap (x: any): x is Map_            { return x && x.typeId === Type.Map;             }\n    /** @nocollapse */ static      isDictionary (x: any): x is Dictionary      { return x && x.typeId === Type.Dictionary;      }\n\n    public get typeId(): TType { return <any> Type.NONE; }\n    public compareTo(other: DataType): other is TypeToDataType<TType> {\n        return comparer.visit(this, other);\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).children = null;\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\n/** @ignore */\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\n/** @ignore */\nexport class Null extends DataType<Type.Null> {\n    public toString() { return `Null`; }\n    public get typeId() { return Type.Null as Type.Null; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\n/** @ignore */\ntype Ints = Type.Int | Type.Int8 | Type.Int16 | Type.Int32 | Type.Int64 | Type.Uint8 | Type.Uint16 | Type.Uint32 | Type.Uint64;\n/** @ignore */\ntype IType = {\n    [Type.Int   ]: { bitWidth: IntBitWidth; isSigned: true | false; TArray: IntArray;    TValue: number | bigint | Int32Array | Uint32Array; };\n    [Type.Int8  ]: { bitWidth:           8; isSigned: true;         TArray: Int8Array;   TValue: number; };\n    [Type.Int16 ]: { bitWidth:          16; isSigned: true;         TArray: Int16Array;  TValue: number; };\n    [Type.Int32 ]: { bitWidth:          32; isSigned: true;         TArray: Int32Array;  TValue: number; };\n    [Type.Int64 ]: { bitWidth:          64; isSigned: true;         TArray: Int32Array;  TValue: bigint | Int32Array | Uint32Array; };\n    [Type.Uint8 ]: { bitWidth:           8; isSigned: false;        TArray: Uint8Array;  TValue: number; };\n    [Type.Uint16]: { bitWidth:          16; isSigned: false;        TArray: Uint16Array; TValue: number; };\n    [Type.Uint32]: { bitWidth:          32; isSigned: false;        TArray: Uint32Array; TValue: number; };\n    [Type.Uint64]: { bitWidth:          64; isSigned: false;        TArray: Uint32Array; TValue: bigint | Int32Array | Uint32Array; };\n};\n\n/** @ignore */\ninterface Int_<T extends Ints = Ints> extends DataType<T> { TArray: IType[T]['TArray']; TValue: IType[T]['TValue']; }\n/** @ignore */\nclass Int_<T extends Ints = Ints> extends DataType<T> {\n    constructor(public readonly isSigned: IType[T]['isSigned'],\n                public readonly bitWidth: IType[T]['bitWidth']) {\n        super();\n    }\n    public get typeId() { return Type.Int as T; }\n    public get ArrayType(): TypedArrayConstructor<IType[T]['TArray']> {\n        switch (this.bitWidth) {\n            case  8: return this.isSigned ?  Int8Array :  Uint8Array;\n            case 16: return this.isSigned ? Int16Array : Uint16Array;\n            case 32: return this.isSigned ? Int32Array : Uint32Array;\n            case 64: return this.isSigned ? Int32Array : Uint32Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int_) => {\n        (<any> proto).isSigned = null;\n        (<any> proto).bitWidth = null;\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int_.prototype);\n}\n\nexport { Int_ as Int };\n\n/** @ignore */\nexport class Int8 extends Int_<Type.Int8> { constructor() { super(true, 8); } }\n/** @ignore */\nexport class Int16 extends Int_<Type.Int16> { constructor() { super(true, 16); } }\n/** @ignore */\nexport class Int32 extends Int_<Type.Int32> { constructor() { super(true, 32); } }\n/** @ignore */\nexport class Int64 extends Int_<Type.Int64> { constructor() { super(true, 64); } }\n/** @ignore */\nexport class Uint8 extends Int_<Type.Uint8> { constructor() { super(false, 8); } }\n/** @ignore */\nexport class Uint16 extends Int_<Type.Uint16> { constructor() { super(false, 16); } }\n/** @ignore */\nexport class Uint32 extends Int_<Type.Uint32> { constructor() { super(false, 32); } }\n/** @ignore */\nexport class Uint64 extends Int_<Type.Uint64> { constructor() { super(false, 64); } }\n\nObject.defineProperty(Int8.prototype, 'ArrayType', { value: Int8Array });\nObject.defineProperty(Int16.prototype, 'ArrayType', { value: Int16Array });\nObject.defineProperty(Int32.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Int64.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Uint8.prototype, 'ArrayType', { value: Uint8Array });\nObject.defineProperty(Uint16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Uint32.prototype, 'ArrayType', { value: Uint32Array });\nObject.defineProperty(Uint64.prototype, 'ArrayType', { value: Uint32Array });\n\n/** @ignore */\ntype Floats = Type.Float | Type.Float16 | Type.Float32 | Type.Float64;\n/** @ignore */\ntype FType = {\n    [Type.Float  ]: { precision: Precision;        TArray: FloatArray;    TValue: number; };\n    [Type.Float16]: { precision: Precision.HALF;   TArray: Uint16Array;   TValue: number; };\n    [Type.Float32]: { precision: Precision.SINGLE; TArray: Float32Array;  TValue: number; };\n    [Type.Float64]: { precision: Precision.DOUBLE; TArray: Float64Array;  TValue: number; };\n};\n\n/** @ignore */\nexport interface Float<T extends Floats = Floats> extends DataType<T> { TArray: FType[T]['TArray']; TValue: number; }\n/** @ignore */\nexport class Float<T extends Floats = Floats> extends DataType<T> {\n    constructor(public readonly precision: Precision) {\n        super();\n    }\n    public get typeId() { return Type.Float as T; }\n    public get ArrayType(): TypedArrayConstructor<FType[T]['TArray']> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array;\n            case Precision.SINGLE: return Float32Array;\n            case Precision.DOUBLE: return Float64Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        (<any> proto).precision = null;\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\n/** @ignore */\nexport class Float16 extends Float<Type.Float16> { constructor() { super(Precision.HALF); } }\n/** @ignore */\nexport class Float32 extends Float<Type.Float32> { constructor() { super(Precision.SINGLE); } }\n/** @ignore */\nexport class Float64 extends Float<Type.Float64> { constructor() { super(Precision.DOUBLE); } }\n\nObject.defineProperty(Float16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Float32.prototype, 'ArrayType', { value: Float32Array });\nObject.defineProperty(Float64.prototype, 'ArrayType', { value: Float64Array });\n\n/** @ignore */\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Binary as Type.Binary; }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\n/** @ignore */\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Utf8 as Type.Utf8; }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\n/** @ignore */\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Bool as Type.Bool; }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\n/** @ignore */\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; ArrayType: TypedArrayConstructor<Uint32Array>; }\n/** @ignore */\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(public readonly scale: number,\n                public readonly precision: number) {\n        super();\n    }\n    public get typeId() { return Type.Decimal as Type.Decimal; }\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).scale = null;\n        (<any> proto).precision = null;\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/** @ignore */\nexport type Dates = Type.Date | Type.DateDay | Type.DateMillisecond;\n/** @ignore */\nexport interface Date_<T extends Dates = Dates> extends DataType<T> { TArray: Int32Array; TValue: Date; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nexport class Date_<T extends Dates = Dates> extends DataType<T> {\n    constructor(public readonly unit: DateUnit) {\n        super();\n    }\n    public get typeId() { return Type.Date as T; }\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\n/** @ignore */\nexport class DateDay extends Date_<Type.DateDay> { constructor() { super(DateUnit.DAY); } }\n/** @ignore */\nexport class DateMillisecond extends Date_<Type.DateMillisecond> { constructor() { super(DateUnit.MILLISECOND); } }\n\n/** @ignore */\ntype Times = Type.Time | Type.TimeSecond | Type.TimeMillisecond | Type.TimeMicrosecond | Type.TimeNanosecond;\n/** @ignore */\ntype TimesType = {\n    [Type.Time           ]: { unit: TimeUnit;             TValue: number | Int32Array };\n    [Type.TimeSecond     ]: { unit: TimeUnit.SECOND;      TValue: number;             };\n    [Type.TimeMillisecond]: { unit: TimeUnit.MILLISECOND; TValue: number;             };\n    [Type.TimeMicrosecond]: { unit: TimeUnit.MICROSECOND; TValue: Int32Array;         };\n    [Type.TimeNanosecond ]: { unit: TimeUnit.NANOSECOND;  TValue: Int32Array;         };\n};\n\n/** @ignore */\ninterface Time_<T extends Times = Times> extends DataType<T> { TArray: Int32Array; TValue: TimesType[T]['TValue']; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Time_<T extends Times = Times> extends DataType<T> {\n    constructor(public readonly unit: TimesType[T]['unit'],\n                public readonly bitWidth: TimeBitWidth) {\n        super();\n    }\n    public get typeId() { return Type.Time as T; }\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time_) => {\n        (<any> proto).unit = null;\n        (<any> proto).bitWidth = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time_.prototype);\n}\n\nexport { Time_ as Time };\n\n/** @ignore */\nexport class TimeSecond extends Time_<Type.TimeSecond> { constructor() { super(TimeUnit.SECOND, 32); } }\n/** @ignore */\nexport class TimeMillisecond extends Time_<Type.TimeMillisecond> { constructor() { super(TimeUnit.MILLISECOND, 32); } }\n/** @ignore */\nexport class TimeMicrosecond extends Time_<Type.TimeMicrosecond> { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n/** @ignore */\nexport class TimeNanosecond extends Time_<Type.TimeNanosecond> { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\n/** @ignore */\ntype Timestamps = Type.Timestamp | Type.TimestampSecond | Type.TimestampMillisecond | Type.TimestampMicrosecond | Type.TimestampNanosecond;\n/** @ignore */\ninterface Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> { TArray: Int32Array; TValue: number; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> {\n    constructor(public readonly unit: TimeUnit,\n                public readonly timezone?: string | null) {\n        super();\n    }\n    public get typeId() { return Type.Timestamp as T; }\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp_) => {\n        (<any> proto).unit = null;\n        (<any> proto).timezone = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp_.prototype);\n}\n\nexport { Timestamp_ as Timestamp };\n\n/** @ignore */\nexport class TimestampSecond extends Timestamp_<Type.TimestampSecond> { constructor(timezone?: string | null) { super(TimeUnit.SECOND, timezone); } }\n/** @ignore */\nexport class TimestampMillisecond extends Timestamp_<Type.TimestampMillisecond> { constructor(timezone?: string | null) { super(TimeUnit.MILLISECOND, timezone); } }\n/** @ignore */\nexport class TimestampMicrosecond extends Timestamp_<Type.TimestampMicrosecond> { constructor(timezone?: string | null) { super(TimeUnit.MICROSECOND, timezone); } }\n/** @ignore */\nexport class TimestampNanosecond extends Timestamp_<Type.TimestampNanosecond> { constructor(timezone?: string | null) { super(TimeUnit.NANOSECOND, timezone); } }\n\n/** @ignore */\ntype Intervals = Type.Interval | Type.IntervalDayTime | Type.IntervalYearMonth;\n/** @ignore */\ninterface Interval_<T extends Intervals = Intervals> extends DataType<T> { TArray: Int32Array; TValue: Int32Array; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Interval_<T extends Intervals = Intervals> extends DataType<T> {\n    constructor(public readonly unit: IntervalUnit) {\n        super();\n    }\n    public get typeId() { return Type.Interval as T; }\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval_.prototype);\n}\n\nexport { Interval_ as Interval };\n\n/** @ignore */\nexport class IntervalDayTime extends Interval_<Type.IntervalDayTime> { constructor() { super(IntervalUnit.DAY_TIME); } }\n/** @ignore */\nexport class IntervalYearMonth extends Interval_<Type.IntervalYearMonth> { constructor() { super(IntervalUnit.YEAR_MONTH); } }\n\n/** @ignore */\nexport interface List<T extends DataType = any> extends DataType<Type.List, { [0]: T }>  { TArray: IterableArrayLike<T>; TValue: V<T>; }\n/** @ignore */\nexport class List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\n    constructor(child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public readonly children: Field<T>[];\n    public get typeId() { return Type.List as Type.List; }\n    public toString() { return `List<${this.valueType}>`; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\n/** @ignore */\nexport interface Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct> { TArray: IterableArrayLike<RowLike<T>>; TValue: RowLike<T>; dataTypes: T; }\n/** @ignore */\nexport class Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct, T> {\n    public readonly children: Field<T[keyof T]>[];\n    constructor(children: Field<T[keyof T]>[]) {\n        super();\n        this.children = children;\n    }\n    public get typeId() { return Type.Struct as Type.Struct; }\n    public toString() { return `Struct<{${this.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\n/** @ignore */\ntype Unions = Type.Union | Type.DenseUnion | Type.SparseUnion;\n/** @ignore */\ninterface Union_<T extends Unions = Unions> extends DataType<T> { TArray: Int8Array; TValue: any; ArrayType: TypedArrayConstructor<Int8Array>; }\n/** @ignore */\nclass Union_<T extends Unions = Unions> extends DataType<T> {\n    public readonly mode: UnionMode;\n    public readonly typeIds: Int32Array;\n    public readonly children: Field<any>[];\n    public readonly typeIdToChildIndex: { [key: number]: number };\n    constructor(mode: UnionMode,\n                typeIds: number[] | Int32Array,\n                children: Field<any>[]) {\n        super();\n        this.mode = mode;\n        this.children = children;\n        this.typeIds = typeIds = Int32Array.from(typeIds);\n        this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null) as { [key: number]: number });\n    }\n    public get typeId() { return Type.Union as T; }\n    public toString() { return `${this[Symbol.toStringTag]}<${\n        this.children.map((x) => `${x.type}`).join(` | `)\n    }>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union_) => {\n        (<any> proto).mode = null;\n        (<any> proto).typeIds = null;\n        (<any> proto).children = null;\n        (<any> proto).typeIdToChildIndex = null;\n        (<any> proto).ArrayType = Int8Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union_.prototype);\n}\n\nexport { Union_ as Union };\n\n/** @ignore */\nexport class DenseUnion extends Union_<Type.DenseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport class SparseUnion extends Union_<Type.SparseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(public readonly byteWidth: number) {\n        super();\n    }\n    public get typeId() { return Type.FixedSizeBinary as Type.FixedSizeBinary; }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).byteWidth = null;\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\n/** @ignore */\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: IterableArrayLike<T['TArray']>; TValue: V<T>; }\n/** @ignore */\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\n    public readonly children: Field<T>[];\n    constructor(public readonly listSize: number, child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public get typeId() { return Type.FixedSizeList as Type.FixedSizeList; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        (<any> proto).children = null;\n        (<any> proto).listSize = null;\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\n/** @ignore */\nexport interface Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\n    TArray: IterableArrayLike<Map<TKey['TValue'], TValue['TValue'] | null>>;\n    TChild: Struct<{ key: TKey, value: TValue }>;\n    TValue: MapLike<TKey, TValue>;\n}\n\n/** @ignore */\nexport class Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\n    constructor(child: Field<Struct<{ key: TKey, value: TValue }>>, keysSorted = false) {\n        super();\n        this.children = [child];\n        this.keysSorted = keysSorted;\n    }\n    public readonly keysSorted: boolean;\n    public readonly children: Field<Struct<{ key: TKey, value: TValue }>>[];\n    public get typeId() { return Type.Map as Type.Map; }\n    public get keyType(): TKey { return this.children[0].type.children[0].type as TKey; }\n    public get valueType(): TValue { return this.children[0].type.children[1].type as TValue; }\n    public toString() { return `Map<{${this.children[0].type.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        (<any> proto).children = null;\n        (<any> proto).keysSorted = null;\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\n/** @ignore */\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\n\n/** @ignore */\nexport type TKeys = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32;\n\n/** @ignore */\nexport interface Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> { TArray: TKey['TArray']; TValue: T['TValue']; }\n/** @ignore */\nexport class Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\n    public readonly id: number;\n    public readonly indices: TKey;\n    public readonly dictionary: T;\n    public readonly isOrdered: boolean;\n    constructor(dictionary: T, indices: TKey, id?: Long | number | null, isOrdered?: boolean | null) {\n        super();\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get typeId() { return Type.Dictionary as Type.Dictionary; }\n    public get children() { return this.dictionary.children; }\n    public get valueType(): T { return this.dictionary as T; }\n    public get ArrayType(): T['ArrayType'] { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        (<any> proto).id = null;\n        (<any> proto).indices = null;\n        (<any> proto).isOrdered = null;\n        (<any> proto).dictionary = null;\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\n\n/** @ignore */\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n/** @ignore */\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\n/** @ignore */\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n\n/** @ignore */\nexport function strideForType(type: DataType) {\n    let t: any = type;\n    switch (type.typeId) {\n        case Type.Decimal: return 4;\n        case Type.Timestamp: return 2;\n        case Type.Date: return 1 + (t as Date_).unit;\n        case Type.Interval: return 1 + (t as Interval_).unit;\n        case Type.Int: return 1 + +((t as Int_).bitWidth > 32);\n        case Type.Time: return 1 + +((t as Time_).bitWidth > 32);\n        case Type.FixedSizeList: return (t as FixedSizeList).listSize;\n        case Type.FixedSizeBinary: return (t as FixedSizeBinary).byteWidth;\n        default: return 1;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { truncateBitmap } from './util/bit';\nimport { popcnt_bit_range } from './util/bit';\nimport { BufferType, UnionMode, Type } from './enum';\nimport { DataType, SparseUnion, DenseUnion, strideForType } from './type';\nimport { toArrayBufferView, toUint8Array, toInt32Array } from './util/buffer';\nimport {\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from './type';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Vector.nullCount is called the\n// first time, the null count will be computed. See ARROW-33\n/** @ignore */ export type kUnknownNullCount = -1;\n/** @ignore */ export const kUnknownNullCount = -1;\n\n/** @ignore */ export type NullBuffer = Uint8Array | null | undefined;\n/** @ignore */ export type TypeIdsBuffer = Int8Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type ValueOffsetsBuffer = Int32Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number> | undefined;\n\n/** @ignore */\nexport interface Buffers<T extends DataType> {\n      [BufferType.OFFSET]: Int32Array;\n        [BufferType.DATA]: T['TArray'];\n    [BufferType.VALIDITY]: Uint8Array;\n        [BufferType.TYPE]: T['TArray'];\n}\n\n/** @ignore */\nexport interface Data<T extends DataType = DataType> {\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\n/** @ignore */\nexport class Data<T extends DataType = DataType> {\n\n    public readonly type: T;\n    public readonly length: number;\n    public readonly offset: number;\n    public readonly stride: number;\n    public readonly childData: Data[];\n\n    /**\n     * The dictionary for this Vector, if any. Only used for Dictionary type.\n     */\n    public dictionary?: Vector;\n\n    public readonly values: Buffers<T>[BufferType.DATA];\n    // @ts-ignore\n    public readonly typeIds: Buffers<T>[BufferType.TYPE];\n    // @ts-ignore\n    public readonly nullBitmap: Buffers<T>[BufferType.VALIDITY];\n    // @ts-ignore\n    public readonly valueOffsets: Buffers<T>[BufferType.OFFSET];\n\n    public get typeId(): T['TType'] { return this.type.typeId; }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public get buffers() {\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds] as Buffers<T>;\n    }\n    public get byteLength(): number {\n        let byteLength = 0;\n        let { valueOffsets, values, nullBitmap, typeIds } = this;\n        valueOffsets && (byteLength += valueOffsets.byteLength);\n        values       && (byteLength += values.byteLength);\n        nullBitmap   && (byteLength += nullBitmap.byteLength);\n        typeIds      && (byteLength += typeIds.byteLength);\n        return this.childData.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\n    }\n\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector) {\n        this.type = type;\n        this.dictionary = dictionary;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this.childData = (childData || []).map((x) => x instanceof Data ? x : x.data) as Data[];\n        let buffer: Buffers<T>[keyof Buffers<T>];\n        if (buffers instanceof Data) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        } else {\n            this.stride = strideForType(type);\n            if (buffers) {\n                (buffer = (buffers as Buffers<T>)[0]) && (this.valueOffsets = buffer);\n                (buffer = (buffers as Buffers<T>)[1]) && (this.values = buffer);\n                (buffer = (buffers as Buffers<T>)[2]) && (this.nullBitmap = buffer);\n                (buffer = (buffers as Buffers<T>)[3]) && (this.typeIds = buffer);\n            }\n        }\n    }\n\n    public clone<R extends DataType>(type: R, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers: Buffers<R> = <any> this, childData: (Data | Vector)[] = this.childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData, this.dictionary);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        const { stride, typeId, childData } = this;\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone<T>(this.type, this.offset + offset, length, nullCount, buffers,\n            // Don't slice children if we have value offsets (the variable-width types)\n            (!childData.length || this.valueOffsets) ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\n    }\n\n    public _changeLengthAndBackfillNullBitmap(newLength: number): Data<T> {\n        if (this.typeId === Type.Null) {\n            return this.clone(this.type, 0, newLength, 0);\n        }\n        const { length, nullCount } = this;\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n        if (nullCount > 0) {\n            bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n        }\n        const buffers = this.buffers;\n        buffers[BufferType.VALIDITY] = bitmap;\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n\n    protected _sliceBuffers(offset: number, length: number, stride: number, typeId: T['TType']): Buffers<T> {\n        let arr: any, { buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n        // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n\n    protected _sliceChildren(childData: Data[], offset: number, length: number): Data[] {\n        return childData.map((child) => child.slice(offset, length));\n    }\n\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    public static new<T extends DataType>(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector): Data<T> {\n        if (buffers instanceof Data) { buffers = buffers.buffers; } else if (!buffers) { buffers = [] as Partial<Buffers<T>>; }\n        switch (type.typeId) {\n            case Type.Null:            return <unknown> Data.Null(            <unknown> type as Null,            offset, length) as Data<T>;\n            case Type.Int:             return <unknown> Data.Int(             <unknown> type as Int,             offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Dictionary:      return <unknown> Data.Dictionary(      <unknown> type as Dictionary,      offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || [], dictionary!) as Data<T>;\n            case Type.Float:           return <unknown> Data.Float(           <unknown> type as Float,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Bool:            return <unknown> Data.Bool(            <unknown> type as Bool,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Decimal:         return <unknown> Data.Decimal(         <unknown> type as Decimal,         offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Date:            return <unknown> Data.Date(            <unknown> type as Date_,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Time:            return <unknown> Data.Time(            <unknown> type as Time,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Timestamp:       return <unknown> Data.Timestamp(       <unknown> type as Timestamp,       offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Interval:        return <unknown> Data.Interval(        <unknown> type as Interval,        offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.FixedSizeBinary: return <unknown> Data.FixedSizeBinary( <unknown> type as FixedSizeBinary, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Binary:          return <unknown> Data.Binary(          <unknown> type as Binary,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Utf8:            return <unknown> Data.Utf8(            <unknown> type as Utf8,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.List:            return <unknown> Data.List(            <unknown> type as List,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.FixedSizeList:   return <unknown> Data.FixedSizeList(   <unknown> type as FixedSizeList,   offset, length, nullCount || 0, buffers[BufferType.VALIDITY], (childData || [])[0]) as Data<T>;\n            case Type.Struct:          return <unknown> Data.Struct(          <unknown> type as Struct,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], childData || []) as Data<T>;\n            case Type.Map:             return <unknown> Data.Map(             <unknown> type as Map_,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.Union:           return <unknown> Data.Union(           <unknown> type as Union,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.TYPE] || [], buffers[BufferType.OFFSET] || childData, childData) as Data<T>;\n        }\n        throw new Error(`Unrecognized typeId ${type.typeId}`);\n    }\n\n    /** @nocollapse */\n    public static Null<T extends Null>(type: T, offset: number, length: number) {\n        return new Data(type, offset, length, 0);\n    }\n    /** @nocollapse */\n    public static Int<T extends Int>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Dictionary<T extends Dictionary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>, dictionary: Vector<T['dictionary']>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView<T['TArray']>(type.indices.ArrayType, data), toUint8Array(nullBitmap)], [], dictionary);\n    }\n    /** @nocollapse */\n    public static Float<T extends Float>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Bool<T extends Bool>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Decimal<T extends Decimal>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Date<T extends Date_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Time<T extends Time>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Timestamp<T extends Timestamp>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Interval<T extends Interval>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static FixedSizeBinary<T extends FixedSizeBinary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static List<T extends List>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static FixedSizeList<T extends FixedSizeList>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static Struct<T extends Struct>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, children: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n    }\n    /** @nocollapse */\n    public static Map<T extends Map_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: (Data | Vector)) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    public static Union<T extends SparseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, children: (Data | Vector)[], _?: any): Data<T>;\n    public static Union<T extends DenseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsets: ValueOffsetsBuffer, children: (Data | Vector)[]): Data<T>;\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]): Data<T>;\n    /** @nocollapse */\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]) {\n        const buffers = <unknown> [\n            undefined, undefined,\n            toUint8Array(nullBitmap),\n            toArrayBufferView(type.ArrayType, typeIds)\n        ] as Partial<Buffers<T>>;\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren as (Data | Vector)[]);\n        }\n        buffers[BufferType.OFFSET] = toInt32Array(<ValueOffsetsBuffer> valueOffsetsOrChildren);\n        return new Data(type, offset, length, nullCount, buffers, children);\n    }\n}\n\n(Data.prototype as any).childData = Object.freeze([]);\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */ const undf = void (0);\n\n/** @ignore */\nexport function valueToString(x: any) {\n    if (x === null) { return 'null'; }\n    if (x === undf) { return 'undefined'; }\n    switch (typeof x) {\n        case 'number': return `${x}`;\n        case 'bigint': return `${x}`;\n        case 'string': return `\"${x}\"`;\n    }\n    // If [Symbol.toPrimitive] is implemented (like in BN)\n    // use it instead of JSON.stringify(). This ensures we\n    // print BigInts, Decimals, and Binary in their native\n    // representation\n    if (typeof x[Symbol.toPrimitive] === 'function') {\n        return x[Symbol.toPrimitive]('string');\n    }\n    return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { BigIntAvailable } from '../util/compat';\n\n/**\n * Dynamically compile the null values into an `isValid()` function whose\n * implementation is a switch statement. Microbenchmarks in v8 indicate\n * this approach is 25% faster than using an ES6 Map.\n *\n * @example\n * console.log(createIsValidFunction([null, 'N/A', NaN]));\n * `function (x) {\n *     if (x !== x) return false;\n *     switch (x) {\n *         case null:\n *         case \"N/A\":\n *             return false;\n *     }\n *     return true;\n * }`\n *\n * @ignore\n * @param nullValues\n */\nexport function createIsValidFunction<T extends DataType = any, TNull = any>(nullValues?: ReadonlyArray<TNull>) {\n\n    if (!nullValues || nullValues.length <= 0) {\n        // @ts-ignore\n        return function isValid(value: any) { return true; };\n    }\n\n    let fnBody = '';\n    let noNaNs = nullValues.filter((x) => x === x);\n\n    if (noNaNs.length > 0) {\n        fnBody = `\n    switch (x) {${noNaNs.map((x) => `\n        case ${valueToCase(x)}:`).join('')}\n            return false;\n    }`;\n    }\n\n    // NaN doesn't equal anything including itself, so it doesn't work as a\n    // switch case. Instead we must explicitly check for NaN before the switch.\n    if (nullValues.length !== noNaNs.length) {\n        fnBody = `if (x !== x) return false;\\n${fnBody}`;\n    }\n\n    return new Function(`x`, `${fnBody}\\nreturn true;`) as (value: T['TValue'] | TNull) => boolean;\n}\n\n/** @ignore */\nfunction valueToCase(x: any) {\n    if (typeof x !== 'bigint') {\n        return valueToString(x);\n    } else if (BigIntAvailable) {\n        return `${valueToString(x)}n`;\n    }\n    return `\"${valueToString(x)}\"`;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { memcpy } from '../util/buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from '../util/compat';\nimport {\n    TypedArray, TypedArrayConstructor,\n    BigIntArray, BigIntArrayConstructor\n} from '../interfaces';\n\n/** @ignore */ type DataValue<T> = T extends TypedArray ? number : T extends BigIntArray ? WideValue<T> : T;\n/** @ignore */ type WideValue<T extends BigIntArray> = T extends BigIntArray ? bigint | Int32Array | Uint32Array : never;\n/** @ignore */ type ArrayCtor<T extends TypedArray | BigIntArray> =\n    T extends TypedArray  ? TypedArrayConstructor<T>  :\n    T extends BigIntArray ? BigIntArrayConstructor<T> :\n    any;\n\n/** @ignore */\nconst roundLengthUpToNearest64Bytes = (len: number, BPE: number) => ((((len * BPE) + 63) & ~63) || 64) / BPE;\n/** @ignore */\nconst sliceOrExtendArray = <T extends TypedArray | BigIntArray>(arr: T, len = 0) => (\n    arr.length >= len ? arr.subarray(0, len) : memcpy(new (arr.constructor as any)(len), arr, 0)\n) as T;\n\n/** @ignore */\nexport interface BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n    readonly offset: number;\n}\n\n/** @ignore */\nexport class BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n\n    constructor(buffer: T, stride = 1) {\n        this.buffer = buffer;\n        this.stride = stride;\n        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n        this.ArrayType = buffer.constructor as ArrayCtor<T>;\n        this._resize(this.length = buffer.length / stride | 0);\n    }\n\n    public buffer: T;\n    public length: number;\n    public readonly stride: number;\n    public readonly ArrayType: ArrayCtor<T>;\n    public readonly BYTES_PER_ELEMENT: number;\n\n    public get byteLength() { return this.length * this.stride * this.BYTES_PER_ELEMENT | 0; }\n    public get reservedLength() { return this.buffer.length / this.stride; }\n    public get reservedByteLength() { return this.buffer.byteLength; }\n\n    // @ts-ignore\n    public set(index: number, value: TValue) { return this; }\n    public append(value: TValue) { return this.set(this.length, value); }\n    public reserve(extra: number) {\n        if (extra > 0) {\n            this.length += extra;\n            const stride = this.stride;\n            const length = this.length * stride;\n            const reserved = this.buffer.length;\n            if (length >= reserved) {\n                this._resize(reserved === 0\n                    ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)\n                    : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT)\n                );\n            }\n        }\n        return this;\n    }\n    public flush(length = this.length) {\n        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n        const array = sliceOrExtendArray<T>(this.buffer, length);\n        this.clear();\n        return array;\n    }\n    public clear() {\n        this.length = 0;\n        this._resize(0);\n        return this;\n    }\n    protected _resize(newLength: number) {\n        return this.buffer = <T> memcpy(new this.ArrayType(newLength), this.buffer);\n    }\n}\n\n(BufferBuilder.prototype as any).offset = 0;\n\n/** @ignore */\nexport class DataBufferBuilder<T extends TypedArray> extends BufferBuilder<T, number> {\n    public last() { return this.get(this.length - 1); }\n    public get(index: number) { return this.buffer[index]; }\n    public set(index: number, value: number) {\n        this.reserve(index - this.length + 1);\n        this.buffer[index * this.stride] = value;\n        return this;\n    }\n}\n\n/** @ignore */\nexport class BitmapBufferBuilder extends DataBufferBuilder<Uint8Array> {\n\n    constructor(data = new Uint8Array(0)) { super(data, 1 / 8); }\n\n    public numValid = 0;\n    public get numInvalid() { return this.length - this.numValid; }\n    public get(idx: number) { return this.buffer[idx >> 3] >> idx % 8 & 1; }\n    public set(idx: number, val: number) {\n        const { buffer } = this.reserve(idx - this.length + 1);\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n        val ? cur === 0 && ((buffer[byte] |=  (1 << bit)), ++this.numValid)\n            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);\n        return this;\n    }\n    public clear() {\n        this.numValid = 0;\n        return super.clear();\n    }\n}\n\n/** @ignore */\nexport class OffsetsBufferBuilder extends DataBufferBuilder<Int32Array> {\n    constructor(data = new Int32Array(1)) { super(data, 1); }\n    public append(value: number) {\n        return this.set(this.length - 1, value);\n    }\n    public set(index: number, value: number) {\n        const offset = this.length - 1;\n        const buffer = this.reserve(index - offset + 1).buffer;\n        if (offset < index++) {\n            buffer.fill(buffer[offset], offset, index);\n        }\n        buffer[index] = buffer[index - 1] + value;\n        return this;\n    }\n    public flush(length = this.length - 1) {\n        if (length > this.length) {\n            this.set(length - 1, 0);\n        }\n        return super.flush(length + 1);\n    }\n}\n\n/** @ignore */\nexport class WideBufferBuilder<T extends TypedArray, R extends BigIntArray> extends BufferBuilder<T, DataValue<T>> {\n    // @ts-ignore\n    public buffer64: R;\n    // @ts-ignore\n    protected _ArrayType64: BigIntArrayConstructor<R>;\n    public get ArrayType64() {\n        return this._ArrayType64 || (this._ArrayType64 = <BigIntArrayConstructor<R>> (this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array));\n    }\n    public set(index: number, value: DataValue<T>) {\n        this.reserve(index - this.length + 1);\n        switch (typeof value) {\n            case 'bigint': this.buffer64[index] = value; break;\n            case 'number': this.buffer[index * this.stride] = value; break;\n            default: this.buffer.set(value as TypedArray, index * this.stride);\n        }\n        return this;\n    }\n    protected _resize(newLength: number) {\n        const data = super._resize(newLength);\n        const length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\n        if (BigIntAvailable) {\n            this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { BufferType } from './enum';\nimport { Data, Buffers } from './data';\nimport { createIsValidFunction } from './builder/valid';\nimport { BuilderType as B, VectorType as V} from './interfaces';\nimport { BufferBuilder, BitmapBufferBuilder, DataBufferBuilder, OffsetsBufferBuilder } from './builder/buffer';\nimport {\n    DataType, strideForType,\n    Float, Int, Decimal, FixedSizeBinary,\n    Date_, Time, Timestamp, Interval,\n    Utf8, Binary, List, Map_\n} from './type';\n\n/**\n * A set of options required to create a `Builder` instance for a given `DataType`.\n * @see {@link Builder}\n */\nexport interface BuilderOptions<T extends DataType = any, TNull = any> {\n    type: T;\n    nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n    children?: { [key: string]: BuilderOptions; } | BuilderOptions[];\n}\n\n/**\n * A set of options to create an Iterable or AsyncIterable `Builder` transform function.\n * @see {@link Builder.throughIterable}\n * @see {@link Builder.throughAsyncIterable}\n */\n\nexport interface IterableBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    highWaterMark?: number;\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/**\n * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.\n *\n * A `Builder` is responsible for writing arbitrary JavaScript values\n * to ArrayBuffers and/or child Builders according to the Arrow specification\n * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.\n *\n * The `Builder` for each Arrow `DataType` handles converting and appending\n * values for a given `DataType`. The high-level {@link Builder.new `Builder.new()`} convenience\n * method creates the specific `Builder` subclass for the supplied `DataType`.\n *\n * Once created, `Builder` instances support both appending values to the end\n * of the `Builder`, and random-access writes to specific indices\n * (`Builder.prototype.append(value)` is a convenience method for\n * `builder.set(builder.length, value)`). Appending or setting values beyond the\n * Builder's current length may cause the builder to grow its underlying buffers\n * or child Builders (if applicable) to accommodate the new values.\n *\n * After enough values have been written to a `Builder`, `Builder.prototype.flush()`\n * will commit the values to the underlying ArrayBuffers (or child Builders). The\n * internal Builder state will be reset, and an instance of `Data<T>` is returned.\n * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return\n * an instance of `Vector<T>` instead.\n *\n * When there are no more values to write, use `Builder.prototype.finish()` to\n * finalize the `Builder`. This does not reset the internal state, so it is\n * necessary to call `Builder.prototype.flush()` or `toVector()` one last time\n * if there are still values queued to be flushed.\n *\n * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,\n * because this is when it flushes the values that have been enqueued in its internal\n * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.\n *\n * ```ts\n * import { Builder, Utf8 } from 'apache-arrow';\n *\n * const utf8Builder = Builder.new({\n *     type: new Utf8(),\n *     nullValues: [null, 'n/a']\n * });\n *\n * utf8Builder\n *     .append('hello')\n *     .append('n/a')\n *     .append('world')\n *     .append(null);\n *\n * const utf8Vector = utf8Builder.finish().toVector();\n *\n * console.log(utf8Vector.toJSON());\n * // > [\"hello\", null, \"world\", null]\n * ```\n *\n * @typeparam T The `DataType` of this `Builder`.\n * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n */\nexport abstract class Builder<T extends DataType = any, TNull = any> {\n\n    /**\n     * Create a `Builder` instance based on the `type` property of the supplied `options` object.\n     * @param {BuilderOptions<T, TNull>} options An object with a required `DataType` instance\n     * and other optional parameters to be passed to the `Builder` subclass for the given `type`.\n     *\n     * @typeparam T The `DataType` of the `Builder` to create.\n     * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n     * @nocollapse\n     */\n    // @ts-ignore\n    public static new<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {}\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode<T extends DataType = any, TNull = any>(options: import('./io/node/builder').BuilderDuplexOptions<T, TNull>): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughDOM<T extends DataType = any, TNull = any>(options: import('./io/whatwg/builder').BuilderTransformOptions<T, TNull>): import('./io/whatwg/builder').BuilderTransform<T, TNull> {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    /**\n     * Transform a synchronous `Iterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `Iterable` of values to\n     * transform. When called, this function returns an Iterator of `Vector<T>`.\n     *\n     * The resulting `Iterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `Iterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `Iterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `Iterable` of values to\n     *          write, and returns an `Iterator` that yields Vectors according\n     *          to the chunking semantics defined in the `options` argument.\n     * @nocollapse\n     */\n    public static throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughIterable(options);\n    }\n\n    /**\n     * Transform an `AsyncIterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `AsyncIterable` of values to\n     * transform. When called, this function returns an AsyncIterator of `Vector<T>`.\n     *\n     * The resulting `AsyncIterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `AsyncIterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `AsyncIterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `AsyncIterable` of values\n     *          to write, and returns an `AsyncIterator` that yields Vectors\n     *          according to the chunking semantics defined in the `options`\n     *          argument.\n     * @nocollapse\n     */\n    public static throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughAsyncIterable(options);\n    }\n\n    /**\n     * Construct a builder with the given Arrow DataType with optional null values,\n     * which will be interpreted as \"null\" when set or appended to the `Builder`.\n     * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.\n     */\n    constructor({ 'type': type, 'nullValues': nulls }: BuilderOptions<T, TNull>) {\n        this.type = type;\n        this.children = [];\n        this.nullValues = nulls;\n        this.stride = strideForType(type);\n        this._nulls = new BitmapBufferBuilder();\n        if (nulls && nulls.length > 0) {\n            this._isValid = createIsValidFunction(nulls);\n        }\n    }\n\n    /**\n     * The Builder's `DataType` instance.\n     * @readonly\n     */\n    public type: T;\n    /**\n     * The number of values written to the `Builder` that haven't been flushed yet.\n     * @readonly\n     */\n    public length = 0;\n    /**\n     * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.\n     * @readonly\n     */\n    public finished = false;\n    /**\n     * The number of elements in the underlying values TypedArray that\n     * represent a single logical element, determined by this Builder's\n     * `DataType`. This is 1 for most types, but is larger when the `DataType`\n     * is `Int64`, `Uint64`, `Decimal`, `DateMillisecond`, certain variants of\n     * `Interval`, `Time`, or `Timestamp`, `FixedSizeBinary`, and `FixedSizeList`.\n     * @readonly\n     */\n    public readonly stride: number;\n    public readonly children: Builder[];\n    /**\n     * The list of null-value sentinels for this `Builder`. When one of these values\n     * is written to the `Builder` (either via `Builder.prototype.set()` or `Builder.prototype.append()`),\n     * a 1-bit is written to this Builder's underlying null BitmapBufferBuilder.\n     * @readonly\n     */\n    public readonly nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n\n    /**\n     * Flush the `Builder` and return a `Vector<T>`.\n     * @returns {Vector<T>} A `Vector<T>` of the flushed values.\n     */\n    public toVector() { return Vector.new(this.flush()); }\n\n    public get ArrayType() { return this.type.ArrayType; }\n    public get nullCount() { return this._nulls.numInvalid; }\n    public get numChildren() { return this.children.length; }\n\n    /**\n     * @returns The aggregate length (in bytes) of the values that have been written.\n     */\n    public get byteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        this._typeIds && (size += this._typeIds.byteLength);\n        return this.children.reduce((size, child) => size + child.byteLength, size);\n    }\n\n    /**\n     * @returns The aggregate number of rows that have been reserved to write new values.\n     */\n    public get reservedLength(): number {\n        return this._nulls.reservedLength;\n    }\n\n    /**\n     * @returns The aggregate length (in bytes) that has been reserved to write new values.\n     */\n    public get reservedByteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.reservedByteLength);\n        this._values && (size += this._values.reservedByteLength);\n        this._nulls && (size += this._nulls.reservedByteLength);\n        this._typeIds && (size += this._typeIds.reservedByteLength);\n        return this.children.reduce((size, child) => size + child.reservedByteLength, size);\n    }\n\n    // @ts-ignore\n    protected _offsets: DataBufferBuilder<Int32Array>;\n    public get valueOffsets() { return this._offsets ? this._offsets.buffer : null; }\n\n    // @ts-ignore\n    protected _values: BufferBuilder<T['TArray'], any>;\n    public get values() { return this._values ? this._values.buffer : null; }\n\n    protected _nulls: BitmapBufferBuilder;\n    public get nullBitmap() { return this._nulls ? this._nulls.buffer : null; }\n\n    // @ts-ignore\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n    public get typeIds() { return this._typeIds ? this._typeIds.buffer : null; }\n\n    // @ts-ignore\n    protected _isValid: (value: T['TValue'] | TNull) => boolean;\n    // @ts-ignore\n    protected _setValue: (inst: Builder<T>, index: number, value: T['TValue']) => void;\n\n    /**\n     * Appends a value (or null) to this `Builder`.\n     * This is equivalent to `builder.set(builder.length, value)`.\n     * @param {T['TValue'] | TNull } value The value to append.\n     */\n    public append(value: T['TValue'] | TNull) { return this.set(this.length, value); }\n\n    /**\n     * Validates whether a value is valid (true), or null (false)\n     * @param {T['TValue'] | TNull } value The value to compare against null the value representations\n     */\n    // @ts-ignore\n    public isValid(value: T['TValue'] | TNull): boolean { return this._isValid(value); }\n\n    /**\n     * Write a value (or null-value sentinel) at the supplied index.\n     * If the value matches one of the null-value representations, a 1-bit is\n     * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to\n     * the null `BitmapBufferBuilder`, and the value is passed to\n     * `Builder.prototype.setValue()`.\n     * @param {number} index The index of the value to write.\n     * @param {T['TValue'] | TNull } value The value to write at the supplied index.\n     * @returns {this} The updated `Builder` instance.\n     */\n    public set(index: number, value: T['TValue'] | TNull) {\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value);\n        }\n        return this;\n    }\n\n    /**\n     * Write a value to the underlying buffers at the supplied index, bypassing\n     * the null-value check. This is a low-level method that\n     * @param {number} index\n     * @param {T['TValue'] | TNull } value\n     */\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue']) { this._setValue(this, index, value); }\n    public setValid(index: number, valid: boolean) {\n        this.length = this._nulls.set(index, +valid).length;\n        return valid;\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        throw new Error(`Cannot append children to non-nested type \"${this.type}\"`);\n    }\n\n    /**\n     * Retrieve the child `Builder` at the supplied `index`, or null if no child\n     * exists at that index.\n     * @param {number} index The index of the child `Builder` to retrieve.\n     * @returns {Builder | null} The child Builder at the supplied index or null.\n     */\n    public getChildAt<R extends DataType = any>(index: number): Builder<R> | null {\n        return this.children[index] || null;\n    }\n\n    /**\n     * Commit all the values that have been written to their underlying\n     * ArrayBuffers, including any child Builders if applicable, and reset\n     * the internal `Builder` state.\n     * @returns A `Data<T>` of the buffers and childData representing the values written.\n     */\n    public flush() {\n\n        const buffers: any = [];\n        const values =  this._values;\n        const offsets =  this._offsets;\n        const typeIds =  this._typeIds;\n        const { length, nullCount } = this;\n\n        if (typeIds) { /* Unions */\n            buffers[BufferType.TYPE] = typeIds.flush(length);\n            // DenseUnions\n            offsets && (buffers[BufferType.OFFSET] = offsets.flush(length));\n        } else if (offsets) { /* Variable-width primitives (Binary, Utf8) and Lists */\n            // Binary, Utf8\n            values && (buffers[BufferType.DATA] = values.flush(offsets.last()));\n            buffers[BufferType.OFFSET] = offsets.flush(length);\n        } else if (values) { /* Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, and Interval) */\n            buffers[BufferType.DATA] = values.flush(length);\n        }\n\n        nullCount > 0 && (buffers[BufferType.VALIDITY] = this._nulls.flush(length));\n\n        const data = Data.new<T>(\n            this.type, 0, length, nullCount, buffers as Buffers<T>,\n            this.children.map((child) => child.flush())) as Data<T>;\n\n        this.clear();\n\n        return data;\n    }\n\n    /**\n     * Finalize this `Builder`, and child builders if applicable.\n     * @returns {this} The finalized `Builder` instance.\n     */\n    public finish() {\n        this.finished = true;\n        this.children.forEach((child) => child.finish());\n        return this;\n    }\n\n    /**\n     * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.\n     * @returns {this} The cleared `Builder` instance.\n     */\n    public clear() {\n        this.length = 0;\n        this._offsets && (this._offsets.clear());\n        this._values && (this._values.clear());\n        this._nulls && (this._nulls.clear());\n        this._typeIds && (this._typeIds.clear());\n        this.children.forEach((child) => child.clear());\n        return this;\n    }\n}\n\n(Builder.prototype as any).length = 1;\n(Builder.prototype as any).stride = 1;\n(Builder.prototype as any).children = null;\n(Builder.prototype as any).finished = false;\n(Builder.prototype as any).nullValues = null;\n(Builder.prototype as any)._isValid = () => true;\n\n/** @ignore */\nexport abstract class FixedWidthBuilder<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval = any, TNull = any> extends Builder<T, TNull> {\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._values = new DataBufferBuilder(new this.ArrayType(0), this.stride);\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const values = this._values;\n        values.reserve(index - values.length + 1);\n        return super.setValue(index, value);\n    }\n}\n\n/** @ignore */\nexport abstract class VariableWidthBuilder<T extends Binary | Utf8 | List | Map_, TNull = any> extends Builder<T, TNull> {\n    protected _pendingLength: number = 0;\n    protected _offsets: OffsetsBufferBuilder;\n    protected _pending: Map<number, any> | undefined;\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const pending = this._pending || (this._pending = new Map());\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.length);\n        this._pendingLength += value.length;\n        pending.set(index, value);\n    }\n    public setValid(index: number, isValid: boolean) {\n        if (!super.setValid(index, isValid)) {\n            (this._pending || (this._pending = new Map())).set(index, undefined);\n            return false;\n        }\n        return true;\n    }\n    public clear() {\n        this._pendingLength = 0;\n        this._pending = undefined;\n        return super.clear();\n    }\n    public flush() {\n        this._flush();\n        return super.flush();\n    }\n    public finish() {\n        this._flush();\n        return super.finish();\n    }\n    protected _flush() {\n        const pending = this._pending;\n        const pendingLength = this._pendingLength;\n        this._pendingLength = 0;\n        this._pending = undefined;\n        if (pending && pending.size > 0) {\n            this._flushPending(pending, pendingLength);\n        }\n        return this;\n    }\n    protected abstract _flushPending(pending: Map<number, any>, pendingLength: number): void;\n}\n\n/** @ignore */\ntype ThroughIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull>) => IterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>): ThroughIterable<T, TNull> {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return function*(source: Iterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n\n/** @ignore */\ntype ThroughAsyncIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) => AsyncIterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>): ThroughAsyncIterable<T, TNull> {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return async function* (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for await (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type';\nimport { BitmapBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BoolBuilder<TNull = any> extends Builder<Bool, TNull> {\n    constructor(options: BuilderOptions<Bool, TNull>) {\n        super(options);\n        this._values = new BitmapBufferBuilder();\n    }\n    public setValue(index: number, value: boolean) {\n        this._values.set(index, +value);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { Builder } from '../builder';\n\n/** @ignore */\nexport class NullBuilder<TNull = any> extends Builder<Null, TNull> {\n    // @ts-ignore\n    public setValue(index: number, value: null) {}\n    public setValid(index: number, valid: boolean) {\n        this.length = Math.max(index + 1, this.length);\n        return valid;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Date_, DateDay, DateMillisecond } from '../type';\n\n/** @ignore */\nexport class DateBuilder<T extends Date_ = Date_, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class DateDayBuilder<TNull = any> extends DateBuilder<DateDay, TNull> {}\n/** @ignore */\nexport class DateMillisecondBuilder<TNull = any> extends DateBuilder<DateMillisecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { FixedWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class DecimalBuilder<TNull = any> extends FixedWidthBuilder<Decimal, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { IntBuilder } from './int';\nimport { Dictionary, DataType } from '../type';\nimport { Builder, BuilderOptions } from '../builder';\n\ntype DictionaryHashFunction = (x: any) => string | number;\n\nexport interface DictionaryBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    dictionaryHashFunction?: DictionaryHashFunction;\n}\n\n/** @ignore */\nexport class DictionaryBuilder<T extends Dictionary, TNull = any> extends Builder<T, TNull> {\n\n    protected _dictionaryOffset: number;\n    protected _dictionary?: Vector<T['dictionary']>;\n    protected _keysToIndices: { [key: string]: number };\n    public readonly indices: IntBuilder<T['indices']>;\n    public readonly dictionary: Builder<T['dictionary']>;\n\n    constructor({ 'type': type, 'nullValues': nulls, 'dictionaryHashFunction': hashFn }: DictionaryBuilderOptions<T, TNull>) {\n        super({ type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered) as T });\n        this._nulls = <any> null;\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        this.indices = Builder.new({ 'type': this.type.indices, 'nullValues': nulls }) as IntBuilder<T['indices']>;\n        this.dictionary = Builder.new({ 'type': this.type.dictionary, 'nullValues': null }) as Builder<T['dictionary']>;\n        if (typeof hashFn === 'function') {\n            this.valueToKey = hashFn;\n        }\n    }\n\n    public get values() { return this.indices.values; }\n    public get nullCount() { return this.indices.nullCount; }\n    public get nullBitmap() { return this.indices.nullBitmap; }\n    public get byteLength() { return this.indices.byteLength + this.dictionary.byteLength; }\n    public get reservedLength() { return this.indices.reservedLength + this.dictionary.reservedLength; }\n    public get reservedByteLength() { return this.indices.reservedByteLength + this.dictionary.reservedByteLength; }\n    public isValid(value: T['TValue'] | TNull) { return this.indices.isValid(value); }\n    public setValid(index: number, valid: boolean) {\n        const indices = this.indices;\n        valid = indices.setValid(index, valid);\n        this.length = indices.length;\n        return valid;\n    }\n    public setValue(index: number, value: T['TValue']) {\n        let keysToIndices = this._keysToIndices;\n        let key = this.valueToKey(value);\n        let idx = keysToIndices[key];\n        if (idx === undefined) {\n            keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\n        }\n        return this.indices.setValue(index, idx);\n    }\n    public flush() {\n        const type = this.type;\n        const prev = this._dictionary;\n        const curr = this.dictionary.toVector();\n        const data = this.indices.flush().clone(type);\n        data.dictionary = prev ? prev.concat(curr) : curr;\n        this.finished || (this._dictionaryOffset += curr.length);\n        this._dictionary = data.dictionary as Vector<T['dictionary']>;\n        this.clear();\n        return data;\n    }\n    public finish() {\n        this.indices.finish();\n        this.dictionary.finish();\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        return super.finish();\n    }\n    public clear() {\n        this.indices.clear();\n        this.dictionary.clear();\n        return super.clear();\n    }\n    public valueToKey(val: any): string | number {\n        return typeof val === 'string' ? val : `${val}`;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedSizeBinary } from '../type';\nimport { FixedWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class FixedSizeBinaryBuilder<TNull = any> extends FixedWidthBuilder<FixedSizeBinary, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst f64 = new Float64Array(1);\nconst u32 = new Uint32Array(f64.buffer);\n\n/**\n * Convert uint16 (logically a float16) to a JS float64. Inspired by numpy's `npy_half_to_double`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L29\n * @param h {number} the uint16 to convert\n * @private\n * @ignore\n */\nexport function uint16ToFloat64(h: number) {\n    let expo = (h & 0x7C00) >> 10;\n    let sigf = (h & 0x03FF) / 1024;\n    let sign = (-1) ** ((h & 0x8000) >> 15);\n    switch (expo) {\n        case 0x1F: return sign * (sigf ? NaN : 1 / 0);\n        case 0x00: return sign * (sigf ? 6.103515625e-5 * sigf : 0);\n    }\n    return sign * (2 ** (expo - 15)) * (1 + sigf);\n}\n\n/**\n * Convert a float64 to uint16 (assuming the float64 is logically a float16). Inspired by numpy's `npy_double_to_half`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L43\n * @param d {number} The float64 to convert\n * @private\n * @ignore\n */\nexport function float64ToUint16(d: number) {\n\n    if (d !== d) { return 0x7E00; } // NaN\n\n    f64[0] = d;\n\n    // Magic numbers:\n    // 0x80000000 = 10000000 00000000 00000000 00000000 -- masks the 32nd bit\n    // 0x7ff00000 = 01111111 11110000 00000000 00000000 -- masks the 21st-31st bits\n    // 0x000fffff = 00000000 00001111 11111111 11111111 -- masks the 1st-20th bit\n\n    let sign = (u32[1] & 0x80000000) >> 16 & 0xFFFF;\n    let expo = (u32[1] & 0x7ff00000), sigf = 0x0000;\n\n    if (expo >= 0x40f00000) {\n        //\n        // If exponent overflowed, the float16 is either NaN or Infinity.\n        // Rules to propagate the sign bit: mantissa > 0 ? NaN : +/-Infinity\n        //\n        // Magic numbers:\n        // 0x40F00000 = 01000000 11110000 00000000 00000000 -- 6-bit exponent overflow\n        // 0x7C000000 = 01111100 00000000 00000000 00000000 -- masks the 27th-31st bits\n        //\n        // returns:\n        // qNaN, aka 32256 decimal, 0x7E00 hex, or 01111110 00000000 binary\n        // sNaN, aka 32000 decimal, 0x7D00 hex, or 01111101 00000000 binary\n        // +inf, aka 31744 decimal, 0x7C00 hex, or 01111100 00000000 binary\n        // -inf, aka 64512 decimal, 0xFC00 hex, or 11111100 00000000 binary\n        //\n        // If mantissa is greater than 23 bits, set to +Infinity like numpy\n        if (u32[0] > 0) {\n            expo = 0x7C00;\n        } else {\n            expo = (expo & 0x7C000000) >> 16;\n            sigf = (u32[1] & 0x000fffff) >> 10;\n        }\n    } else if (expo <= 0x3f000000) {\n        //\n        // If exponent underflowed, the float is either signed zero or subnormal.\n        //\n        // Magic numbers:\n        // 0x3F000000 = 00111111 00000000 00000000 00000000 -- 6-bit exponent underflow\n        //\n        sigf = 0x100000 + (u32[1] & 0x000fffff);\n        sigf = 0x100000 + (sigf << ((expo >> 20) - 998)) >> 21;\n        expo = 0;\n    } else {\n        //\n        // No overflow or underflow, rebase the exponent and round the mantissa\n        // Magic numbers:\n        // 0x200 = 00000010 00000000 -- masks off the 10th bit\n        //\n\n        // Ensure the first mantissa bit (the 10th one) is 1 and round\n        expo = (expo - 0x3f000000) >> 10;\n        sigf = ((u32[1] & 0x000fffff) + 0x200) >> 10;\n    }\n\n    return sign | expo | sigf & 0xFFFF;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { float64ToUint16 } from '../util/math';\nimport { FixedWidthBuilder } from '../builder';\nimport { Float, Float16, Float32, Float64 } from '../type';\n\n/** @ignore */\nexport class FloatBuilder<T extends Float = Float, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n\n/** @ignore */\nexport class Float16Builder<TNull = any> extends FloatBuilder<Float16, TNull> {\n    public setValue(index: number, value: number) {\n        // convert JS float64 to a uint16\n        this._values.set(index, float64ToUint16(value));\n    }\n}\n\n/** @ignore */\nexport class Float32Builder<TNull = any> extends FloatBuilder<Float32, TNull> {\n    public setValue(index: number, value: number) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Float64Builder<TNull = any> extends FloatBuilder<Float64, TNull> {\n    public setValue(index: number, value: number) {\n        this._values.set(index, value);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ArrayBufferViewInput, toArrayBufferView } from './buffer';\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nexport const isArrowBigNumSymbol = Symbol.for('isArrowBigNum');\n\n/** @ignore */ type BigNumArray = IntArray | UintArray;\n/** @ignore */ type IntArray = Int8Array | Int16Array | Int32Array;\n/** @ignore */ type UintArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray;\n\n/** @ignore */\nfunction BigNum(this: any, x: any, ...xs: any) {\n    if (xs.length === 0) {\n        return Object.setPrototypeOf(toArrayBufferView(this['TypedArray'], x), this.constructor.prototype);\n    }\n    return Object.setPrototypeOf(new this['TypedArray'](x, ...xs), this.constructor.prototype);\n}\n\nBigNum.prototype[isArrowBigNumSymbol] = true;\nBigNum.prototype.toJSON = function<T extends BN<BigNumArray>>(this: T) { return `\"${bignumToString(this)}\"`; };\nBigNum.prototype.valueOf = function<T extends BN<BigNumArray>>(this: T) { return bignumToNumber(this); };\nBigNum.prototype.toString = function<T extends BN<BigNumArray>>(this: T) { return bignumToString(this); };\nBigNum.prototype[Symbol.toPrimitive] = function<T extends BN<BigNumArray>>(this: T, hint: 'string' | 'number' | 'default' = 'default') {\n    switch (hint) {\n        case 'number': return bignumToNumber(this);\n        case 'string': return bignumToString(this);\n        case 'default': return bignumToBigInt(this);\n    }\n    return bignumToString(this);\n};\n\n/** @ignore */\ntype TypedArrayConstructorArgs =\n    [number | void] |\n    [Iterable<number> | Iterable<bigint>] |\n    [ArrayBufferLike, number | void, number | void] ;\n\n/** @ignore */\nfunction SignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction UnsignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction DecimalBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n\nObject.setPrototypeOf(SignedBigNum.prototype,   Object.create(Int32Array.prototype));\nObject.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.setPrototypeOf(DecimalBigNum.prototype,  Object.create(Uint32Array.prototype));\nObject.assign(SignedBigNum.prototype,   BigNum.prototype, { 'constructor': SignedBigNum,   'signed': true,  'TypedArray': Int32Array,  'BigIntArray': BigInt64Array  });\nObject.assign(UnsignedBigNum.prototype, BigNum.prototype, { 'constructor': UnsignedBigNum, 'signed': false, 'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\nObject.assign(DecimalBigNum.prototype,  BigNum.prototype, { 'constructor': DecimalBigNum,  'signed': true,  'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\n\n/** @ignore */\nfunction bignumToNumber<T extends BN<BigNumArray>>(bn: T) {\n    let { buffer, byteOffset, length, 'signed': signed } = bn;\n    let words = new Int32Array(buffer, byteOffset, length);\n    let number = 0, i = 0, n = words.length, hi, lo;\n    while (i < n) {\n        lo = words[i++];\n        hi = words[i++];\n        signed || (hi = hi >>> 0);\n        number += (lo >>> 0) + (hi * (i ** 32));\n    }\n    return number;\n}\n\n/** @ignore */\nexport let bignumToString: { <T extends BN<BigNumArray>>(a: T): string; };\n/** @ignore */\nexport let bignumToBigInt: { <T extends BN<BigNumArray>>(a: T): bigint; };\n\nif (!BigIntAvailable) {\n    bignumToString = decimalToString;\n    bignumToBigInt = <any> bignumToString;\n} else {\n    bignumToBigInt = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0] : <any>decimalToString(a));\n    bignumToString = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? `${new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0]}` : decimalToString(a));\n}\n\n/** @ignore */\nfunction decimalToString<T extends BN<BigNumArray>>(a: T) {\n    let digits = '';\n    let base64 = new Uint32Array(2);\n    let base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);\n    let checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\n    let i = -1, n = base32.length - 1;\n    do {\n        for (base64[0] = base32[i = 0]; i < n;) {\n            base32[i++] = base64[1] = base64[0] / 10;\n            base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];\n        }\n        base32[i] = base64[1] = base64[0] / 10;\n        base64[0] = base64[0] - base64[1] * 10;\n        digits = `${base64[0]}${digits}`;\n    } while (checks[0] || checks[1] || checks[2] || checks[3]);\n    return digits ? digits : `0`;\n}\n\n/** @ignore */\nexport class BN<T extends BigNumArray> {\n    /** @nocollapse */\n    public static new<T extends BigNumArray>(num: T, isSigned?: boolean): (T & BN<T>) {\n        switch (isSigned) {\n            case true: return new (<any> SignedBigNum)(num) as (T & BN<T>);\n            case false: return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n        }\n        switch (num.constructor) {\n            case Int8Array:\n            case Int16Array:\n            case Int32Array:\n            case BigInt64Array:\n                return new (<any> SignedBigNum)(num) as (T & BN<T>);\n        }\n        if (num.byteLength === 16) {\n            return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n        }\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static signed<T extends IntArray>(num: T): (T & BN<T>) {\n        return new (<any> SignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static unsigned<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static decimal<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n    }\n    constructor(num: T, isSigned?: boolean) {\n        return BN.new(num, isSigned) as any;\n    }\n}\n\n/** @ignore */\nexport interface BN<T extends BigNumArray> extends TypedArrayLike<T> {\n\n    new<T extends ArrayBufferViewInput>(buffer: T, signed?: boolean): T;\n\n    readonly signed: boolean;\n    readonly TypedArray: TypedArrayConstructor<TypedArray>;\n    readonly BigIntArray: BigIntArrayConstructor<BigIntArray>;\n\n    [Symbol.toStringTag]:\n        'Int8Array'         |\n        'Int16Array'        |\n        'Int32Array'        |\n        'Uint8Array'        |\n        'Uint16Array'       |\n        'Uint32Array'       |\n        'Uint8ClampedArray';\n\n    /**\n     * Convert the bytes to their (positive) decimal representation for printing\n     */\n    toString(): string;\n    /**\n     * Down-convert the bytes to a 53-bit precision integer. Invoked by JS for\n     * arithmetic operators, like `+`. Easy (and unsafe) way to convert BN to\n     * number via `+bn_inst`\n     */\n    valueOf(): number;\n    /**\n     * Return the JSON representation of the bytes. Must be wrapped in double-quotes,\n     * so it's compatible with JSON.stringify().\n     */\n    toJSON(): string;\n    [Symbol.toPrimitive](hint?: any): number | string | bigint;\n}\n\n/** @ignore */\ninterface TypedArrayLike<T extends BigNumArray> {\n\n    readonly length: number;\n    readonly buffer: ArrayBuffer;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly BYTES_PER_ELEMENT: number;\n\n    includes(searchElement: number, fromIndex?: number | undefined): boolean;\n    copyWithin(target: number, start: number, end?: number | undefined): this;\n    every(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number | undefined, end?: number | undefined): this;\n    filter(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): T;\n    find(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: T) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number | undefined): number;\n    join(separator?: string | undefined): string;\n    lastIndexOf(searchElement: number, fromIndex?: number | undefined): number;\n    map(callbackfn: (value: number, index: number, array: T) => number, thisArg?: any): T;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reverse(): T;\n    set(array: ArrayLike<number>, offset?: number | undefined): void;\n    slice(start?: number | undefined, end?: number | undefined): T;\n    some(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: ((a: number, b: number) => number) | undefined): this;\n    subarray(begin: number, end?: number | undefined): T;\n    toLocaleString(): string;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { bignumToBigInt } from '../util/bn';\nimport { WideBufferBuilder } from './buffer';\nimport { BigInt64Array } from '../util/compat';\nimport { FixedWidthBuilder, BuilderOptions } from '../builder';\nimport { Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64 } from '../type';\n\n/** @ignore */\nexport class IntBuilder<T extends Int = Int, TNull = any> extends FixedWidthBuilder<T, TNull> {\n    public setValue(index: number, value: T['TValue']) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Int8Builder<TNull = any> extends IntBuilder<Int8, TNull> {}\n/** @ignore */\nexport class Int16Builder<TNull = any> extends IntBuilder<Int16, TNull> {}\n/** @ignore */\nexport class Int32Builder<TNull = any> extends IntBuilder<Int32, TNull> {}\n/** @ignore */\nexport class Int64Builder<TNull = any> extends IntBuilder<Int64, TNull> {\n    protected _values: WideBufferBuilder<Int32Array, BigInt64Array>;\n    constructor(options: BuilderOptions<Int64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Int32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Int32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\n/** @ignore */\nexport class Uint8Builder<TNull = any> extends IntBuilder<Uint8, TNull> {}\n/** @ignore */\nexport class Uint16Builder<TNull = any> extends IntBuilder<Uint16, TNull> {}\n/** @ignore */\nexport class Uint32Builder<TNull = any> extends IntBuilder<Uint32, TNull> {}\n/** @ignore */\nexport class Uint64Builder<TNull = any> extends IntBuilder<Uint64, TNull> {\n    protected _values: WideBufferBuilder<Uint32Array, BigUint64Array>;\n    constructor(options: BuilderOptions<Uint64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Uint32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Uint32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\nconst toBigInt = ((memo: any) => (value: any) => {\n    if (ArrayBuffer.isView(value)) {\n        memo.buffer = value.buffer;\n        memo.byteOffset = value.byteOffset;\n        memo.byteLength = value.byteLength;\n        value = bignumToBigInt(memo);\n        memo.buffer = null;\n    }\n    return value;\n})({ 'BigIntArray': BigInt64Array });\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\n/** @ignore */\nexport class TimeBuilder<T extends Time = Time, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class TimeSecondBuilder<TNull = any> extends TimeBuilder<TimeSecond, TNull> {}\n/** @ignore */\nexport class TimeMillisecondBuilder<TNull = any> extends TimeBuilder<TimeMillisecond, TNull> {}\n/** @ignore */\nexport class TimeMicrosecondBuilder<TNull = any> extends TimeBuilder<TimeMicrosecond, TNull> {}\n/** @ignore */\nexport class TimeNanosecondBuilder<TNull = any> extends TimeBuilder<TimeNanosecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\n/** @ignore */\nexport class TimestampBuilder<T extends Timestamp = Timestamp, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class TimestampSecondBuilder<TNull = any> extends TimestampBuilder<TimestampSecond, TNull> {}\n/** @ignore */\nexport class TimestampMillisecondBuilder<TNull = any> extends TimestampBuilder<TimestampMillisecond, TNull> {}\n/** @ignore */\nexport class TimestampMicrosecondBuilder<TNull = any> extends TimestampBuilder<TimestampMicrosecond, TNull> {}\n/** @ignore */\nexport class TimestampNanosecondBuilder<TNull = any> extends TimestampBuilder<TimestampNanosecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\n/** @ignore */\nexport class IntervalBuilder<T extends Interval = Interval, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class IntervalDayTimeBuilder<TNull = any> extends IntervalBuilder<IntervalDayTime, TNull> {}\n/** @ignore */\nexport class IntervalYearMonthBuilder<TNull = any> extends IntervalBuilder<IntervalYearMonth, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Binary } from '../type';\nimport { toUint8Array } from '../util/buffer';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BinaryBuilder<TNull = any> extends VariableWidthBuilder<Binary, TNull> {\n    constructor(opts: BuilderOptions<Binary, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: Uint8Array) {\n        return super.setValue(index, toUint8Array(value));\n    }\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number) {\n        const offsets = this._offsets;\n        const data = this._values.reserve(pendingLength).buffer;\n        let index = 0, length = 0, offset = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                length = value.length;\n                data.set(value, offset);\n                offsets.set(index, length);\n                offset += length;\n            }\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Utf8 } from '../type';\nimport { encodeUtf8 } from '../util/utf8';\nimport { BinaryBuilder } from './binary';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class Utf8Builder<TNull = any> extends VariableWidthBuilder<Utf8, TNull> {\n    constructor(opts: BuilderOptions<Utf8, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: string) {\n        return super.setValue(index, encodeUtf8(value) as any);\n    }\n    // @ts-ignore\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number): void {}\n}\n\n(Utf8Builder.prototype as any)._flushPending = (BinaryBuilder.prototype as any)._flushPending;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\n\n/** @ignore */\nexport class Run<T extends DataType = any, TNull = any> {\n    // @ts-ignore\n    protected _values: ArrayLike<T['TValue'] | TNull>;\n    public get length() { return this._values.length; }\n    public get(index: number) { return this._values[index]; }\n    public clear() { this._values = <any> null; return this; }\n    public bind(values: Vector<T> | ArrayLike<T['TValue'] | TNull>) {\n        if (values instanceof Vector) {\n            return values;\n        }\n        this._values = values;\n        return this as any;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { StructVector } from './struct';\nimport { valueToString } from '../util/pretty';\nimport { DataType, Struct, RowLike } from '../type';\n\n/** @ignore */ const kParent = Symbol.for('parent');\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */ const kKeyToIdx = Symbol.for('keyToIdx');\n/** @ignore */ const kIdxToVal = Symbol.for('idxToVal');\n/** @ignore */ const kCustomInspect = Symbol.for('nodejs.util.inspect.custom');\n\nabstract class Row<K extends PropertyKey = any, V = any> implements Map<K, V> {\n\n    public readonly size: number;\n    public readonly [Symbol.toStringTag]: string;\n\n    protected [kRowIndex]: number;\n    protected [kParent]: Vector<Struct>;\n    protected [kKeyToIdx]: Map<K, number>;\n    protected [kIdxToVal]: V[];\n\n    constructor(parent: Vector<Struct>, numKeys: number) {\n        this[kParent] = parent;\n        this.size = numKeys;\n    }\n\n    public abstract keys(): IterableIterator<K>;\n    public abstract values(): IterableIterator<V>;\n    public abstract getKey(idx: number): K;\n    public abstract getIndex(key: K): number;\n    public abstract getValue(idx: number): V;\n    public abstract setValue(idx: number, val: V): void;\n\n    public entries() { return this[Symbol.iterator](); }\n\n    public has(key: K) { return this.get(key) !== undefined; }\n\n    public get(key: K) {\n        let val = undefined;\n        if (key !== null && key !== undefined) {\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n            let idx = ktoi.get(key);\n            if (idx !== undefined) {\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n            } else if ((idx = this.getIndex(key)) > -1) {\n                ktoi.set(key, idx);\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n            }\n        }\n        return val;\n    }\n\n    public set(key: K, val: V) {\n        if (key !== null && key !== undefined) {\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n            let idx = ktoi.get(key);\n            if (idx === undefined) {\n                ktoi.set(key, idx = this.getIndex(key));\n            }\n            if (idx > -1) {\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                itov[idx] = <any> this.setValue(idx, val);\n            }\n        }\n        return this;\n    }\n\n    public clear(): void { throw new Error(`Clearing ${this[Symbol.toStringTag]} not supported.`); }\n\n    public delete(_: K): boolean { throw new Error(`Deleting ${this[Symbol.toStringTag]} values not supported.`); }\n\n    public *[Symbol.iterator](): IterableIterator<[K, V]> {\n\n        const ki = this.keys();\n        const vi = this.values();\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n\n        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\n            !((kr = ki.next()).done || (vr = vi.next()).done);\n            ++i\n        ) {\n            k = kr.value;\n            v = vr.value;\n            itov[i] = v;\n            ktoi.has(k) || ktoi.set(k, i);\n            yield [k, v];\n        }\n    }\n\n    public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n\n        const ki = this.keys();\n        const vi = this.values();\n        const callback = thisArg === undefined ? callbackfn :\n            (v: V, k: K, m: Map<K, V>) => callbackfn.call(thisArg, v, k, m);\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n\n        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\n            !((kr = ki.next()).done || (vr = vi.next()).done);\n            ++i\n        ) {\n            k = kr.value;\n            v = vr.value;\n            itov[i] = v;\n            ktoi.has(k) || ktoi.set(k, i);\n            callback(v, k, this);\n        }\n    }\n\n    public toArray() { return [...this.values()]; }\n    public toJSON() {\n        const obj = {} as any;\n        this.forEach((val, key) => obj[key] = val);\n        return obj;\n    }\n\n    public inspect() { return this.toString(); }\n    public [kCustomInspect]() { return this.toString(); }\n    public toString() {\n        const str: string[] = [];\n        this.forEach((val, key) => {\n            key = valueToString(key);\n            val = valueToString(val);\n            str.push(`${key}: ${val}`);\n        });\n        return `{ ${str.join(', ')} }`;\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: Row) => {\n        Object.defineProperties(proto, {\n            'size': { writable: true, enumerable: false, configurable: false, value: 0 },\n            [kParent]: { writable: true, enumerable: false, configurable: false, value: null },\n            [kRowIndex]: { writable: true, enumerable: false, configurable: false, value: -1 },\n        });\n        return (proto as any)[Symbol.toStringTag] = 'Row';\n    })(Row.prototype);\n}\n\nexport class MapRow<K extends DataType = any, V extends DataType = any> extends Row<K['TValue'], V['TValue'] | null> {\n    constructor(slice: Vector<Struct<{ key: K, value: V }>>) {\n        super(slice, slice.length);\n        return createRowProxy(this);\n    }\n    public keys() {\n        return this[kParent].getChildAt(0)![Symbol.iterator]();\n    }\n    public values() {\n        return this[kParent].getChildAt(1)![Symbol.iterator]();\n    }\n    public getKey(idx: number): K['TValue'] {\n        return this[kParent].getChildAt(0)!.get(idx);\n    }\n    public getIndex(key: K['TValue']): number {\n        return this[kParent].getChildAt(0)!.indexOf(key);\n    }\n    public getValue(index: number): V['TValue'] | null {\n        return this[kParent].getChildAt(1)!.get(index);\n    }\n    public setValue(index: number, value: V['TValue'] | null): void {\n        this[kParent].getChildAt(1)!.set(index, value);\n    }\n}\n\nexport class StructRow<T extends { [key: string]: DataType } = any> extends Row<keyof T, T[keyof T]['TValue'] | null> {\n    constructor(parent: StructVector<T>) {\n        super(parent, parent.type.children.length);\n        return defineRowProxyProperties(this);\n    }\n    public *keys() {\n        for (const field of this[kParent].type.children) {\n            yield field.name as keyof T;\n        }\n    }\n    public *values() {\n        for (const field of this[kParent].type.children) {\n            yield (this as RowLike<T>)[field.name];\n        }\n    }\n    public getKey(idx: number): keyof T {\n        return this[kParent].type.children[idx].name as keyof T;\n    }\n    public getIndex(key: keyof T): number {\n        return this[kParent].type.children.findIndex((f) => f.name === key);\n    }\n    public getValue(index: number): T[keyof T]['TValue'] | null {\n        return this[kParent].getChildAt(index)!.get(this[kRowIndex]);\n    }\n    public setValue(index: number, value: T[keyof T]['TValue'] | null): void {\n        return this[kParent].getChildAt(index)!.set(this[kRowIndex], value);\n    }\n}\n\nObject.setPrototypeOf(Row.prototype, Map.prototype);\n\n/** @ignore */\nconst defineRowProxyProperties = (() => {\n    const desc = { enumerable: true, configurable: false, get: null as any, set: null as any };\n    return <T extends Row>(row: T) => {\n        let idx = -1, ktoi = row[kKeyToIdx] || (row[kKeyToIdx] = new Map());\n        const getter = (key: any) => function(this: T) { return this.get(key); };\n        const setter = (key: any) => function(this: T, val: any) { return this.set(key, val); };\n        for (const key of row.keys()) {\n            ktoi.set(key, ++idx);\n            desc.get = getter(key);\n            desc.set = setter(key);\n            row.hasOwnProperty(key) || (desc.enumerable = true, Object.defineProperty(row, key, desc));\n            row.hasOwnProperty(idx) || (desc.enumerable = false, Object.defineProperty(row, idx, desc));\n        }\n        desc.get = desc.set = null;\n        return row;\n    };\n})();\n\n/** @ignore */\nconst createRowProxy = (() => {\n    if (typeof Proxy === 'undefined') {\n        return defineRowProxyProperties;\n    }\n    const has = Row.prototype.has;\n    const get = Row.prototype.get;\n    const set = Row.prototype.set;\n    const getKey = Row.prototype.getKey;\n    const RowProxyHandler: ProxyHandler<Row> = {\n        isExtensible() { return false; },\n        deleteProperty() { return false; },\n        preventExtensions() { return true; },\n        ownKeys(row: Row) { return [...row.keys()].map((x) => `${x}`); },\n        has(row: Row, key: PropertyKey) {\n            switch (key) {\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag: case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx: case kCustomInspect:\n                    return true;\n            }\n            if (typeof key === 'number' && !row.has(key)) {\n                key = row.getKey(key);\n            }\n            return row.has(key);\n        },\n        get(row: Row, key: PropertyKey, receiver: any) {\n            switch (key) {\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag: case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx: case kCustomInspect:\n                    return Reflect.get(row, key, receiver);\n            }\n            if (typeof key === 'number' && !has.call(receiver, key)) {\n                key = getKey.call(receiver, key);\n            }\n            return get.call(receiver, key);\n        },\n        set(row: Row, key: PropertyKey, val: any, receiver: any) {\n            switch (key) {\n                case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx:\n                    return Reflect.set(row, key, val, receiver);\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag:\n                    return false;\n            }\n            if (typeof key === 'number' && !has.call(receiver, key)) {\n                key = getKey.call(receiver, key);\n            }\n            return has.call(receiver, key) ? !!set.call(receiver, key, val) : false;\n        },\n    };\n    return <T extends Row>(row: T) => new Proxy(row, RowProxyHandler) as T;\n})();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { MapRow, StructRow } from '../vector/row';\nimport { compareArrayLike } from '../util/buffer';\nimport { BigInt, BigIntAvailable } from './compat';\n\n/** @ignore */\ntype RangeLike = { length: number; stride?: number };\n/** @ignore */\ntype ClampThen<T extends RangeLike> = (source: T, index: number) => any;\n/** @ignore */\ntype ClampRangeThen<T extends RangeLike> = (source: T, offset: number, length: number) => any;\n\nexport function clampIndex<T extends RangeLike>(source: T, index: number): number;\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then?: N) {\n    const length = source.length;\n    const adjust = index > -1 ? index : (length + (index % length));\n    return then ? then(source, adjust) : adjust;\n}\n\n/** @ignore */\nlet tmp: number;\nexport function clampRange<T extends RangeLike>(source: T, begin: number | undefined, end: number | undefined): [number, number];\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then?: N) {\n\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    let { length: len = 0 } = source;\n    let lhs = typeof begin !== 'number' ? 0 : begin;\n    let rhs = typeof end !== 'number' ? len : end;\n    // wrap around on negative start/end positions\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\n    // ensure lhs <= rhs\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\n     // ensure rhs <= length\n    (rhs > len) && (rhs = len);\n\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\n}\n\nconst big0 = BigIntAvailable ? BigInt(0) : 0;\nconst isNaNFast = (value: any) => value !== value;\n\n/** @ignore */\nexport function createElementComparator(search: any) {\n    let typeofSearch = typeof search;\n    // Compare primitives\n    if (typeofSearch !== 'object' || search === null) {\n        // Compare NaN\n        if (isNaNFast(search)) {\n            return isNaNFast;\n        }\n        return typeofSearch !== 'bigint'\n            ? (value: any) => value === search\n            : (value: any) => (big0 + value) === search;\n    }\n    // Compare Dates\n    if (search instanceof Date) {\n        const valueOfSearch = search.valueOf();\n        return (value: any) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;\n    }\n    // Compare TypedArrays\n    if (ArrayBuffer.isView(search)) {\n        return (value: any) => value ? compareArrayLike(search, value) : false;\n    }\n    // Compare Maps and Rows\n    if (search instanceof Map) { return creatMapComparator(search); }\n    // Compare Array-likes\n    if (Array.isArray(search)) { return createArrayLikeComparator(search); }\n    // Compare Vectors\n    if (search instanceof Vector) { return createVectorComparator(search); }\n    // Compare non-empty Objects\n    return createObjectComparator(search);\n}\n\n/** @ignore */\nfunction createArrayLikeComparator(lhs: ArrayLike<any>) {\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs[i]);\n    }\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction creatMapComparator(lhs: Map<any, any>) {\n    let i = -1;\n    const comparators = [] as ((x: any) => boolean)[];\n    lhs.forEach((v) => comparators[++i] = createElementComparator(v));\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction createVectorComparator(lhs: Vector<any>) {\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs.get(i));\n    }\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction createObjectComparator(lhs: any) {\n    const keys = Object.keys(lhs);\n    // Only compare non-empty Objects\n    if (keys.length === 0) { return () => false; }\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = keys.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs[keys[i]]);\n    }\n    return createSubElementsComparator(comparators, keys);\n}\n\nfunction createSubElementsComparator(comparators: ((x: any) => boolean)[], keys?: Iterable<string>) {\n    return (rhs: any) => {\n        if (!rhs || typeof rhs !== 'object') {\n            return false;\n        }\n        switch (rhs.constructor) {\n            case Array: return compareArray(comparators, rhs);\n            case Map:\n            case MapRow:\n            case StructRow:\n                return compareObject(comparators, rhs, rhs.keys());\n            case Object:\n            case undefined: // support `Object.create(null)` objects\n                return compareObject(comparators, rhs, keys || Object.keys(rhs));\n        }\n        return rhs instanceof Vector ? compareVector(comparators, rhs) : false;\n    };\n}\n\nfunction compareArray(comparators: ((x: any) => boolean)[], arr: any[]) {\n    const n = comparators.length;\n    if (arr.length !== n) { return false; }\n    for (let i = -1; ++i < n;) {\n        if (!(comparators[i](arr[i]))) { return false; }\n    }\n    return true;\n}\n\nfunction compareVector(comparators: ((x: any) => boolean)[], vec: Vector) {\n    const n = comparators.length;\n    if (vec.length !== n) { return false; }\n    for (let i = -1; ++i < n;) {\n        if (!(comparators[i](vec.get(i)))) { return false; }\n    }\n    return true;\n}\n\nfunction compareObject(comparators: ((x: any) => boolean)[], obj: Map<any, any>, keys: Iterable<string>) {\n\n    const lKeyItr = keys[Symbol.iterator]();\n    const rKeyItr = obj instanceof Map ? obj.keys() : Object.keys(obj)[Symbol.iterator]();\n    const rValItr = obj instanceof Map ? obj.values() : Object.values(obj)[Symbol.iterator]();\n\n    let i = 0;\n    let n = comparators.length;\n    let rVal = rValItr.next();\n    let lKey = lKeyItr.next();\n    let rKey = rKeyItr.next();\n\n    for (; i < n && !lKey.done && !rKey.done && !rVal.done;\n         ++i, lKey = lKeyItr.next(), rKey = rKeyItr.next(), rVal = rValItr.next()) {\n        if (lKey.value !== rKey.value || !comparators[i](rVal.value)) {\n            break;\n        }\n    }\n    if (i === n && lKey.done && rKey.done && rVal.done) {\n        return true;\n    }\n    lKeyItr.return && lKeyItr.return();\n    rKeyItr.return && rKeyItr.return();\n    rValItr.return && rValItr.return();\n    return false;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { clampRange } from '../util/vector';\nimport { DataType, Dictionary } from '../type';\nimport { selectChunkArgs } from '../util/args';\nimport { DictionaryVector } from './dictionary';\nimport { AbstractVector, Vector } from '../vector';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\ntype ChunkedDict<T extends DataType> = T extends Dictionary ? Vector<T['dictionary']> : null | never;\n/** @ignore */\ntype ChunkedKeys<T extends DataType> = T extends Dictionary ? Vector<T['indices']> | Chunked<T['indices']> : null | never;\n\n/** @ignore */\nexport type SearchContinuation<T extends Chunked> = (column: T, chunkIndex: number, valueIndex: number) => any;\n\n/** @ignore */\nexport class Chunked<T extends DataType = any>\n    extends AbstractVector<T>\n    implements Clonable<Chunked<T>>,\n               Sliceable<Chunked<T>>,\n               Applicative<T, Chunked<T>> {\n\n    /** @nocollapse */\n    public static flatten<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        return selectChunkArgs<Vector<T>>(Vector, vectors);\n    }\n\n    /** @nocollapse */\n    public static concat<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        const chunks = Chunked.flatten<T>(...vectors);\n        return new Chunked<T>(chunks[0].type, chunks);\n    }\n\n    protected _type: T;\n    protected _length: number;\n    protected _chunks: Vector<T>[];\n    protected _numChildren: number;\n    protected _children?: Chunked[];\n    protected _nullCount: number = -1;\n    protected _chunkOffsets: Uint32Array;\n\n    constructor(type: T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get typeId(): T['TType'] { return this._type.typeId; }\n    public get VectorName() { return `Chunked<${this._type}>`; }\n    public get data(): Data<T> {\n        return this._chunks[0] ? this._chunks[0].data : <any> null;\n    }\n\n    public get ArrayType() { return this._type.ArrayType; }\n    public get numChildren() { return this._numChildren; }\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    public get byteLength(): number {\n        return this._chunks.reduce((byteLength, chunk) => byteLength + chunk.byteLength, 0);\n    }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n\n    protected _indices?: ChunkedKeys<T>;\n    public get indices(): ChunkedKeys<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            if (!this._indices) {\n                const chunks = (<any> this._chunks) as DictionaryVector<T, any>[];\n                this._indices = (chunks.length === 1\n                    ? chunks[0].indices\n                    : Chunked.concat(...chunks.map((x) => x.indices))) as ChunkedKeys<T>;\n            }\n            return this._indices;\n        }\n        return null;\n    }\n    public get dictionary(): ChunkedDict<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            return this._chunks[this._chunks.length - 1].data.dictionary as ChunkedDict<T>;\n        }\n        return null;\n    }\n\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n\n    public clone(chunks = this._chunks): Chunked<T> {\n        return new Chunked(this._type, chunks);\n    }\n\n    public concat(...others: Vector<T>[]): Chunked<T> {\n        return this.clone(Chunked.flatten(this, ...others));\n    }\n\n    public slice(begin?: number, end?: number): Chunked<T> {\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Chunked<R> | null {\n\n        if (index < 0 || index >= this._numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let child: Chunked<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (child = columns[index]) { return child; }\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Chunked<R>(field.type, chunks));\n            }\n        }\n\n        return null;\n    }\n\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0            ) { return null; }\n        if (idx >= offsets[rhs]) { return null; }\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n\n    public isValid(index: number): boolean {\n        return !!this.search(index, this.isValidInternal);\n    }\n\n    public get(index: number): T['TValue'] | null {\n        return this.search(index, this.getInternal);\n    }\n\n    public set(index: number, value: T['TValue'] | null): void {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n\n    public indexOf(element: T['TValue'], offset?: number): number {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n\n    public toArray(): T['TArray'] {\n        const { chunks } = this;\n        const n = chunks.length;\n        let ArrayType: any = this._type.ArrayType;\n        if (n <= 0) { return new ArrayType(0); }\n        if (n <= 1) { return chunks[0].toArray(); }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new ArrayType(len);\n        let set: any = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n\n    protected getInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].get(j); }\n    protected isValidInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].isValid(j); }\n    protected indexOfInternal({ _chunks }: Chunked<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\n        let i = chunkIndex - 1, n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n\n    protected _sliceInternal(self: Chunked<T>, begin: number, end: number) {\n        const slices: Vector<T>[] = [];\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= end) { break; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (begin >= chunkOffset + chunkLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= begin && (chunkOffset + chunkLength) <= end) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const from = Math.max(0, begin - chunkOffset);\n            const to = Math.min(end - chunkOffset, chunkLength);\n            slices.push(chunk.slice(from, to) as Vector<T>);\n        }\n        return self.clone(slices);\n    }\n}\n\n/** @ignore */\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n\n/** @ignore */\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n\n/** @ignore */\nconst arraySet = (src: any[], dst: any[], offset: number) => {\n    let idx = offset;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[idx++] = src[i];\n    }\n    return idx;\n};\n\n/** @ignore */\ninterface TypedArray extends ArrayBufferView {\n    readonly length: number;\n    readonly [n: number]: number;\n    set(array: ArrayLike<number>, offset?: number): void;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Field } from './schema';\nimport { DataType } from './type';\nimport { Vector } from './vector';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { VectorCtorArgs, VectorType as V } from './interfaces';\nimport { Chunked, SearchContinuation } from './vector/chunked';\n\nexport interface Column<T extends DataType = any> {\n    typeId: T['TType'];\n    concat(...others: Vector<T>[]): Column<T>;\n    slice(begin?: number, end?: number): Column<T>;\n    clone(chunks?: Vector<T>[], offsets?: Uint32Array): Column<T>;\n}\n\nexport class Column<T extends DataType = any>\n    extends Chunked<T>\n    implements Clonable<Column<T>>,\n               Sliceable<Column<T>>,\n               Applicative<T, Column<T>> {\n\n    public static new<T extends DataType>(field: string | Field<T>, ...chunks: (Vector<T> | Vector<T>[])[]): Column<T>;\n    public static new<T extends DataType>(field: string | Field<T>, data: Data<T>, ...args: VectorCtorArgs<V<T>>): Column<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(field: string | Field<T>, data: Data<T> | Vector<T> | (Data<T> | Vector<T>)[], ...rest: any[]) {\n\n        const chunks = Chunked.flatten<T>(\n            Array.isArray(data) ? [...data, ...rest] :\n            data instanceof Vector ? [data, ...rest] :\n            [Vector.new(data, ...rest)]\n        );\n\n        if (typeof field === 'string') {\n            const type = chunks[0].data.type;\n            field = new Field(field, type, true);\n        } else if (!field.nullable && chunks.some(({ nullCount }) => nullCount > 0)) {\n            field = field.clone({ nullable: true });\n        }\n        return new Column(field, chunks);\n    }\n\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\n        vectors = Chunked.flatten<T>(...vectors);\n        super(field.type, vectors, offsets);\n        this._field = field;\n        if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\n            return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\n        }\n    }\n\n    protected _field: Field<T>;\n    protected _children?: Column[];\n\n    public get field() { return this._field; }\n    public get name() { return this._field.name; }\n    public get nullable() { return this._field.nullable; }\n    public get metadata() { return this._field.metadata; }\n\n    public clone(chunks = this._chunks) {\n        return new Column(this._field, chunks);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (column = columns[index]) { return column; }\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n\n        return null;\n    }\n}\n\n/** @ignore */\nclass SingleChunkColumn<T extends DataType = any> extends Column<T> {\n    protected _chunk: Vector<T>;\n    constructor(field: Field<T>, vector: Vector<T>, offsets?: Uint32Array) {\n        super(field, [vector], offsets);\n        this._chunk = vector;\n    }\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        return then ? then(this, 0, index) : [0, index];\n    }\n    public isValid(index: number): boolean {\n        return this._chunk.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this._chunk.get(index);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        this._chunk.set(index, value);\n    }\n    public indexOf(element: T['TValue'], offset?: number): number {\n        return this._chunk.indexOf(element, offset);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from '../vector/chunked';\n\ntype RecordBatchCtor = typeof import('../recordbatch').RecordBatch;\n\nconst isArray = Array.isArray;\n\n/** @ignore */\nexport const selectArgs = <T>(Ctor: any, vals: any[]) => _selectArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnArgs = <T extends { [key: string]: DataType }>(args: any[]) => {\n    const [fields, values] = _selectFieldArgs<T>(args, [[], []]);\n    return values.map((x, i) =>\n        x instanceof Column ? Column.new(x.field.clone(fields[i]), x) :\n        x instanceof Vector ? Column.new(fields[i], x) as Column<T[keyof T]> :\n                              Column.new(fields[i], [] as Vector<T[keyof T]>[]));\n};\n\n/** @ignore */\nexport const selectFieldArgs = <T extends { [key: string]: DataType }>(args: any[]) => _selectFieldArgs<T>(args, [[], []]);\n/** @ignore */\nexport const selectChunkArgs = <T>(Ctor: any, vals: any[]) => _selectChunkArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectVectorChildrenArgs = <T extends Vector>(Ctor: RecordBatchCtor, vals: any[]) => _selectVectorChildrenArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnChildrenArgs = <T extends Column>(Ctor: RecordBatchCtor, vals: any[]) => _selectColumnChildrenArgs(Ctor, vals, [], 0) as T[];\n\n/** @ignore */\nfunction _selectArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectChunkArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectChunkArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Chunked) {\n            j = _selectChunkArgs(Ctor, value.chunks, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectVectorChildrenArgs<T extends Vector>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectVectorChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Vector, value.schema.fields.map((_, i) => value.getChildAt(i)!), res, j).length;\n        } else if (value instanceof Vector) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectColumnChildrenArgs<T extends Column>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectColumnChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Column, value.schema.fields.map((f, i) => Column.new(f, value.getChildAt(i)!)), res, j).length;\n        } else if (value instanceof Column) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nconst toKeysAndValues = (xs: [any[], any[]], [k, v]: [any, any], i: number) => (xs[0][i] = k, xs[1][i] = v, xs);\n\n/** @ignore */\nfunction _selectFieldArgs<T extends { [key: string]: DataType }>(vals: any[], ret: [Field<T[keyof T]>[], Vector<T[keyof T]>[]]): [Field<T[keyof T]>[], (T[keyof T] | Vector<T[keyof T]>)[]] {\n    let keys: any[], n: number;\n    switch (n = vals.length) {\n        case 0: return ret;\n        case 1:\n            keys = ret[0];\n            if (!(vals[0])) { return ret; }\n            if (isArray(vals[0])) { return _selectFieldArgs(vals[0], ret); }\n            if (!(vals[0] instanceof Data || vals[0] instanceof Vector || vals[0] instanceof DataType)) {\n                [keys, vals] = Object.entries(vals[0]).reduce(toKeysAndValues, ret);\n            }\n            break;\n        default:\n            !isArray(keys = vals[n - 1])\n                ? (vals = isArray(vals[0]) ? vals[0] : vals, keys = [])\n                : (vals = isArray(vals[0]) ? vals[0] : vals.slice(0, n - 1));\n    }\n\n    let fieldIndex = -1;\n    let valueIndex = -1;\n    let idx = -1, len = vals.length;\n    let field: number | string | Field<T[keyof T]>;\n    let val: Vector<T[keyof T]> | Data<T[keyof T]>;\n    let [fields, values] = ret as [Field<T[keyof T]>[], any[]];\n\n    while (++idx < len) {\n        val = vals[idx];\n        if (val instanceof Column && (values[++valueIndex] = val)) {\n            fields[++fieldIndex] = val.field.clone(keys[idx], val.type, true);\n        } else {\n            ({ [idx]: field = idx } = keys);\n            if (val instanceof DataType && (values[++valueIndex] = val)) {\n                fields[++fieldIndex] = Field.new(field, val as DataType, true) as Field<T[keyof T]>;\n            } else if (val && val.type && (values[++valueIndex] = val)) {\n                val instanceof Data && (values[valueIndex] = val = Vector.new(val) as Vector);\n                fields[++fieldIndex] = Field.new(field, val.type, true) as Field<T[keyof T]>;\n            }\n        }\n    }\n    return ret;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { DataType } from './type';\nimport { selectArgs } from './util/args';\nimport { selectFieldArgs } from './util/args';\nimport { instance as comparer } from './visitor/typecomparator';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = T[keyof T][] | Data<T[keyof T]>[] | Vector<T[keyof T]>[];\n\nexport class Schema<T extends { [key: string]: DataType } = any> {\n\n    public static from<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static from<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static from<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static from(...args: any[]) {\n        return Schema.new(args[0], args[1]);\n    }\n\n    public static new<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static new<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static new(...args: any[]) {\n        return new Schema(selectFieldArgs(args)[0]);\n    }\n\n    public readonly fields: Field<T[keyof T]>[];\n    public readonly metadata: Map<string, string>;\n    public readonly dictionaries: Map<number, DataType>;\n\n    constructor(fields: Field[] = [],\n                metadata?: Map<string, string> | null,\n                dictionaries?: Map<number, DataType> | null) {\n        this.fields = (fields || []) as Field<T[keyof T]>[];\n        this.metadata = metadata || new Map();\n        if (!dictionaries) {\n            dictionaries = generateDictionaryMap(fields);\n        }\n        this.dictionaries = dictionaries;\n    }\n    public get [Symbol.toStringTag]() { return 'Schema'; }\n    public toString() {\n        return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n    }\n\n    public compareTo(other?: Schema | null): other is Schema<T> {\n        return comparer.compareSchemas(this, other);\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema<{ [P in K]: T[P] }>(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        return new Schema<{ [key: string]: K }>(columnIndices.map((i) => this.fields[i]).filter(Boolean), this.metadata);\n    }\n\n    public assign<R extends { [key: string]: DataType } = any>(schema: Schema<R>): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...fields: (Field<R[keyof R]> | Field<R[keyof R]>[])[]): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...args: (Schema<R> | Field<R[keyof R]> | Field<R[keyof R]>[])[]) {\n\n        const other = args[0] instanceof Schema ? args[0] as Schema<R>\n            : new Schema<R>(selectArgs<Field<R[keyof R]>>(Field, args));\n\n        const curFields = [...this.fields] as Field[];\n        const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n        const newFields = other.fields.filter((f2) => {\n            const i = curFields.findIndex((f) => f.name === f2.name);\n            return ~i ? (curFields[i] = f2.clone({\n                metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n            })) && false : true;\n        }) as Field[];\n\n        const newDictionaries = generateDictionaryMap(newFields, new Map());\n\n        return new Schema<T & R>(\n            [...curFields, ...newFields], metadata,\n            new Map([...this.dictionaries, ...newDictionaries])\n        );\n    }\n}\n\nexport class Field<T extends DataType = any> {\n\n    public static new<T extends DataType = any>(props: { name: string | number, type: T, nullable?: boolean, metadata?: Map<string, string> | null }): Field<T>;\n    public static new<T extends DataType = any>(name: string | number | Field<T>, type: T, nullable?: boolean, metadata?: Map<string, string> | null): Field<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        if (args[0] && typeof args[0] === 'object') {\n            ({ name } = args[0]);\n            (type === undefined) && (type = args[0].type);\n            (nullable === undefined) && (nullable = args[0].nullable);\n            (metadata === undefined) && (metadata = args[0].metadata);\n        }\n        return new Field<T>(`${name}`, type, nullable, metadata);\n    }\n\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata: Map<string, string>;\n\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata || new Map();\n    }\n\n    public get typeId() { return this.type.typeId; }\n    public get [Symbol.toStringTag]() { return 'Field'; }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public compareTo(other?: Field | null): other is Field<T> {\n        return comparer.compareField(this, other);\n    }\n    public clone<R extends DataType = T>(props: { name?: string | number, type?: R, nullable?: boolean, metadata?: Map<string, string> | null }): Field<R>;\n    public clone<R extends DataType = T>(name?: string | number | Field<T>, type?: R, nullable?: boolean, metadata?: Map<string, string> | null): Field<R>;\n    public clone<R extends DataType = T>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        (!args[0] || typeof args[0] !== 'object')\n            ? ([name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args)\n            : ({name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata} = args[0]);\n        return Field.new<R>(name, type, nullable, metadata);\n    }\n}\n\n/** @ignore */\nfunction mergeMaps<TKey, TVal>(m1?: Map<TKey, TVal> | null, m2?: Map<TKey, TVal> | null): Map<TKey, TVal> {\n    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n\n/** @ignore */\nfunction generateDictionaryMap(fields: Field[], dictionaries = new Map<number, DataType>()): Map<number, DataType> {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children && type.children.length > 0) {\n            generateDictionaryMap(type.children, dictionaries);\n        }\n    }\n\n    return dictionaries;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Schema.prototype as any).fields = null;\n(Schema.prototype as any).metadata = null;\n(Schema.prototype as any).dictionaries = null;\n\n(Field.prototype as any).type = null;\n(Field.prototype as any).name = null;\n(Field.prototype as any).nullable = null;\n(Field.prototype as any).metadata = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { DataType, List } from '../type';\nimport { OffsetsBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions, VariableWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class ListBuilder<T extends DataType = any, TNull = any> extends VariableWidthBuilder<List<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    protected _offsets: OffsetsBufferBuilder;\n    constructor(opts: BuilderOptions<List<T>, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new List(new Field(name, child.type, true));\n        return this.numChildren - 1;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n    protected _flushPending(pending: Map<number, T['TValue'] | undefined>) {\n        const run = this._run;\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        let index = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.length);\n                setValue(this, index, run.bind(value));\n            }\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { Builder } from '../builder';\nimport { DataType, FixedSizeList } from '../type';\n\n/** @ignore */\nexport class FixedSizeListBuilder<T extends DataType = any, TNull = any> extends Builder<FixedSizeList<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    public setValue(index: number, value: T['TValue']) {\n        super.setValue(index, this._run.bind(value));\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('FixedSizeListBuilder can only have one child.');\n        }\n        const childIndex = this.children.push(child);\n        this.type = new FixedSizeList(this.type.listSize, new Field(name, child.type, true));\n        return childIndex;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataType, Map_, Struct } from '../type';\nimport { Builder, VariableWidthBuilder } from '../builder';\n\n/** @ignore */ type MapValue<K extends DataType = any, V extends DataType = any> = Map_<K, V>['TValue'];\n/** @ignore */ type MapValues<K extends DataType = any, V extends DataType = any> = Map<number, MapValue<K, V> | undefined>;\n/** @ignore */ type MapValueExt<K extends DataType = any, V extends DataType = any> = MapValue<K, V> | { [key: string]: V } | { [key: number]: V } ;\n\n/** @ignore */\nexport class MapBuilder<K extends DataType = any, V extends DataType = any, TNull = any> extends VariableWidthBuilder<Map_<K, V>, TNull> {\n\n    protected _pending: MapValues<K, V> | undefined;\n    public set(index: number, value: MapValueExt<K, V> | TNull) {\n        return super.set(index, value as MapValue<K, V> | TNull);\n    }\n\n    public setValue(index: number, value: MapValueExt<K, V>) {\n        value = value instanceof Map ? value : new Map(Object.entries(value));\n        const pending = this._pending || (this._pending = new Map() as MapValues<K, V>);\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.size);\n        this._pendingLength += value.size;\n        pending.set(index, value);\n    }\n\n    public addChild(child: Builder<Struct<{ key: K, value: V }>>, name = `${this.numChildren}`) {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new Map_<K, V>(new Field(name, child.type, true), this.type.keysSorted);\n        return this.numChildren - 1;\n    }\n\n    protected _flushPending(pending: MapValues<K, V>) {\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        pending.forEach((value, index) => {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.size);\n                setValue(this, index, value);\n            }\n        });\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { Builder } from '../builder';\nimport { DataType, Struct } from '../type';\n\n/** @ignore */\nexport class StructBuilder<T extends { [key: string]: DataType } = any, TNull = any> extends Builder<Struct<T>, TNull> {\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        const childIndex = this.children.push(child);\n        this.type = new Struct([...this.type.children, new Field(name, child.type, true)]);\n        return childIndex;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\nimport { Union, SparseUnion, DenseUnion } from '../type';\n\nexport interface UnionBuilderOptions<T extends Union = any, TNull = any> extends BuilderOptions<T, TNull> {\n    valueToChildTypeId?: (builder: UnionBuilder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport abstract class UnionBuilder<T extends Union, TNull = any> extends Builder<T, TNull> {\n\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);\n        if (typeof options['valueToChildTypeId'] === 'function') {\n            this._valueToChildTypeId = options['valueToChildTypeId'];\n        }\n    }\n\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n\n    public append(value: T['TValue'] | TNull, childTypeId?: number) {\n        return this.set(this.length, value, childTypeId);\n    }\n\n    public set(index: number, value: T['TValue'] | TNull, childTypeId?: number) {\n        if (childTypeId === undefined) {\n            childTypeId = this._valueToChildTypeId(this, value, index);\n        }\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value, childTypeId);\n        }\n        return this;\n    }\n\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        this._typeIds.set(index, childTypeId!);\n        super.setValue(index, value);\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.children.length}`) {\n        const childTypeId = this.children.push(child);\n        const { type: { children, mode, typeIds } } = this;\n        const fields = [...children, new Field(name, child.type)];\n        this.type = <T> new Union(mode, [...typeIds, childTypeId], fields);\n        return childTypeId;\n    }\n\n    /** @ignore */\n    // @ts-ignore\n    protected _valueToChildTypeId(builder: UnionBuilder<T, TNull>, value: any, offset: number): number {\n        throw new Error(`Cannot map UnionBuilder value to child typeId. \\\nPass the \\`childTypeId\\` as the second argument to unionBuilder.append(), \\\nor supply a \\`valueToChildTypeId\\` function as part of the UnionBuilder constructor options.`);\n    }\n}\n\n/** @ignore */\nexport class SparseUnionBuilder<T extends SparseUnion, TNull = any> extends UnionBuilder<T, TNull> {}\n/** @ignore */\nexport class DenseUnionBuilder<T extends DenseUnion, TNull = any> extends UnionBuilder<T, TNull> {\n\n    protected _offsets: DataBufferBuilder<Int32Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._offsets = new DataBufferBuilder(new Int32Array(0));\n    }\n\n    /** @ignore */\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        const childIndex = this.type.typeIdToChildIndex[childTypeId!];\n        this._offsets.set(index, this.getChildAt(childIndex)!.length);\n        return super.setValue(index, value, childTypeId);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { encodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { float64ToUint16 } from '../util/math';\nimport { toArrayBufferView } from '../util/buffer';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface SetVisitor extends Visitor {\n    visit<T extends VectorType>(node: T, index: number, value: T['TValue']): void;\n    visitMany<T extends VectorType>(nodes: T[], indices: number[], values: T['TValue'][]): void[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitList                 <T extends List>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n}\n\n/** @ignore */\nexport class SetVisitor extends Visitor {}\n\n/** @ignore */\nconst setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 86400000) | 0; };\n/** @ignore */\nconst setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;\n};\n\n/** @ignore */\nconst setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\n/** @ignore */\nconst setBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |=  (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n\n/** @ignore */ type Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */ type Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst setDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nconst setDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nconst setNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = float64ToUint16(value); };\n/** @ignore */\nconst setNumericX2       = <T extends Numeric2X>      (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (typeof value) {\n        case 'bigint': vector.values64[index] = value; break;\n        case 'number': vector.values[index * vector.stride] = value; break;\n        default:\n            const val = value as T['TArray'];\n            const { stride, ArrayType } = vector;\n            const long = toArrayBufferView<T['TArray']>(ArrayType, val);\n            vector.values.set(long.subarray(0, stride), stride * index);\n    }\n};\n/** @ignore */\nconst setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setInt = <T extends Int>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.bitWidth < 64\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value as Numeric1X['TValue'])\n        : setNumericX2(vector as VectorType<Numeric2X>, index, value as Numeric2X['TValue']);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setFloat = <T extends Float>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value)\n        : setFloat16(vector as VectorType<Float16>, index, value);\n};\n\n/* istanbul ignore next */\nconst setDate = <T extends Date_> (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector as VectorType<DateDay>, index, value)\n        : setDateMillisecond(vector as VectorType<DateMillisecond>, index, value);\n};\n\n/** @ignore */\nconst setTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nconst setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nconst setTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimestampSecond(vector as VectorType<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND:  return  setTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index, value);\n    }\n};\n\n/** @ignore */\nconst setTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/* istanbul ignore next */\n/** @ignore */\nconst setTime            = <T extends Time>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimeSecond(vector as VectorType<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector as VectorType<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND:  return  setTimeNanosecond(vector as VectorType<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\n/** @ignore */\nconst setDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 4), 4 * index); };\n\n/** @ignore */\nconst setList = <T extends List>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, value.get(++idx));\n    }\n};\n\n/** @ignore */\nconst setMap = <T extends Map_>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    const entries = value instanceof Map ? [...value] : Object.entries(value);\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, entries[++idx]);\n    }\n};\n\n/** @ignore */ const _setStructArrayValue = (o: number, v: any[]) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v[i]);\n/** @ignore */ const _setStructVectorValue = (o: number, v: Vector) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v.get(i));\n/** @ignore */ const _setStructMapValue = (o: number, v: Map<string, any>) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v.get(f.name));\n/** @ignore */ const _setStructObjectValue = (o: number, v: { [key: string]: any }) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v[f.name]);\n/** @ignore */\nconst setStruct = <T extends Struct>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n\n    const setValue = value instanceof Map    ? _setStructMapValue(index, value)    :\n                     value instanceof Vector ? _setStructVectorValue(index, value) :\n                     Array.isArray(value)    ? _setStructArrayValue(index, value)  :\n                                               _setStructObjectValue(index, value) ;\n\n    vector.type.children.forEach((f: Field, i: number) => setValue(vector.getChildAt(i), f, i));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector as VectorType<DenseUnion>, index, value) :\n        setSparseUnion(vector as VectorType<SparseUnion>, index, value);\n};\n\n/** @ignore */\nconst setDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(vector.valueOffsets[index], value);\n};\n\n/** @ignore */\nconst setSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(index, value);\n};\n\n/** @ignore */\nconst setDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const key = vector.getKey(index);\n    if (key !== null) {\n        vector.setValue(key, value);\n    }\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setIntervalValue = <T extends Interval>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector as VectorType<IntervalDayTime>, index, value)\n        : setIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index, value);\n};\n\n/** @ignore */\nconst setIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\n/** @ignore */\nconst setFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(idx));\n    }\n};\n\nSetVisitor.prototype.visitBool                 =                 setBool;\nSetVisitor.prototype.visitInt                  =                  setInt;\nSetVisitor.prototype.visitInt8                 =              setNumeric;\nSetVisitor.prototype.visitInt16                =              setNumeric;\nSetVisitor.prototype.visitInt32                =              setNumeric;\nSetVisitor.prototype.visitInt64                =            setNumericX2;\nSetVisitor.prototype.visitUint8                =              setNumeric;\nSetVisitor.prototype.visitUint16               =              setNumeric;\nSetVisitor.prototype.visitUint32               =              setNumeric;\nSetVisitor.prototype.visitUint64               =            setNumericX2;\nSetVisitor.prototype.visitFloat                =                setFloat;\nSetVisitor.prototype.visitFloat16              =              setFloat16;\nSetVisitor.prototype.visitFloat32              =              setNumeric;\nSetVisitor.prototype.visitFloat64              =              setNumeric;\nSetVisitor.prototype.visitUtf8                 =                 setUtf8;\nSetVisitor.prototype.visitBinary               =               setBinary;\nSetVisitor.prototype.visitFixedSizeBinary      =      setFixedSizeBinary;\nSetVisitor.prototype.visitDate                 =                 setDate;\nSetVisitor.prototype.visitDateDay              =              setDateDay;\nSetVisitor.prototype.visitDateMillisecond      =      setDateMillisecond;\nSetVisitor.prototype.visitTimestamp            =            setTimestamp;\nSetVisitor.prototype.visitTimestampSecond      =      setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond  =  setTimestampNanosecond;\nSetVisitor.prototype.visitTime                 =                 setTime;\nSetVisitor.prototype.visitTimeSecond           =           setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond      =      setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond      =      setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond       =       setTimeNanosecond;\nSetVisitor.prototype.visitDecimal              =              setDecimal;\nSetVisitor.prototype.visitList                 =                 setList;\nSetVisitor.prototype.visitStruct               =               setStruct;\nSetVisitor.prototype.visitUnion                =                setUnion;\nSetVisitor.prototype.visitDenseUnion           =           setDenseUnion;\nSetVisitor.prototype.visitSparseUnion          =          setSparseUnion;\nSetVisitor.prototype.visitDictionary           =           setDictionary;\nSetVisitor.prototype.visitInterval             =        setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime      =      setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth    =    setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList        =        setFixedSizeList;\nSetVisitor.prototype.visitMap                  =                  setMap;\n\n/** @ignore */\nexport const instance = new SetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, BuilderCtor } from '../interfaces';\nimport { BinaryBuilder } from '../builder/binary';\nimport { BoolBuilder } from '../builder/bool';\nimport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from '../builder/date';\nimport { DecimalBuilder } from '../builder/decimal';\nimport { DictionaryBuilder } from '../builder/dictionary';\nimport { FixedSizeBinaryBuilder } from '../builder/fixedsizebinary';\nimport { FixedSizeListBuilder } from '../builder/fixedsizelist';\nimport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from '../builder/float';\nimport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from '../builder/interval';\nimport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from '../builder/int';\nimport { ListBuilder } from '../builder/list';\nimport { MapBuilder } from '../builder/map';\nimport { NullBuilder } from '../builder/null';\nimport { StructBuilder } from '../builder/struct';\nimport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from '../builder/timestamp';\nimport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from '../builder/time';\nimport { UnionBuilder, DenseUnionBuilder, SparseUnionBuilder } from '../builder/union';\nimport { Utf8Builder } from '../builder/utf8';\n\n/** @ignore */\nexport interface GetBuilderCtor extends Visitor {\n    visit<T extends Type>(type: T): BuilderCtor<T>;\n    visitMany<T extends Type>(types: T[]): BuilderCtor<T>[];\n    getVisitFn<T extends Type>(type: T): () => BuilderCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => BuilderCtor<T>;\n}\n\n/** @ignore */\nexport class GetBuilderCtor extends Visitor {\n    public visitNull                 () { return NullBuilder;                 }\n    public visitBool                 () { return BoolBuilder;                 }\n    public visitInt                  () { return IntBuilder;                  }\n    public visitInt8                 () { return Int8Builder;                 }\n    public visitInt16                () { return Int16Builder;                }\n    public visitInt32                () { return Int32Builder;                }\n    public visitInt64                () { return Int64Builder;                }\n    public visitUint8                () { return Uint8Builder;                }\n    public visitUint16               () { return Uint16Builder;               }\n    public visitUint32               () { return Uint32Builder;               }\n    public visitUint64               () { return Uint64Builder;               }\n    public visitFloat                () { return FloatBuilder;                }\n    public visitFloat16              () { return Float16Builder;              }\n    public visitFloat32              () { return Float32Builder;              }\n    public visitFloat64              () { return Float64Builder;              }\n    public visitUtf8                 () { return Utf8Builder;                 }\n    public visitBinary               () { return BinaryBuilder;               }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryBuilder;      }\n    public visitDate                 () { return DateBuilder;                 }\n    public visitDateDay              () { return DateDayBuilder;              }\n    public visitDateMillisecond      () { return DateMillisecondBuilder;      }\n    public visitTimestamp            () { return TimestampBuilder;            }\n    public visitTimestampSecond      () { return TimestampSecondBuilder;      }\n    public visitTimestampMillisecond () { return TimestampMillisecondBuilder; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondBuilder; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondBuilder;  }\n    public visitTime                 () { return TimeBuilder;                 }\n    public visitTimeSecond           () { return TimeSecondBuilder;           }\n    public visitTimeMillisecond      () { return TimeMillisecondBuilder;      }\n    public visitTimeMicrosecond      () { return TimeMicrosecondBuilder;      }\n    public visitTimeNanosecond       () { return TimeNanosecondBuilder;       }\n    public visitDecimal              () { return DecimalBuilder;              }\n    public visitList                 () { return ListBuilder;                 }\n    public visitStruct               () { return StructBuilder;               }\n    public visitUnion                () { return UnionBuilder;                }\n    public visitDenseUnion           () { return DenseUnionBuilder;           }\n    public visitSparseUnion          () { return SparseUnionBuilder;          }\n    public visitDictionary           () { return DictionaryBuilder;           }\n    public visitInterval             () { return IntervalBuilder;             }\n    public visitIntervalDayTime      () { return IntervalDayTimeBuilder;      }\n    public visitIntervalYearMonth    () { return IntervalYearMonthBuilder;    }\n    public visitFixedSizeList        () { return FixedSizeListBuilder;        }\n    public visitMap                  () { return MapBuilder;                  }\n}\n\n/** @ignore */\nexport const instance = new GetBuilderCtor();\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Footer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Footer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Footer= obj\n         * @returns Footer\n         */\n        static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n            return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.Schema= obj\n         * @returns org.apache.arrow.flatbuf.Schema|null\n         */\n        schema(obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Schema): NS7624605610262437867.org.apache.arrow.flatbuf.Schema | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Schema).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Block= obj\n         * @returns org.apache.arrow.flatbuf.Block\n         */\n        dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        dictionariesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Block= obj\n         * @returns org.apache.arrow.flatbuf.Block\n         */\n        recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        recordBatchesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFooter(builder: flatbuffers.Builder) {\n            builder.startObject(4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset schemaOffset\n         */\n        static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, schemaOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionariesOffset\n         */\n        static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, dictionariesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(24, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset recordBatchesOffset\n         */\n        static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, recordBatchesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(24, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createFooter(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, schemaOffset: flatbuffers.Offset, dictionariesOffset: flatbuffers.Offset, recordBatchesOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Footer.startFooter(builder);\n            Footer.addVersion(builder, version);\n            Footer.addSchema(builder, schemaOffset);\n            Footer.addDictionaries(builder, dictionariesOffset);\n            Footer.addRecordBatches(builder, recordBatchesOffset);\n            return Footer.endFooter(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Block {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Block\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * Index to the start of the RecordBlock (note this is past the Message header)\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * Length of the metadata\n         *\n         * @returns number\n         */\n        metaDataLength(): number {\n            return this.bb!.readInt32(this.bb_pos + 8);\n        }\n\n        /**\n         * Length of the data (this is aligned so there can be a gap between this and\n         * the metatdata).\n         *\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 16);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param number metaDataLength\n         * @param flatbuffers.Long bodyLength\n         * @returns flatbuffers.Offset\n         */\n        static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 24);\n            builder.writeInt64(bodyLength);\n            builder.pad(4);\n            builder.writeInt32(metaDataLength);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport { Builder, BuilderOptions } from '../builder';\nexport { BoolBuilder } from './bool';\nexport { NullBuilder } from './null';\nexport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from './date';\nexport { DecimalBuilder } from './decimal';\nexport { DictionaryBuilder } from './dictionary';\nexport { FixedSizeBinaryBuilder } from './fixedsizebinary';\nexport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from './float';\nexport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from './int';\nexport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from './time';\nexport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from './timestamp';\nexport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from './interval';\nexport { Utf8Builder } from './utf8';\nexport { BinaryBuilder } from './binary';\nexport { ListBuilder } from './list';\nexport { FixedSizeListBuilder } from './fixedsizelist';\nexport { MapBuilder } from './map';\nexport { StructBuilder } from './struct';\nexport { UnionBuilder, SparseUnionBuilder, DenseUnionBuilder } from './union';\n\nimport { Type } from '../enum';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Utf8Builder } from './utf8';\nimport { BuilderType as B } from '../interfaces';\nimport { Builder, BuilderOptions } from '../builder';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as getBuilderConstructor } from '../visitor/builderctor';\n\n/** @nocollapse */\nBuilder.new = newBuilder;\n\nfunction newBuilder<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {\n\n    const type = options.type;\n    const builder = new (getBuilderConstructor.getVisitFn<T>(type)())(options) as Builder<T, TNull>;\n\n    if (type.children && type.children.length > 0) {\n\n        const children = options['children'] || [] as BuilderOptions[];\n        const defaultOptions = { 'nullValues': options['nullValues'] };\n        const getChildOptions = Array.isArray(children)\n            ? ((_: Field, i: number) => children[i] || defaultOptions)\n            : (({ name }: Field) => children[name] || defaultOptions);\n\n        type.children.forEach((field, index) => {\n            const { type } = field;\n            const opts = getChildOptions(field, index);\n            builder.children.push(newBuilder({ ...opts, type }));\n        });\n    }\n\n    return builder as B<T, TNull>;\n}\n\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number' && T !== Type.NONE)\n    .forEach((typeId) => {\n        const BuilderCtor = getBuilderConstructor.visit(typeId);\n        BuilderCtor.prototype._setValue = setVisitor.getVisitFn(typeId);\n    });\n\n(Utf8Builder.prototype as any)._setValue = setVisitor.visitBinary;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\n\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\n\n/** @ignore */\nclass Footer_ {\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema()!);\n        return new OffHeapFooter(schema, footer) as Footer_;\n    }\n\n    /** @nocollapse */\n    public static encode(footer: Footer_) {\n\n        const b: Builder = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n\n        const dictionaryBatchesOffset = b.endVector();\n\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n\n        return b.asUint8Array();\n    }\n\n    // @ts-ignore\n    protected _recordBatches: FileBlock[];\n    // @ts-ignore\n    protected _dictionaryBatches: FileBlock[];\n    public get numRecordBatches() { return this._recordBatches.length; }\n    public get numDictionaries() { return this._dictionaryBatches.length; }\n\n    constructor(public schema: Schema,\n                public version: MetadataVersion = MetadataVersion.V4,\n                recordBatches?: FileBlock[], dictionaryBatches?: FileBlock[]) {\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n\n    public *recordBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) { yield block; }\n        }\n    }\n\n    public *dictionaryBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) { yield block; }\n        }\n    }\n\n    public getRecordBatch(index: number) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\n\nexport { Footer_ as Footer };\n\n/** @ignore */\nclass OffHeapFooter extends Footer_ {\n\n    public get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    public get numDictionaries() { return this._footer.dictionariesLength(); }\n\n    constructor(schema: Schema, protected _footer: _Footer) {\n        super(schema, _footer.version());\n    }\n\n    public getRecordBatch(index: number) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nexport class FileBlock {\n\n    /** @nocollapse */\n    public static decode(block: _Block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n\n    /** @nocollapse */\n    public static encode(b: Builder, fileBlock: FileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n\n    public offset: number;\n    public bodyLength: number;\n    public metaDataLength: number;\n\n    constructor(metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer';\n\nimport {\n    isPromise, isFetchResponse,\n    isIterable, isAsyncIterable,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\n/** @ignore */\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\n\n/** @ignore */\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\n    public write(value: ArrayBufferViewInput | Uint8Array) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value as T);\n        }\n    }\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync = false) {\n        return sync\n            ? decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(decodeUtf8);\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays(this._values as any[])[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n\n/** @ignore */\nexport class ByteStream implements IterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: ByteStreamSource<Uint8Array>;\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    [Symbol.iterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\nexport class AsyncByteStream implements Readable<Uint8Array>, AsyncIterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: AsyncByteStreamSource<Uint8Array>;\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\n        if (source instanceof AsyncByteStream) {\n            this.source = (source as AsyncByteStream).source;\n        } else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n        } else if (isReadableDOMStream<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n        } else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body!));\n        } else if (isIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        } else if (isPromise<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isAsyncIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public get closed(): Promise<void> { return this.source.closed; }\n    public cancel(reason?: any) { return this.source.cancel(reason); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\ninterface ByteStreamSourceIterator<T> extends IterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): IteratorResult<T>;\n}\n\n/** @ignore */\ninterface AsyncByteStreamSourceIterator<T> extends AsyncIterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nclass ByteStreamSource<T> {\n    constructor(protected source: ByteStreamSourceIterator<T>) {}\n    public cancel(reason?: any) { this.return(reason); }\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n\n/** @ignore */\nclass AsyncByteStreamSource<T> implements Readable<T> {\n\n    private _closedPromise: Promise<void>;\n    private _closedPromiseResolve?: (value?: any) => void;\n    constructor (protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\n    public async throw(value?: any) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    public async return(value?: any) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FileHandle } from './interfaces';\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\n\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n    public size: number;\n    public position: number = 0;\n    protected buffer: Uint8Array | null;\n    constructor(buffer: ArrayBufferViewInput, byteLength?: number) {\n        super();\n        this.buffer = toUint8Array(buffer);\n        this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n    }\n    public readInt32(position: number) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public read(nBytes?: number | null) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            this.position = Math.min(size,\n                 position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    public readAt(position: number, nBytes: number) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    public close() { this.buffer && (this.buffer = null); }\n    public throw(value?: any) { this.close(); return { done: true, value }; }\n    public return(value?: any) { this.close(); return { done: true, value }; }\n}\n\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    // @ts-ignore\n    public size: number;\n    public position: number = 0;\n    public _pending?: Promise<void>;\n    protected _handle: FileHandle | null;\n    constructor(file: FileHandle, byteLength?: number) {\n        super();\n        this._handle = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        } else {\n            this._pending = (async () => {\n                this.size = (await file.stat()).size;\n                delete this._pending;\n            })();\n        }\n    }\n    public async readInt32(position: number) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public async seek(position: number) {\n        this._pending && await this._pending;\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public async read(nBytes?: number | null) {\n        this._pending && await this._pending;\n        const { _handle: file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    public async readAt(position: number, nBytes: number) {\n        this._pending && await this._pending;\n        const { _handle: file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    public async close() { const f = this._handle; this._handle = null; f && await f.close(); }\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nconst carryBit16 = 1 << 16;\n\n/** @ignore */\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\n/** @ignore */\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    public high(): number { return this.buffer[1]; }\n    public low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    public lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    public equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    public greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\n/** @ignore */\nexport class Uint64 extends BaseInt64 {\n    public times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int64 extends BaseInt64 {\n    public negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    public times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    public lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    public high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    public low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    public negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    public times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    public plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\n/** @ignore */\nexport interface VectorLoader extends Visitor {\n    visit<T extends DataType>(node: Field<T> | T): Data<T>;\n    visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n}\n\n/** @ignore */\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex: number = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex: number = -1;\n    private dictionaries: Map<number, Vector<any>>;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull            <T extends type.Null>            (type: T, { length,           } = this.nextFieldNode()) { return            Data.Null(type, 0, length);                                                                                                                                 }\n    public visitBool            <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt             <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat           <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8            <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary          <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate            <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp       <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime            <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal         <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList            <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n    public visitStruct          <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion           <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion      <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion     <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary      <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));                        }\n    public visitInterval        <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList   <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));                                                  }\n    public visitMap             <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n    protected readDictionary<T extends type.Dictionary>(type: T): Vector<T['dictionary']> {\n        return this.dictionaries.get(type.id)!;\n    }\n}\n\n/** @ignore */\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super(new Uint8Array(0), nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as Schema_ from '../fb/Schema';\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\n\nimport Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport List = Schema_.org.apache.arrow.flatbuf.List;\nimport Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n\n/** @ignore */\nexport interface TypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T, builder: Builder): number | undefined;\n}\n\n/** @ignore */\nexport class TypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T, builder: Builder): number | undefined {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    public visitNull<T extends type.Null>(_node: T, b: Builder) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    public visitInt<T extends type.Int>(node: T, b: Builder) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    public visitFloat<T extends type.Float>(node: T, b: Builder) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    public visitBinary<T extends type.Binary>(_node: T, b: Builder) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    public visitBool<T extends type.Bool>(_node: T, b: Builder) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    public visitUtf8<T extends type.Utf8>(_node: T, b: Builder) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    public visitDecimal<T extends type.Decimal>(node: T, b: Builder) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    public visitDate<T extends type.Date_>(node: T, b: Builder) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    public visitTime<T extends type.Time>(node: T, b: Builder) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    public visitTimestamp<T extends type.Timestamp>(node: T, b: Builder) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    public visitInterval<T extends type.Interval>(node: T, b: Builder) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    public visitList<T extends type.List>(_node: T, b: Builder) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    public visitStruct<T extends type.Struct>(_node: T, b: Builder) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    public visitUnion<T extends type.Union>(node: T, b: Builder) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T, b: Builder) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(node: T, b: Builder) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(node: T, b: Builder) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    public visitMap<T extends type.Map_>(node: T, b: Builder) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\n\n/** @ignore */\nexport const instance = new TypeAssembler();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Schema, Field } from '../../schema';\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\nimport { DictionaryBatch, RecordBatch, FieldNode, BufferRegion } from './message';\nimport { TimeUnit, Precision, IntervalUnit, UnionMode, DateUnit } from '../../enum';\n\n/** @ignore */\nexport function schemaFromJSON(_schema: any, dictionaries: Map<number, DataType> = new Map()) {\n    return new Schema(\n        schemaFieldsFromJSON(_schema, dictionaries),\n        customMetadataFromJSON(_schema['customMetadata']),\n        dictionaries\n    );\n}\n\n/** @ignore */\nexport function recordBatchFromJSON(b: any) {\n    return new RecordBatch(\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\n/** @ignore */\nexport function dictionaryBatchFromJSON(b: any) {\n    return new DictionaryBatch(\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\n/** @ignore */\nfunction schemaFieldsFromJSON(_schema: any, dictionaries?: Map<number, DataType>) {\n    return (_schema['fields'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\n}\n\n/** @ignore */\nfunction fieldChildrenFromJSON(_field: any, dictionaries?: Map<number, DataType>): Field[] {\n    return (_field['children'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\n}\n\n/** @ignore */\nfunction fieldNodesFromJSON(xs: any[]): FieldNode[] {\n    return (xs || []).reduce<FieldNode[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldNode(\n            column['count'],\n            nullCountFromJSON(column['VALIDITY'])\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldNode[]);\n}\n\n/** @ignore */\nfunction buffersFromJSON(xs: any[], buffers: BufferRegion[] = []): BufferRegion[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));\n        column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));\n        column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));\n        column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\n/** @ignore */\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\n/** @ignore */\nexport function fieldFromJSON(_field: any, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let keys: TKeys | null;\n    let field: Field | void;\n    let dictMeta: any;\n    let type: DataType<any>;\n    let dictType: Dictionary;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = _field['dictionary'])) {\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries));\n        field = new Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta['id'])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction customMetadataFromJSON(_metadata?: object) {\n    return new Map<string, string>(Object.entries(_metadata || {}));\n}\n\n/** @ignore */\nfunction indexTypeFromJSON(_type: any) {\n    return new Int(_type['isSigned'], _type['bitWidth']);\n}\n\n/** @ignore */\nfunction typeFromJSON(f: any, children?: Field[]): DataType<any> {\n\n    const typeId = f['type']['name'];\n\n    switch (typeId) {\n        case 'NONE':   return new Null();\n        case 'null':   return new Null();\n        case 'binary': return new Binary();\n        case 'utf8':   return new Utf8();\n        case 'bool':   return new Bool();\n        case 'list':   return new List((children || [])[0]);\n        case 'struct': return new Struct(children || []);\n        case 'struct_': return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case 'int': {\n            const t = f['type'];\n            return new Int(t['isSigned'], t['bitWidth'] as IntBitWidth);\n        }\n        case 'floatingpoint': {\n            const t = f['type'];\n            return new Float(Precision[t['precision']] as any);\n        }\n        case 'decimal': {\n            const t = f['type'];\n            return new Decimal(t['scale'], t['precision']);\n        }\n        case 'date': {\n            const t = f['type'];\n            return new Date_(DateUnit[t['unit']] as any);\n        }\n        case 'time': {\n            const t = f['type'];\n            return new Time(TimeUnit[t['unit']] as any, t['bitWidth'] as TimeBitWidth);\n        }\n        case 'timestamp': {\n            const t = f['type'];\n            return new Timestamp(TimeUnit[t['unit']] as any, t['timezone']);\n        }\n        case 'interval': {\n            const t = f['type'];\n            return new Interval(IntervalUnit[t['unit']] as any);\n        }\n        case 'union': {\n            const t = f['type'];\n            return new Union(UnionMode[t['mode']] as any, (t['typeIds'] || []), children || []);\n        }\n        case 'fixedsizebinary': {\n            const t = f['type'];\n            return new FixedSizeBinary(t['byteWidth']);\n        }\n        case 'fixedsizelist': {\n            const t = f['type'];\n            return new FixedSizeList(t['listSize'], (children || [])[0]);\n        }\n        case 'map': {\n            const t = f['type'];\n            return new Map_((children || [])[0], t['keysSorted']);\n        }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\n/**\n * @ignore\n * @private\n **/\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    // @ts-ignore\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    // @ts-ignore\n    protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n/** @ignore */\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\n/** @ignore */\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    const nodes = [] as FieldNode[];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    const bufferRegions = [] as BufferRegion[];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>) {\n    const fields = [] as Field[];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return fields;\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>): Field[] {\n    const children = [] as Field[];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return children;\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type.NONE:    return new Null();\n        case Type.Null:    return new Null();\n        case Type.Binary:  return new Binary();\n        case Type.Utf8:    return new Utf8();\n        case Type.Bool:    return new Bool();\n        case Type.List:    return new List((children || [])[0]);\n        case Type.Struct_: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\n            return new Map_((children || [])[0], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    let type = field.type;\n    let typeId: Type = <any> field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array, ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, ReadableSource, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ArrowJSONLike, ITERATOR_DONE, FileHandle } from '../io/interfaces';\n\n/** @ignore */ const invalidMessageType       = (type: MessageHeader) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\n/** @ignore */ const nullMessage              = (type: MessageHeader) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\n/** @ignore */ const invalidMessageMetadata   = (expected: number, actual: number) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\n/** @ignore */ const invalidMessageBodyLength = (expected: number, actual: number) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n\n/** @ignore */\nexport class MessageReader implements IterableIterator<Message> {\n    protected source: ByteStream;\n    constructor(source: ByteStream | ArrayBufferViewInput | Iterable<ArrayBufferViewInput>) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    public [Symbol.iterator](): IterableIterator<Message> { return this as IterableIterator<Message>; }\n    public next(): IteratorResult<Message> {\n        let r;\n        if ((r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readMessageBody(bodyLength: number): Uint8Array {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected readMetadataLength(): IteratorResult<number> {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected readMetadata(metadataLength: number): IteratorResult<Message> {\n        const buf = this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class AsyncMessageReader implements AsyncIterableIterator<Message> {\n    protected source: AsyncByteStream;\n    constructor(source: ReadableSource<Uint8Array>);\n    constructor(source: FileHandle, byteLength?: number);\n    constructor(source: any, byteLength?: number) {\n        this.source = source instanceof AsyncByteStream ? source\n            : isFileHandle(source)\n            ? new AsyncRandomAccessFile(source, byteLength!)\n            : new AsyncByteStream(source);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<Message> { return this as AsyncIterableIterator<Message>; }\n    public async next(): Promise<IteratorResult<Message>> {\n        let r;\n        if ((r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = await this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public async throw(value?: any) { return await this.source.throw(value); }\n    public async return(value?: any) { return await this.source.return(value); }\n    public async readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = await this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public async readMessageBody(bodyLength: number): Promise<Uint8Array> {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public async readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected async readMetadataLength(): Promise<IteratorResult<number>> {\n        const buf = await this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected async readMetadata(metadataLength: number): Promise<IteratorResult<Message>> {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class JSONMessageReader extends MessageReader {\n    private _schema = false;\n    private _json: ArrowJSON;\n    private _body: any[] = [];\n    private _batchIndex = 0;\n    private _dictionaryIndex = 0;\n    constructor(source: ArrowJSON | ArrowJSONLike) {\n        super(new Uint8Array(0));\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    public next() {\n        const { _json } = this;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { done: false, value: message };\n        }\n        if (this._dictionaryIndex < _json.dictionaries.length) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (this._batchIndex < _json.batches.length) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    public readMessageBody(_bodyLength?: number) {\n        return flattenDataSources(this._body) as any;\n        function flattenDataSources(xs: any[]): any[][] {\n            return (xs || []).reduce<any[][]>((buffers, column: any) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], [] as any[][]);\n        }\n    }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\n\n/** @ignore */\nexport const PADDING = 4;\n/** @ignore */\nexport const MAGIC_STR = 'ARROW1';\n/** @ignore */\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\n/** @ignore */\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/** @ignore */\nexport const magicLength = MAGIC.length;\n/** @ignore */\nexport const magicAndPadding = magicLength + PADDING;\n/** @ignore */\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { Type, UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { selectVectorChildrenArgs } from '../util/args';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\n/** @ignore */\nexport interface VectorAssembler extends Visitor {\n    visit<T extends Vector>(node: T): this;\n    visitMany<T extends Vector>(nodes: T[]): this[];\n    getVisitFn<T extends Type>(node: T): (vector: V<T>) => this;\n    getVisitFn<T extends DataType>(node: V<T> | Data<T> | T): (vector: V<T>) => this;\n\n    visitBool                 <T extends Bool>            (vector: V<T>): this;\n    visitInt                  <T extends Int>             (vector: V<T>): this;\n    visitFloat                <T extends Float>           (vector: V<T>): this;\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): this;\n    visitBinary               <T extends Binary>          (vector: V<T>): this;\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): this;\n    visitDate                 <T extends Date_>           (vector: V<T>): this;\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): this;\n    visitTime                 <T extends Time>            (vector: V<T>): this;\n    visitDecimal              <T extends Decimal>         (vector: V<T>): this;\n    visitList                 <T extends List>            (vector: V<T>): this;\n    visitStruct               <T extends Struct>          (vector: V<T>): this;\n    visitUnion                <T extends Union>           (vector: V<T>): this;\n    visitInterval             <T extends Interval>        (vector: V<T>): this;\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): this;\n    visitMap                  <T extends Map_>            (vector: V<T>): this;\n}\n\n/** @ignore */\nexport class VectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Vector | RecordBatch>(...args: (T | T[])[]) {\n        const assembler = new VectorAssembler();\n        const vectorChildren = selectVectorChildrenArgs(RecordBatch, args);\n        const [assembleResult = assembler] = assembler.visitMany(vectorChildren);\n        return assembleResult;\n    }\n\n    private constructor() { super(); }\n\n    public visit<T extends Vector>(vector: T): this {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                /* istanbul ignore next */\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            if (!DataType.isNull(vector.type)) {\n                addBuffer.call(this, nullCount <= 0\n                    ? new Uint8Array(0) // placeholder validity buffer\n                    : truncateBitmap(data.offset, length, data.nullBitmap)\n                );\n            }\n            this.nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n\n    public visitNull<T extends Null>(_nullV: V<T>) {\n        return this;\n    }\n    public visitDictionary<T extends Dictionary>(vector: V<T>) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n\n    public get nodes() { return this._nodes; }\n    public get buffers() { return this._buffers; }\n    public get byteLength() { return this._byteLength; }\n    public get bufferRegions() { return this._bufferRegions; }\n\n    protected _byteLength = 0;\n    protected _nodes: FieldNode[] = [];\n    protected _buffers: ArrayBufferView[] = [];\n    protected _bufferRegions: BufferRegion[] = [];\n}\n\n/** @ignore */\nfunction addBuffer(this: VectorAssembler, values: ArrayBufferView) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n\n/** @ignore */\nfunction assembleUnion<T extends Union>(this: VectorAssembler, vector: V<T>) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    } else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        } else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child: Vector | null, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n\n/** @ignore */\nfunction assembleBoolVector<T extends Bool>(this: VectorAssembler, vector: V<T>) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values: Uint8Array;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    } else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we we're only doing this for safety.\n    /* istanbul ignore next */\n    return addBuffer.call(this, packBools(vector));\n}\n\n/** @ignore */\nfunction assembleFlatVector<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval>(this: VectorAssembler, vector: V<T>) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n\n/** @ignore */\nfunction assembleFlatListVector<T extends Utf8 | Binary>(this: VectorAssembler, vector: V<T>) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n\n/** @ignore */\nfunction assembleListVector<T extends Map_ | List | FixedSizeList>(this: VectorAssembler, vector: V<T>) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (MapVector, ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0)!);\n}\n\n/** @ignore */\nfunction assembleNestedVector<T extends Struct | Union>(this: VectorAssembler, vector: V<T>) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)!).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool            =     assembleBoolVector;\nVectorAssembler.prototype.visitInt             =     assembleFlatVector;\nVectorAssembler.prototype.visitFloat           =     assembleFlatVector;\nVectorAssembler.prototype.visitUtf8            = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary          = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary =     assembleFlatVector;\nVectorAssembler.prototype.visitDate            =     assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp       =     assembleFlatVector;\nVectorAssembler.prototype.visitTime            =     assembleFlatVector;\nVectorAssembler.prototype.visitDecimal         =     assembleFlatVector;\nVectorAssembler.prototype.visitList            =     assembleListVector;\nVectorAssembler.prototype.visitStruct          =   assembleNestedVector;\nVectorAssembler.prototype.visitUnion           =          assembleUnion;\nVectorAssembler.prototype.visitInterval        =     assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList   =     assembleListVector;\nVectorAssembler.prototype.visitMap             =     assembleListVector;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Vector } from '../vector';\nimport { Column } from '../column';\nimport { DataType } from '../type';\nimport { Schema, Field } from '../schema';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { WritableSink, AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport { Writable, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable, isObject } from '../util/compat';\n\nexport interface RecordBatchStreamWriterOptions {\n    /**\n     *\n     */\n    autoDestroy?: boolean;\n    /**\n     * A flag indicating whether the RecordBatchWriter should construct pre-0.15.0\n     * encapsulated IPC Messages, which reserves  4 bytes for the Message metadata\n     * length instead of 8.\n     * @see https://issues.apache.org/jira/browse/ARROW-6313\n     */\n    writeLegacyIpcFormat?: boolean;\n}\n\nexport class RecordBatchWriter<T extends { [key: string]: DataType } = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n        // @ts-ignore\n        readableStrategy?: { highWaterMark?: number, size?: any }\n    ): { writable: WritableStream<Table<T> | RecordBatch<T>>, readable: ReadableStream<Uint8Array> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    constructor(options?: RecordBatchStreamWriterOptions) {\n        super();\n        isObject(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });\n        this._autoDestroy = (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n        this._writeLegacyIpcFormat = (typeof options.writeLegacyIpcFormat === 'boolean') ? options.writeLegacyIpcFormat : false;\n    }\n\n    protected _position = 0;\n    protected _started = false;\n    protected _autoDestroy: boolean;\n    protected _writeLegacyIpcFormat: boolean;\n    // @ts-ignore\n    protected _sink = new AsyncByteQueue();\n    protected _schema: Schema | null = null;\n    protected _dictionaryBlocks: FileBlock[] = [];\n    protected _recordBatchBlocks: FileBlock[] = [];\n    protected _dictionaryDeltaOffsets = new Map<number, number>();\n\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync: any = false) {\n        return this._sink.toString(sync) as Promise<string> | string;\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync: any = false) {\n        return this._sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\n    }\n\n    public writeAll(input: Table<T> | Iterable<RecordBatch<T>>): this;\n    public writeAll(input: AsyncIterable<RecordBatch<T>>): Promise<this>;\n    public writeAll(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        if (isPromise<any>(input)) {\n            return input.then((x) => this.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, <any> input);\n    }\n\n    public get closed() { return this._sink.closed; }\n    public [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    public toDOMStream(options?: ReadableDOMStreamOptions) { return this._sink.toDOMStream(options); }\n    public toNodeStream(options?: import('stream').ReadableOptions) { return this._sink.toNodeStream(options); }\n\n    public close() {\n        return this.reset()._sink.close();\n    }\n    public abort(reason?: any) {\n        return this.reset()._sink.abort(reason);\n    }\n    public finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this._sink, schema: Schema<T> | null = null) {\n\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\n            this._sink = sink as AsyncByteQueue;\n        } else {\n            this._sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\n            } else if (sink && isWritableNodeStream(sink)) {\n                this.toNodeStream({ objectMode: false }).pipe(sink);\n            }\n        }\n\n        if (this._started && this._schema) {\n            this._writeFooter(this._schema);\n        }\n\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        this._dictionaryDeltaOffsets = new Map();\n\n        if (!schema || !(schema.compareTo(this._schema))) {\n            if (schema === null) {\n                this._position = 0;\n                this._schema = null;\n            } else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n\n        return this;\n    }\n\n    public write(payload?: Table<T> | RecordBatch<T> | Iterable<RecordBatch<T>> | null) {\n\n        let schema: Schema<T> | null = null;\n\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        } else if (payload === null || payload === undefined) {\n            return this.finish() && undefined;\n        } else if (payload instanceof Table && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        }\n\n        if (schema && !schema.compareTo(this._schema)) {\n            if (this._started && this._autoDestroy) {\n                return this.close();\n            }\n            this.reset(this._sink, schema);\n        }\n\n        if (payload instanceof RecordBatch) {\n            if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\n                this._writeRecordBatch(payload);\n            }\n        } else if (payload instanceof Table) {\n            this.writeAll(payload.chunks);\n        } else if (isIterable(payload)) {\n            this.writeAll(payload);\n        }\n    }\n\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\n\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\n        const alignedSize = (flatbufferSize + prefixSize + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\n\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n\n        // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\n        if (!this._writeLegacyIpcFormat) {\n            this._write(Int32Array.of(-1));\n        }\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - prefixSize));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) { this._write(buffer); }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n\n    protected _write(chunk: ArrayBufferViewInput) {\n        if (this._started) {\n            const buffer = toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMessage(Message.from(schema));\n    }\n\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) {\n        // eos bytes\n        return this._writeLegacyIpcFormat\n            ? this._write(Int32Array.of(0))\n            : this._write(Int32Array.of(-1, 0));\n    }\n\n    protected _writeMagic() {\n        return this._write(MAGIC);\n    }\n\n    protected _writePadding(nBytes: number) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(batch);\n        const recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeDictionaries(batch)\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\n        let buffer: ArrayBufferView;\n        let size: number, padding: number;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        for (let [id, dictionary] of batch.dictionaries) {\n            let offset = this._dictionaryDeltaOffsets.get(id) || 0;\n            if (offset === 0 || (dictionary = dictionary.slice(offset)).length > 0) {\n                const chunks = 'chunks' in dictionary ? (dictionary as any).chunks : [dictionary];\n                for (const chunk of chunks) {\n                    this._writeDictionaryBatch(chunk, id, offset > 0);\n                    offset += chunk.length;\n                }\n            }\n        }\n        return this;\n    }\n}\n\n/** @ignore */\nexport class RecordBatchStreamWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): RecordBatchStreamWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any, options?: RecordBatchStreamWriterOptions) {\n        const writer = new RecordBatchStreamWriter<T>(options);\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n}\n\n/** @ignore */\nexport class RecordBatchFileWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any) {\n        const writer = new RecordBatchFileWriter<T>();\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    // @ts-ignore\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMagic()._writePadding(2);\n    }\n\n    protected _writeFooter(schema: Schema<T>) {\n        const buffer = Footer.encode(new Footer(\n            schema, MetadataVersion.V4,\n            this._recordBatchBlocks, this._dictionaryBlocks\n        ));\n        return super\n            ._writeFooter(schema) // EOS bytes for sequential readers\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n}\n\n/** @ignore */\nexport class RecordBatchJSONWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchJSONWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchJSONWriter<T>().writeAll(input as any);\n    }\n\n    private _recordBatches: RecordBatch[];\n    private _dictionaries: RecordBatch[];\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n        this._recordBatches = [];\n        this._dictionaries = [];\n    }\n\n    protected _writeMessage() { return this; }\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) { return this; }\n    protected _writeSchema(schema: Schema<T>) {\n        return this._write(`{\\n  \"schema\": ${\n            JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2)\n        }`);\n    }\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        if (batch.dictionaries.size > 0) {\n            this._dictionaries.push(batch);\n        }\n        return this;\n    }\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        this._writeDictionaries(batch);\n        this._recordBatches.push(batch);\n        return this;\n    }\n    public close() {\n\n        if (this._dictionaries.length > 0) {\n            this._write(`,\\n  \"dictionaries\": [\\n`);\n            for (const batch of this._dictionaries) {\n                super._writeDictionaries(batch);\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._recordBatches.length > 0) {\n            for (let i = -1, n = this._recordBatches.length; ++i < n;) {\n                this._write(i === 0 ? `,\\n  \"batches\": [\\n    ` : `,\\n    `);\n                this._write(`${recordBatchToJSON(this._recordBatches[i])}`);\n                this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n\n        this._dictionaries = [];\n        this._recordBatches = [];\n\n        return super.close();\n    }\n}\n\n/** @ignore */\nfunction writeAll<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, input: Table<T> | Iterable<RecordBatch<T>>) {\n    let chunks = input as Iterable<RecordBatch<T>>;\n    if (input instanceof Table) {\n        chunks = input.chunks;\n        writer.reset(undefined, input.schema);\n    }\n    for (const batch of chunks) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nasync function writeAllAsync<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, batches: AsyncIterable<RecordBatch<T>>) {\n    for await (const batch of batches) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }: Field): object {\n    const assembler = new JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map(fieldToJSON),\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n\n/** @ignore */\nfunction dictionaryBatchToJSON(dictionary: Vector, id: number, isDelta = false) {\n    const field = new Field(`${id}`, dictionary.type, dictionary.nullCount > 0);\n    const columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n\n/** @ignore */\nfunction recordBatchToJSON(records: RecordBatch) {\n    return JSON.stringify({\n        'count': records.length,\n        'columns': JSONVectorAssembler.assemble(records)\n    }, null, 2);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Data, Buffers } from '../data';\nimport { Schema, Field } from '../schema';\nimport { Chunked } from '../vector/chunked';\nimport { RecordBatch } from '../recordbatch';\n\nconst noopBuf = new Uint8Array(0);\nconst nullBufs = (bitmapLength: number) => <unknown> [\n    noopBuf, noopBuf, new Uint8Array(bitmapLength), noopBuf\n] as Buffers<any>;\n\n/** @ignore */\nexport function ensureSameLengthData<T extends { [key: string]: DataType } = any>(\n    schema: Schema<T>,\n    chunks: Data<T[keyof T]>[],\n    batchLength = chunks.reduce((l, c) => Math.max(l, c.length), 0)\n) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let i = -1, n = chunks.length;\n    const fields = [...schema.fields];\n    const batchData = [] as Data<T[keyof T]>[];\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = chunks[i]) && data.length === batchLength) {\n            batchData[i] = data;\n        } else {\n            (field = fields[i]).nullable || (fields[i] = fields[i].clone({ nullable: true }) as Field<T[keyof T]>);\n            batchData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return [new Schema<T>(fields), batchLength, batchData] as [Schema<T>, number, Data<T[keyof T]>[]];\n}\n\n/** @ignore */\nexport function distributeColumnsIntoRecordBatches<T extends { [key: string]: DataType } = any>(columns: Column<T[keyof T]>[]): [Schema<T>, RecordBatch<T>[]] {\n    return distributeVectorsIntoRecordBatches<T>(new Schema<T>(columns.map(({ field }) => field)), columns);\n}\n\n/** @ignore */\nexport function distributeVectorsIntoRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, vecs: (Vector<T[keyof T]> | Chunked<T[keyof T]>)[]): [Schema<T>, RecordBatch<T>[]] {\n    return uniformlyDistributeChunksAcrossRecordBatches<T>(schema, vecs.map((v) => v instanceof Chunked ? v.chunks.map((c) => c.data) : [v.data]));\n}\n\n/** @ignore */\nfunction uniformlyDistributeChunksAcrossRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, columns: Data<T[keyof T]>[][]): [Schema<T>, RecordBatch<T>[]] {\n\n    const fields = [...schema.fields];\n    const batchArgs = [] as [number, Data<T[keyof T]>[]][];\n    const memo = { numBatches: columns.reduce((n, c) => Math.max(n, c.length), 0) };\n\n    let numBatches = 0, batchLength = 0;\n    let i: number = -1, numColumns = columns.length;\n    let child: Data<T[keyof T]>, childData: Data<T[keyof T]>[] = [];\n\n    while (memo.numBatches-- > 0) {\n\n        for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;) {\n            childData[i] = child = columns[i].shift()!;\n            batchLength = Math.min(batchLength, child ? child.length : batchLength);\n        }\n\n        if (isFinite(batchLength)) {\n            childData = distributeChildData(fields, batchLength, childData, columns, memo);\n            if (batchLength > 0) {\n                batchArgs[numBatches++] = [batchLength, childData.slice()];\n            }\n        }\n    }\n    return [\n        schema = new Schema<T>(fields, schema.metadata),\n        batchArgs.map((xs) => new RecordBatch(schema, ...xs))\n    ];\n}\n\n/** @ignore */\nfunction distributeChildData<T extends { [key: string]: DataType } = any>(fields: Field<T[keyof T]>[], batchLength: number, childData: Data<T[keyof T]>[], columns: Data<T[keyof T]>[][], memo: { numBatches: number }) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let length = 0, i = -1, n = columns.length;\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = childData[i]) && ((length = data.length) >= batchLength)) {\n            if (length === batchLength) {\n                childData[i] = data;\n            } else {\n                childData[i] = data.slice(0, batchLength);\n                data = data.slice(batchLength, length - batchLength);\n                memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(data));\n            }\n        } else {\n            (field = fields[i]).nullable || (fields[i] = field.clone({ nullable: true }) as Field<T[keyof T]>);\n            childData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return childData;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { VectorType as V } from '../interfaces';\nimport { AbstractVector, Vector, Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\nexport interface BaseVector<T extends DataType = any> extends Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n    slice(begin?: number, end?: number): V<T>;\n    concat(...others: Vector<T>[]): Chunked<T>;\n    clone<R extends DataType = T>(data: Data<R>, children?: Vector<R>[]): V<R>;\n}\n\n/** @ignore */\nexport abstract class BaseVector<T extends DataType = any> extends AbstractVector<T>\n    implements Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n\n    protected _children?: Vector[];\n\n    constructor(data: Data<T>, children?: Vector[]) {\n        super();\n        this._children = children;\n        this.numChildren = data.childData.length;\n        this._bindDataAccessors(this.data = data);\n    }\n\n    public readonly data: Data<T>;\n    public readonly numChildren: number;\n\n    public get type() { return this.data.type; }\n    public get typeId() { return this.data.typeId; }\n    public get length() { return this.data.length; }\n    public get offset() { return this.data.offset; }\n    public get stride() { return this.data.stride; }\n    public get nullCount() { return this.data.nullCount; }\n    public get byteLength() { return this.data.byteLength; }\n    public get VectorName() { return `${Type[this.typeId]}Vector`; }\n\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n\n    public get values() { return this.data.values; }\n    public get typeIds() { return this.data.typeIds; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n\n    public get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n\n    public clone<R extends DataType = T>(data: Data<R>, children = this._children) {\n        return Vector.new<R>(data, children) as any;\n    }\n\n    public concat(...others: Vector<T>[]) {\n        return Chunked.concat<T>(this, ...others);\n    }\n\n    public slice(begin?: number, end?: number) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public isValid(index: number): boolean {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren ? null : (\n            (this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new<R>(this.data.childData[index] as Data<R>))\n        ) as Vector<R>;\n    }\n\n    public toJSON(): any { return [...this]; }\n\n    protected _sliceInternal(self: this, begin: number, end: number) {\n        return self.clone(self.data.slice(begin, end - begin), null!);\n    }\n\n    // @ts-ignore\n    protected _bindDataAccessors(data: Data<T>) {\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n}\n\n(BaseVector.prototype as any)[Symbol.isConcatSpreadable] = true;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\n\n/** @ignore */\nexport class BinaryVector extends BaseVector<Binary> {\n    public asUtf8() {\n        return Vector.new(this.data.clone(new Utf8()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class BoolVector extends BaseVector<Bool> {\n    public static from<TNull = any>(input: Iterable<boolean | TNull>): BoolVector;\n    public static from<TNull = any>(input: AsyncIterable<boolean | TNull>): Promise<BoolVector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Bool, TNull>): Chunked<Bool>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Bool, TNull>): Promise<Chunked<Bool>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<boolean | TNull> | AsyncIterable<boolean | TNull> | VectorBuilderOptions<Bool, TNull> | VectorBuilderOptionsAsync<Bool, TNull>) {\n        return vectorFromValuesWithType(() => new Bool(), input);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DateUnit } from '../enum';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Date_, DateDay, DateMillisecond  } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends Date_> = [Iterable<Date>, T['unit']];\n\n/** @ignore */\nexport class DateVector<T extends Date_ = Date_> extends BaseVector<T> {\n    public static from<T extends DateUnit.DAY>(...args: FromArgs<DateDay>): V<DateDay>;\n    public static from<T extends DateUnit.MILLISECOND>(...args: FromArgs<DateMillisecond>): V<DateMillisecond>;\n    public static from<T extends Date_, TNull = any>(input: Iterable<Date | TNull>): V<T>;\n    public static from<T extends Date_, TNull = any>(input: AsyncIterable<Date | TNull>): Promise<V<T>>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Date_, TNull = any>(...args: FromArgs<T> | [Iterable<Date | TNull> | AsyncIterable<Date | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>]) {\n        if (args.length === 2) {\n            return vectorFromValuesWithType(() => args[1] === DateUnit.DAY ? new DateDay() : new DateMillisecond() as T, args[0]);\n        }\n        return vectorFromValuesWithType(() => new DateMillisecond() as T, args[0]);\n    }\n}\n\n/** @ignore */\nexport class DateDayVector extends DateVector<DateDay> {}\n\n/** @ignore */\nexport class DateMillisecondVector extends DateVector<DateMillisecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { BaseVector } from './base';\n\n/** @ignore */\nexport class DecimalVector extends BaseVector<Decimal> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { DataType, Dictionary, TKeys } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends DataType = any, TKey extends TKeys = TKeys> = [Vector<T>, TKey, ArrayLike<number> | TKey['TArray']];\n\n/** @ignore */\nexport class DictionaryVector<T extends DataType = any, TKey extends TKeys = TKeys> extends BaseVector<Dictionary<T, TKey>> {\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: FromArgs<T, TKey>): V<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptions<Dictionary<T, TKey>>): Vector<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptionsAsync<Dictionary<T, TKey>>): Promise<Vector<Dictionary<T, TKey>>>;\n    /** @nocollapse */\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: any[]) {\n        if (args.length === 3) {\n            const [values, indices, keys] = args as FromArgs<T, TKey>;\n            const type = new Dictionary(values.type, indices, null, null);\n            return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys, values));\n        }\n        return vectorFromValuesWithType(() => args[0].type, args[0]);\n    }\n\n    constructor(data: Data<Dictionary<T, TKey>>) {\n        super(data);\n        this.indices = Vector.new(data.clone(this.type.indices));\n    }\n\n    public readonly indices: V<TKey>;\n\n    public get dictionary() { return <Vector<T>> this.data.dictionary; }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n    public getKey(idx: number): TKey['TValue'] | null { return this.indices.get(idx); }\n    public getValue(key: number): T['TValue'] | null { return this.dictionary.get(key); }\n    public setKey(idx: number, key: TKey['TValue'] | null) { return this.indices.set(idx, key); }\n    public setValue(key: number, value: T['TValue'] | null) { return this.dictionary.set(key, value); }\n}\n\n(DictionaryVector.prototype as any).indices = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { FixedSizeBinary } from '../type';\n\n/** @ignore */\nexport class FixedSizeBinaryVector extends BaseVector<FixedSizeBinary> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, FixedSizeList } from '../type';\n\n/** @ignore */\nexport class FixedSizeListVector<T extends DataType = any> extends BaseVector<FixedSizeList<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Float, Float16, Float32, Float64, FloatArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor } from '../interfaces';\n\n/** @ignore */\ntype FloatVectorConstructors =\n    typeof FloatVector   |\n    typeof Float16Vector |\n    typeof Float32Vector |\n    typeof Float64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Float, TNull = any> =\n    FloatArray                          |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FloatArrayCtor = TypedArrayConstructor<FloatArray>;\n\n/** @ignore */\nexport class FloatVector<T extends Float = Float> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof FloatVector, input: Uint16Array): Float16Vector;\n    public static from(this: typeof FloatVector, input: Float32Array): Float32Vector;\n    public static from(this: typeof FloatVector, input: Float64Array): Float64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Float16Vector,  input: FromInput<Float16, TNull>): Float16Vector;\n    public static from<TNull = any>(this: typeof Float32Vector,  input: FromInput<Float32, TNull>): Float32Vector;\n    public static from<TNull = any>(this: typeof Float64Vector,  input: FromInput<Float64, TNull>): Float64Vector;\n\n    // Not zero-copy\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Float, TNull = any>(this: FloatVectorConstructors, input: FromInput<T, TNull>) {\n\n        let ArrowType = vectorTypeToDataType(this);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor as FloatArrayCtor) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // FloatVector.from with a TypedArray, e.g. `FloatVector.from(new Float32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is Float16 but the input type isn't a Uint16Array,\n                // let the Float16Builder handle casting the input values to Uint16s.\n                if (!convertTo16Bit(ArrowType, input.constructor)) {\n                    return Vector.new(Data.Float(type, 0, length, 0, null, input as FloatArray));\n                }\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer float type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized FloatVector input');\n    }\n}\n\n/** @ignore */\nexport class Float16Vector extends FloatVector<Float16> {\n    // Since JS doesn't have half floats, `toArray()` returns a zero-copy slice\n    // of the underlying Uint16Array data. This behavior ensures we don't incur\n    // extra compute or copies if you're calling `toArray()` in order to create\n    // a buffer for something like WebGL. Buf if you're using JS and want typed\n    // arrays of 4-to-8-byte precision, these methods will enumerate the values\n    // and clamp to the desired byte lengths.\n    public toFloat32Array() { return new Float32Array(this as Iterable<number>); }\n    public toFloat64Array() { return new Float64Array(this as Iterable<number>); }\n}\n\n/** @ignore */\nexport class Float32Vector extends FloatVector<Float32> {}\n/** @ignore */\nexport class Float64Vector extends FloatVector<Float64> {}\n\nconst convertTo16Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Float16) && (dataCtor !== Uint16Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: FloatArrayCtor) => {\n    switch (ctor) {\n        case Uint16Array:    return Float16;\n        case Float32Array:   return Float32;\n        case Float64Array:   return Float64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: FloatVectorConstructors) => {\n    switch (ctor) {\n        case Float16Vector: return Float16;\n        case Float32Vector: return Float32;\n        case Float64Vector: return Float64;\n        default: return null;\n    }\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\n/** @ignore */\nexport class IntervalVector<T extends Interval = Interval> extends BaseVector<T> {}\n/** @ignore */\nexport class IntervalDayTimeVector extends IntervalVector<IntervalDayTime> {}\n/** @ignore */\nexport class IntervalYearMonthVector extends IntervalVector<IntervalYearMonth> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { BigInt64Array, BigUint64Array } from '../util/compat';\nimport { toBigInt64Array, toBigUint64Array } from '../util/buffer';\nimport { Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, IntArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor, BigIntArrayConstructor, BigIntArray } from '../interfaces';\n\n/** @ignore */\ntype IntVectorConstructors =\n    typeof IntVector    |\n    typeof Int8Vector   |\n    typeof Int16Vector  |\n    typeof Int32Vector  |\n    typeof Uint8Vector  |\n    typeof Uint16Vector |\n    typeof Uint32Vector |\n    typeof Int64Vector  |\n    typeof Uint64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Int, TNull = any> =\n    IntArray | BigIntArray              |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FromArgs<T extends Int, TNull = any> = [FromInput<T, TNull>, boolean?];\n\n/** @ignore */\ntype IntArrayCtor = TypedArrayConstructor<IntArray> | BigIntArrayConstructor<BigIntArray>;\n\n/** @ignore */\nexport class IntVector<T extends Int = Int> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof IntVector, input: Int8Array): Int8Vector;\n    public static from(this: typeof IntVector, input: Int16Array): Int16Vector;\n    public static from(this: typeof IntVector, input: Int32Array): Int32Vector;\n    public static from(this: typeof IntVector, input: BigInt64Array): Int64Vector;\n    public static from(this: typeof IntVector, input: Int32Array, is64bit: true): Int64Vector;\n    public static from(this: typeof IntVector, input: Uint8Array): Uint8Vector;\n    public static from(this: typeof IntVector, input: Uint16Array): Uint16Vector;\n    public static from(this: typeof IntVector, input: Uint32Array): Uint32Vector;\n    public static from(this: typeof IntVector, input: BigUint64Array): Uint64Vector;\n    public static from(this: typeof IntVector, input: Uint32Array, is64bit: true): Uint64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Int8Vector,   input: FromInput<Int8, TNull>): Int8Vector;\n    public static from<TNull = any>(this: typeof Int16Vector,  input: FromInput<Int16, TNull>): Int16Vector;\n    public static from<TNull = any>(this: typeof Int32Vector,  input: FromInput<Int32, TNull>): Int32Vector;\n    public static from<TNull = any>(this: typeof Int64Vector,  input: FromInput<Int64, TNull>): Int64Vector;\n    public static from<TNull = any>(this: typeof Uint8Vector,  input: FromInput<Uint8, TNull>): Uint8Vector;\n    public static from<TNull = any>(this: typeof Uint16Vector, input: FromInput<Uint16, TNull>): Uint16Vector;\n    public static from<TNull = any>(this: typeof Uint32Vector, input: FromInput<Uint32, TNull>): Uint32Vector;\n    public static from<TNull = any>(this: typeof Uint64Vector, input: FromInput<Uint64, TNull>): Uint64Vector;\n\n    // Not zero-copy\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Int, TNull = any>(this: IntVectorConstructors, ...args: FromArgs<T, TNull>) {\n\n        let [input, is64bit = false] = args;\n        let ArrowType = vectorTypeToDataType(this, is64bit);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor as IntArrayCtor, is64bit) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // IntVector.from with a TypedArray, e.g. `IntVector.from(new Int32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is 64bit but the input type is 32bit pairs, update the logical length\n                if (convert32To64Bit(ArrowType, input.constructor)) {\n                    length *= 0.5;\n                }\n                return Vector.new(Data.Int(type, 0, length, 0, null, input as IntArray));\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer integer type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized IntVector input');\n    }\n}\n\n/** @ignore */\nexport class Int8Vector extends IntVector<Int8> {}\n/** @ignore */\nexport class Int16Vector extends IntVector<Int16> {}\n/** @ignore */\nexport class Int32Vector extends IntVector<Int32> {}\n/** @ignore */\nexport class Int64Vector extends IntVector<Int64> {\n    public toBigInt64Array() {\n        return toBigInt64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigInt64Array;\n    public get values64(): BigInt64Array {\n        return this._values64 || (this._values64 = this.toBigInt64Array());\n    }\n}\n\n/** @ignore */\nexport class Uint8Vector extends IntVector<Uint8> {}\n/** @ignore */\nexport class Uint16Vector extends IntVector<Uint16> {}\n/** @ignore */\nexport class Uint32Vector extends IntVector<Uint32> {}\n/** @ignore */\nexport class Uint64Vector extends IntVector<Uint64> {\n    public toBigUint64Array() {\n        return toBigUint64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigUint64Array;\n    public get values64(): BigUint64Array {\n        return this._values64 || (this._values64 = this.toBigUint64Array());\n    }\n}\n\nconst convert32To64Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Int64 || typeCtor === Uint64) &&\n           (dataCtor === Int32Array || dataCtor === Uint32Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: IntArrayCtor, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Array:      return Int8;\n        case Int16Array:     return Int16;\n        case Int32Array:     return is64bit ? Int64 : Int32;\n        case BigInt64Array:  return Int64;\n        case Uint8Array:     return Uint8;\n        case Uint16Array:    return Uint16;\n        case Uint32Array:    return is64bit ? Uint64 : Uint32;\n        case BigUint64Array: return Uint64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: IntVectorConstructors, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Vector:   return Int8;\n        case Int16Vector:  return Int16;\n        case Int32Vector:  return is64bit ? Int64 : Int32;\n        case Int64Vector:  return Int64;\n        case Uint8Vector:  return Uint8;\n        case Uint16Vector: return Uint16;\n        case Uint32Vector: return is64bit ? Uint64 : Uint32;\n        case Uint64Vector: return Uint64;\n        default: return null;\n    }\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, List } from '../type';\n\n/** @ignore */\nexport class ListVector<T extends DataType = any> extends BaseVector<List<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MapRow } from './row';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { DataType, Map_, Struct, List } from '../type';\n\n/** @ignore */\nexport class MapVector<K extends DataType = any, V extends DataType = any> extends BaseVector<Map_<K, V>> {\n    public asList() {\n        const child = this.type.children[0] as Field<Struct<{ key: K, value: V }>>;\n        return Vector.new(this.data.clone(new List<Struct<{ key: K, value: V }>>(child)));\n    }\n    public bind(index: number): Map_<K, V>['TValue'] {\n        const child = this.getChildAt<Struct<{ key: K, value: V }>>(0);\n        const { [index]: begin, [index + 1]: end } = this.valueOffsets;\n        return new MapRow(child!.slice(begin, end));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { BaseVector } from './base';\n\n/** @ignore */\nexport class NullVector extends BaseVector<Null> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { StructRow } from './row';\nimport { BaseVector } from './base';\nimport { DataType, Struct } from '../type';\n\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */\nexport class StructVector<T extends { [key: string]: DataType } = any> extends BaseVector<Struct<T>> {\n    // @ts-ignore\n    private _row: StructRow<T>;\n    public bind(index: number): Struct<T>['TValue'] {\n        const proto = this._row || (this._row = new StructRow<T>(this));\n        const bound = Object.create(proto);\n        bound[kRowIndex] = index;\n        return bound;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\n/** @ignore */\nexport class TimestampVector<T extends Timestamp = Timestamp> extends BaseVector<T> {}\n/** @ignore */\nexport class TimestampSecondVector extends TimestampVector<TimestampSecond> {}\n/** @ignore */\nexport class TimestampMillisecondVector extends TimestampVector<TimestampMillisecond> {}\n/** @ignore */\nexport class TimestampMicrosecondVector extends TimestampVector<TimestampMicrosecond> {}\n/** @ignore */\nexport class TimestampNanosecondVector extends TimestampVector<TimestampNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\n/** @ignore */\nexport class TimeVector<T extends Time = Time> extends BaseVector<T> {}\n/** @ignore */\nexport class TimeSecondVector extends TimeVector<TimeSecond> {}\n/** @ignore */\nexport class TimeMillisecondVector extends TimeVector<TimeMillisecond> {}\n/** @ignore */\nexport class TimeMicrosecondVector extends TimeVector<TimeMicrosecond> {}\n/** @ignore */\nexport class TimeNanosecondVector extends TimeVector<TimeNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Union, DenseUnion, SparseUnion} from '../type';\n\n/** @ignore */\nexport class UnionVector<T extends Union = Union> extends BaseVector<T> {\n    public get typeIdToChildIndex() { return this.data.type.typeIdToChildIndex; }\n}\n\n/** @ignore */\nexport class DenseUnionVector extends UnionVector<DenseUnion> {\n    public get valueOffsets() { return this.data.valueOffsets!; }\n}\n\n/** @ignore */\nexport class SparseUnionVector extends UnionVector<SparseUnion> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class Utf8Vector extends BaseVector<Utf8> {\n    public static from<TNull = any>(input: Iterable<string | TNull>): Utf8Vector;\n    public static from<TNull = any>(input: AsyncIterable<string | TNull>): Promise<Utf8Vector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Utf8, TNull>): Chunked<Utf8>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Utf8, TNull>): Promise<Chunked<Utf8>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<string | TNull> | AsyncIterable<string | TNull> | VectorBuilderOptions<Utf8, TNull> | VectorBuilderOptionsAsync<Utf8, TNull>) {\n        return vectorFromValuesWithType(() => new Utf8(), input);\n    }\n    public asBinary() {\n        return Vector.new(this.data.clone(new Binary()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function partial0<T>(visit: (node: T) => any) {\n    return function(this: T) { return visit(this); };\n}\n\n/** @ignore */\nexport function partial1<T>(visit: (node: T, a: any) => any) {\n    return function(this: T, a: any) { return visit(this, a); };\n}\n\n/** @ignore */\nexport function partial2<T>(visit: (node: T, a: any, b: any) => any) {\n    return function(this: T, a: any, b: any) { return visit(this, a, b); };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { decodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { uint16ToFloat64 } from '../util/math';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface GetVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, index: number): T['TValue'];\n    visitMany<T extends VectorType>  (nodes: T[], indices: number[]): T['TValue'][];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    visitNull                 <T extends Null>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt                  <T extends Int>                  (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt16                <T extends Int16>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt32                <T extends Int32>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt64                <T extends Int64>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat                <T extends Float>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBinary               <T extends Binary>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitDate                 <T extends Date_>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>, index: number): T['TValue'];\n    visitTime                 <T extends Time>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>, index: number): T['TValue'];\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitList                 <T extends List>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitStruct               <T extends Struct>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUnion                <T extends Union>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>, index: number): T['TValue'];\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitInterval             <T extends Interval>             (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>, index: number): T['TValue'];\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>, index: number): T['TValue'];\n}\n\n/** @ignore */\nexport class GetVisitor extends Visitor {}\n\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\n/** @ignore */\nconst getNull = <T extends Null>(_vector: VectorType<T>, _index: number): T['TValue'] => null;\n/** @ignore */\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null as any;\n};\n\n/** @ignore */\nconst getBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\n/** @ignore */\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */\ntype Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst getDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number): T['TValue'] => uint16ToFloat64(values[stride * index]);\n/** @ignore */\nconst getBigInts         = <T extends Numeric2X>({ stride, values, type }: VectorType<T>, index: number): T['TValue'] => <any> BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n/** @ignore */\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\n/** @ignore */\nconst getBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = <T extends Int>(vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.bitWidth < 64\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getBigInts(vector as VectorType<Numeric2X>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = <T extends Float> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.precision !== Precision.HALF\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getFloat16(vector as VectorType<Float16>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = <T extends Date_> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.unit === DateUnit.DAY\n        ? getDateDay(vector as VectorType<DateDay>, index)\n        : getDateMillisecond(vector as VectorType<DateMillisecond>, index)\n);\n\n/** @ignore */\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as VectorType<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/** @ignore */\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/* istanbul ignore next */\n/** @ignore */\nconst getTime            = <T extends Time>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as VectorType<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as VectorType<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as VectorType<TimeNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number): T['TValue'] => BN.decimal(values.subarray(4 * index, 4 * (index + 1)));\n\n/** @ignore */\nconst getList = <T extends List>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\n};\n\n/** @ignore */\nconst getMap = <T extends Map_>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/** @ignore */\nconst getStruct = <T extends Struct>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector as VectorType<DenseUnion>, index) :\n        getSparseUnion(vector as VectorType<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n\n/** @ignore */\nconst getSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(index) : null;\n};\n\n/** @ignore */\nconst getDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.getValue(vector.getKey(index)!);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = <T extends Interval>(vector: VectorType<T>, index: number): T['TValue'] =>\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(vector as VectorType<IntervalDayTime>, index)\n        : getIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index);\n\n/** @ignore */\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n\n/** @ignore */\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n\n/** @ignore */\nconst getFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\n};\n\nGetVisitor.prototype.visitNull                 =                 getNull;\nGetVisitor.prototype.visitBool                 =                 getBool;\nGetVisitor.prototype.visitInt                  =                  getInt;\nGetVisitor.prototype.visitInt8                 =              getNumeric;\nGetVisitor.prototype.visitInt16                =              getNumeric;\nGetVisitor.prototype.visitInt32                =              getNumeric;\nGetVisitor.prototype.visitInt64                =              getBigInts;\nGetVisitor.prototype.visitUint8                =              getNumeric;\nGetVisitor.prototype.visitUint16               =              getNumeric;\nGetVisitor.prototype.visitUint32               =              getNumeric;\nGetVisitor.prototype.visitUint64               =              getBigInts;\nGetVisitor.prototype.visitFloat                =                getFloat;\nGetVisitor.prototype.visitFloat16              =              getFloat16;\nGetVisitor.prototype.visitFloat32              =              getNumeric;\nGetVisitor.prototype.visitFloat64              =              getNumeric;\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\nGetVisitor.prototype.visitBinary               =               getBinary;\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\nGetVisitor.prototype.visitDate                 =                 getDate;\nGetVisitor.prototype.visitDateDay              =              getDateDay;\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\nGetVisitor.prototype.visitTime                 =                 getTime;\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\nGetVisitor.prototype.visitDecimal              =              getDecimal;\nGetVisitor.prototype.visitList                 =                 getList;\nGetVisitor.prototype.visitStruct               =               getStruct;\nGetVisitor.prototype.visitUnion                =                getUnion;\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\nGetVisitor.prototype.visitDictionary           =           getDictionary;\nGetVisitor.prototype.visitInterval             =             getInterval;\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\nGetVisitor.prototype.visitMap                  =                  getMap;\n\n/** @ignore */\nexport const instance = new GetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { getBool, iterateBits } from '../util/bit';\nimport { createElementComparator } from '../util/vector';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface IndexOfVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, value: T['TValue'] | null, index?: number): number;\n    visitMany <T extends VectorType>  (nodes: T[], values: (T['TValue'] | null)[], indices: (number | undefined)[]): number[];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, value: VectorType<T>['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, value:         T['TValue'] | null, index?: number) => number;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitList                 <T extends List>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n}\n\n/** @ignore */\nexport class IndexOfVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullIndexOf(vector: VectorType<Null>, searchElement?: null) {\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && vector.length > 0 ? 0 : -1;\n}\n\n/** @ignore */\nfunction indexOfNull<T extends DataType>(vector: VectorType<T>, fromIndex?: number): number {\n    const { nullBitmap } = vector;\n    if (!nullBitmap || vector.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, getBool)) {\n        if (!isValid) { return i; }\n        ++i;\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfValue<T extends DataType>(vector: VectorType<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfUnion<T extends DataType>(vector: VectorType<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    // Unions are special -- they do have a nullBitmap, but so can their children.\n    // If the searchElement is null, we don't know whether it came from the Union's\n    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,\n    // since that will report the wrong index if a child has a null before the Union.\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nIndexOfVisitor.prototype.visitNull                 =  nullIndexOf;\nIndexOfVisitor.prototype.visitBool                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt                  = indexOfValue;\nIndexOfVisitor.prototype.visitInt8                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt16                = indexOfValue;\nIndexOfVisitor.prototype.visitInt32                = indexOfValue;\nIndexOfVisitor.prototype.visitInt64                = indexOfValue;\nIndexOfVisitor.prototype.visitUint8                = indexOfValue;\nIndexOfVisitor.prototype.visitUint16               = indexOfValue;\nIndexOfVisitor.prototype.visitUint32               = indexOfValue;\nIndexOfVisitor.prototype.visitUint64               = indexOfValue;\nIndexOfVisitor.prototype.visitFloat                = indexOfValue;\nIndexOfVisitor.prototype.visitFloat16              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat32              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat64              = indexOfValue;\nIndexOfVisitor.prototype.visitUtf8                 = indexOfValue;\nIndexOfVisitor.prototype.visitBinary               = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeBinary      = indexOfValue;\nIndexOfVisitor.prototype.visitDate                 = indexOfValue;\nIndexOfVisitor.prototype.visitDateDay              = indexOfValue;\nIndexOfVisitor.prototype.visitDateMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestamp            = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampSecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampNanosecond  = indexOfValue;\nIndexOfVisitor.prototype.visitTime                 = indexOfValue;\nIndexOfVisitor.prototype.visitTimeSecond           = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMicrosecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeNanosecond       = indexOfValue;\nIndexOfVisitor.prototype.visitDecimal              = indexOfValue;\nIndexOfVisitor.prototype.visitList                 = indexOfValue;\nIndexOfVisitor.prototype.visitStruct               = indexOfValue;\nIndexOfVisitor.prototype.visitUnion                = indexOfValue;\nIndexOfVisitor.prototype.visitDenseUnion           = indexOfUnion;\nIndexOfVisitor.prototype.visitSparseUnion          = indexOfUnion;\nIndexOfVisitor.prototype.visitDictionary           = indexOfValue;\nIndexOfVisitor.prototype.visitInterval             = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalDayTime      = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalYearMonth    = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeList        = indexOfValue;\nIndexOfVisitor.prototype.visitMap                  = indexOfValue;\n\n/** @ignore */\nexport const instance = new IndexOfVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { iterateBits } from '../util/bit';\nimport { instance as getVisitor } from './get';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface IteratorVisitor extends Visitor {\n    visit<T extends VectorType>(node: T): IterableIterator<T['TValue'] | null>;\n    visitMany <T extends VectorType>(nodes: T[]): IterableIterator<T['TValue'] | null>[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    visitNull                 <T extends Null>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt                  <T extends Int>                  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt16                <T extends Int16>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt32                <T extends Int32>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt64                <T extends Int64>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat                <T extends Float>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBinary               <T extends Binary>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDate                 <T extends Date_>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTime                 <T extends Time>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitList                 <T extends List>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitStruct               <T extends Struct>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUnion                <T extends Union>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInterval             <T extends Interval>             (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n}\n\n/** @ignore */\nexport class IteratorVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullableIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n    const getFn = getVisitor.getVisitFn(vector);\n    return iterateBits<T['TValue'] | null>(\n        vector.nullBitmap, vector.offset, vector.length, vector,\n        (vec: VectorType<T>, idx: number, nullByte: number, nullBit: number) =>\n            ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null\n    );\n}\n\n/** @ignore */\nfunction vectorIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n\n    // If nullable, iterate manually\n    if (vector.nullCount > 0) {\n        return nullableIterator<T>(vector);\n    }\n\n    const { type, typeId, length } = vector;\n\n    // Fast case, defer to native iterators if possible\n    if (vector.stride === 1 && (\n        (typeId === Type.Timestamp) ||\n        (typeId === Type.Int && (type as Int).bitWidth !== 64) ||\n        (typeId === Type.Time && (type as Time).bitWidth !== 64) ||\n        (typeId === Type.Float && (type as Float).precision > 0 /* Precision.HALF */)\n    )) {\n        return vector.values.subarray(0, length)[Symbol.iterator]();\n    }\n\n    // Otherwise, iterate manually\n    return (function* (getFn) {\n        for (let index = -1; ++index < length;) {\n            yield getFn(vector, index);\n        }\n    })(getVisitor.getVisitFn(vector));\n}\n\nIteratorVisitor.prototype.visitNull                 = vectorIterator;\nIteratorVisitor.prototype.visitBool                 = vectorIterator;\nIteratorVisitor.prototype.visitInt                  = vectorIterator;\nIteratorVisitor.prototype.visitInt8                 = vectorIterator;\nIteratorVisitor.prototype.visitInt16                = vectorIterator;\nIteratorVisitor.prototype.visitInt32                = vectorIterator;\nIteratorVisitor.prototype.visitInt64                = vectorIterator;\nIteratorVisitor.prototype.visitUint8                = vectorIterator;\nIteratorVisitor.prototype.visitUint16               = vectorIterator;\nIteratorVisitor.prototype.visitUint32               = vectorIterator;\nIteratorVisitor.prototype.visitUint64               = vectorIterator;\nIteratorVisitor.prototype.visitFloat                = vectorIterator;\nIteratorVisitor.prototype.visitFloat16              = vectorIterator;\nIteratorVisitor.prototype.visitFloat32              = vectorIterator;\nIteratorVisitor.prototype.visitFloat64              = vectorIterator;\nIteratorVisitor.prototype.visitUtf8                 = vectorIterator;\nIteratorVisitor.prototype.visitBinary               = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary      = vectorIterator;\nIteratorVisitor.prototype.visitDate                 = vectorIterator;\nIteratorVisitor.prototype.visitDateDay              = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp            = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond  = vectorIterator;\nIteratorVisitor.prototype.visitTime                 = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond           = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond       = vectorIterator;\nIteratorVisitor.prototype.visitDecimal              = vectorIterator;\nIteratorVisitor.prototype.visitList                 = vectorIterator;\nIteratorVisitor.prototype.visitStruct               = vectorIterator;\nIteratorVisitor.prototype.visitUnion                = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion           = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion          = vectorIterator;\nIteratorVisitor.prototype.visitDictionary           = vectorIterator;\nIteratorVisitor.prototype.visitInterval             = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime      = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth    = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList        = vectorIterator;\nIteratorVisitor.prototype.visitMap                  = vectorIterator;\n\n/** @ignore */\nexport const instance = new IteratorVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { instance as iteratorVisitor } from './iterator';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface ToArrayVisitor extends Visitor {\n    visit<T extends VectorType>(node: T): T['TArray'];\n    visitMany<T extends VectorType>(nodes: T[]): T['TArray'][];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => VectorType<T>['TArray'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => VectorType<T>['TArray'];\n    visitNull                                    <T extends Null>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitBool                                    <T extends Bool>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt                                     <T extends Int>                 (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt8                                    <T extends Int8>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt16                                   <T extends Int16>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt32                                   <T extends Int32>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt64                                   <T extends Int64>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint8                                   <T extends Uint8>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint16                                  <T extends Uint16>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint32                                  <T extends Uint32>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint64                                  <T extends Uint64>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat                                   <T extends Float>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat16                                 <T extends Float16>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat32                                 <T extends Float32>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat64                                 <T extends Float64>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUtf8                                    <T extends Utf8>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitBinary                                  <T extends Binary>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFixedSizeBinary                         <T extends FixedSizeBinary>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDate                                    <T extends Date_>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDateDay                                 <T extends DateDay>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDateMillisecond                         <T extends DateMillisecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestamp                               <T extends Timestamp>           (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampSecond                         <T extends TimestampSecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampMillisecond                    <T extends TimestampMillisecond>(vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampMicrosecond                    <T extends TimestampMicrosecond>(vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampNanosecond                     <T extends TimestampNanosecond> (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTime                                    <T extends Time>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeSecond                              <T extends TimeSecond>          (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeMillisecond                         <T extends TimeMillisecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeMicrosecond                         <T extends TimeMicrosecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeNanosecond                          <T extends TimeNanosecond>      (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDecimal                                 <T extends Decimal>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitList                <R extends DataType, T extends List<R>>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitStruct                                  <T extends Struct>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUnion                                   <T extends Union>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDenseUnion                              <T extends DenseUnion>          (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitSparseUnion                             <T extends SparseUnion>         (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDictionary          <R extends DataType, T extends Dictionary<R>>       (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInterval                                <T extends Interval>            (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitIntervalDayTime                         <T extends IntervalDayTime>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitIntervalYearMonth                       <T extends IntervalYearMonth>   (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFixedSizeList       <R extends DataType, T extends FixedSizeList<R>>    (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitMap                                     <T extends Map_>                (vector: VectorType<T>): VectorType<T>['TArray'];\n}\n\n/** @ignore */\nexport class ToArrayVisitor extends Visitor {}\n\n/** @ignore */\nfunction arrayOfVector<T extends DataType>(vector: VectorType<T>): T['TArray'] {\n\n    const { type, length, stride } = vector;\n\n    // Fast case, return subarray if possible\n    switch (type.typeId) {\n        case Type.Int:\n        case Type.Float: case Type.Decimal:\n        case Type.Time: case Type.Timestamp:\n            return vector.values.subarray(0, length * stride);\n    }\n\n    // Otherwise if not primitive, slow copy\n    return [...iteratorVisitor.visit(vector)] as T['TArray'];\n}\n\nToArrayVisitor.prototype.visitNull                 = arrayOfVector;\nToArrayVisitor.prototype.visitBool                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt                  = arrayOfVector;\nToArrayVisitor.prototype.visitInt8                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt16                = arrayOfVector;\nToArrayVisitor.prototype.visitInt32                = arrayOfVector;\nToArrayVisitor.prototype.visitInt64                = arrayOfVector;\nToArrayVisitor.prototype.visitUint8                = arrayOfVector;\nToArrayVisitor.prototype.visitUint16               = arrayOfVector;\nToArrayVisitor.prototype.visitUint32               = arrayOfVector;\nToArrayVisitor.prototype.visitUint64               = arrayOfVector;\nToArrayVisitor.prototype.visitFloat                = arrayOfVector;\nToArrayVisitor.prototype.visitFloat16              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat32              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat64              = arrayOfVector;\nToArrayVisitor.prototype.visitUtf8                 = arrayOfVector;\nToArrayVisitor.prototype.visitBinary               = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeBinary      = arrayOfVector;\nToArrayVisitor.prototype.visitDate                 = arrayOfVector;\nToArrayVisitor.prototype.visitDateDay              = arrayOfVector;\nToArrayVisitor.prototype.visitDateMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestamp            = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampSecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampNanosecond  = arrayOfVector;\nToArrayVisitor.prototype.visitTime                 = arrayOfVector;\nToArrayVisitor.prototype.visitTimeSecond           = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMicrosecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeNanosecond       = arrayOfVector;\nToArrayVisitor.prototype.visitDecimal              = arrayOfVector;\nToArrayVisitor.prototype.visitList                 = arrayOfVector;\nToArrayVisitor.prototype.visitStruct               = arrayOfVector;\nToArrayVisitor.prototype.visitUnion                = arrayOfVector;\nToArrayVisitor.prototype.visitDenseUnion           = arrayOfVector;\nToArrayVisitor.prototype.visitSparseUnion          = arrayOfVector;\nToArrayVisitor.prototype.visitDictionary           = arrayOfVector;\nToArrayVisitor.prototype.visitInterval             = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalDayTime      = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalYearMonth    = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeList        = arrayOfVector;\nToArrayVisitor.prototype.visitMap                  = arrayOfVector;\n\n/** @ignore */\nexport const instance = new ToArrayVisitor();\n","/* istanbul ignore file */\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Type, TimeUnit } from '../enum';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n} from '../type';\n\n/** @ignore */ const sum = (x: number, y: number) => x + y;\n/** @ignore */ const variableWidthColumnErrorMessage = (type: DataType) => `Cannot compute the byte width of variable-width column ${type}`;\n\n/** @ignore */\nexport interface ByteWidthVisitor extends Visitor {\n    visit<T extends DataType>(node: T): number;\n    visitMany<T extends DataType>(nodes: T[]): number[];\n    getVisitFn<T extends Type>    (node: T): (type: DataType<T>) => number;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (type: T) => number;\n}\n\n/** @ignore */\nexport class ByteWidthVisitor extends Visitor {\n    public visitNull            (____: Null            ) { return 0; }\n    public visitInt             (type: Int             ) { return type.bitWidth / 8; }\n    public visitFloat           (type: Float           ) { return type.ArrayType.BYTES_PER_ELEMENT; }\n    public visitBinary          (type: Binary          ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitUtf8            (type: Utf8            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitBool            (____: Bool            ) { return 1 / 8; }\n    public visitDecimal         (____: Decimal         ) { return 16; }\n    public visitDate            (type: Date_           ) { return (type.unit + 1) * 4; }\n    public visitTime            (type: Time            ) { return type.bitWidth / 8; }\n    public visitTimestamp       (type: Timestamp       ) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\n    public visitInterval        (type: Interval        ) { return (type.unit + 1) * 4; }\n    public visitList            (type: List            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitStruct          (type: Struct          ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitUnion           (type: Union           ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitFixedSizeBinary (type: FixedSizeBinary ) { return type.byteWidth; }\n    public visitFixedSizeList   (type: FixedSizeList   ) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\n    public visitMap             (type: Map_            ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitDictionary      (type: Dictionary      ) { return this.visit(type.indices); }\n    public visitFields          (fields: Field[]       ) { return (fields || []).map((field) => this.visit(field.type)); }\n    public visitSchema          (schema: Schema        ) { return this.visitFields(schema.fields).reduce(sum, 0); }\n}\n\n/** @ignore */\nexport const instance = new ByteWidthVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, VectorCtor } from '../interfaces';\n\nimport { BinaryVector } from '../vector/binary';\nimport { BoolVector } from '../vector/bool';\nimport { DateVector, DateDayVector, DateMillisecondVector } from '../vector/date';\nimport { DecimalVector } from '../vector/decimal';\nimport { DictionaryVector } from '../vector/dictionary';\nimport { FixedSizeBinaryVector } from '../vector/fixedsizebinary';\nimport { FixedSizeListVector } from '../vector/fixedsizelist';\nimport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from '../vector/float';\nimport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from '../vector/interval';\nimport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from '../vector/int';\nimport { ListVector } from '../vector/list';\nimport { MapVector } from '../vector/map';\nimport { NullVector } from '../vector/null';\nimport { StructVector } from '../vector/struct';\nimport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from '../vector/timestamp';\nimport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from '../vector/time';\nimport { UnionVector, DenseUnionVector, SparseUnionVector } from '../vector/union';\nimport { Utf8Vector } from '../vector/utf8';\n\n/** @ignore */\nexport interface GetVectorConstructor extends Visitor {\n    visit<T extends Type>(node: T): VectorCtor<T>;\n    visitMany <T extends Type>(nodes: T[]): VectorCtor<T>[];\n    getVisitFn<T extends Type>(node: T): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => VectorCtor<T>;\n}\n\n/** @ignore */\nexport class GetVectorConstructor extends Visitor {\n    public visitNull                 () { return NullVector; }\n    public visitBool                 () { return BoolVector; }\n    public visitInt                  () { return IntVector; }\n    public visitInt8                 () { return Int8Vector; }\n    public visitInt16                () { return Int16Vector; }\n    public visitInt32                () { return Int32Vector; }\n    public visitInt64                () { return Int64Vector; }\n    public visitUint8                () { return Uint8Vector; }\n    public visitUint16               () { return Uint16Vector; }\n    public visitUint32               () { return Uint32Vector; }\n    public visitUint64               () { return Uint64Vector; }\n    public visitFloat                () { return FloatVector; }\n    public visitFloat16              () { return Float16Vector; }\n    public visitFloat32              () { return Float32Vector; }\n    public visitFloat64              () { return Float64Vector; }\n    public visitUtf8                 () { return Utf8Vector; }\n    public visitBinary               () { return BinaryVector; }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryVector; }\n    public visitDate                 () { return DateVector; }\n    public visitDateDay              () { return DateDayVector; }\n    public visitDateMillisecond      () { return DateMillisecondVector; }\n    public visitTimestamp            () { return TimestampVector; }\n    public visitTimestampSecond      () { return TimestampSecondVector; }\n    public visitTimestampMillisecond () { return TimestampMillisecondVector; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondVector; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondVector; }\n    public visitTime                 () { return TimeVector; }\n    public visitTimeSecond           () { return TimeSecondVector; }\n    public visitTimeMillisecond      () { return TimeMillisecondVector; }\n    public visitTimeMicrosecond      () { return TimeMicrosecondVector; }\n    public visitTimeNanosecond       () { return TimeNanosecondVector; }\n    public visitDecimal              () { return DecimalVector; }\n    public visitList                 () { return ListVector; }\n    public visitStruct               () { return StructVector; }\n    public visitUnion                () { return UnionVector; }\n    public visitDenseUnion           () { return DenseUnionVector; }\n    public visitSparseUnion          () { return SparseUnionVector; }\n    public visitDictionary           () { return DictionaryVector; }\n    public visitInterval             () { return IntervalVector; }\n    public visitIntervalDayTime      () { return IntervalDayTimeVector; }\n    public visitIntervalYearMonth    () { return IntervalYearMonthVector; }\n    public visitFixedSizeList        () { return FixedSizeListVector; }\n    public visitMap                  () { return MapVector; }\n}\n\n/** @ignore */\nexport const instance = new GetVectorConstructor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\nexport { MapRow, StructRow } from './row';\n\nimport * as fn from '../util/fn';\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { isIterable, isAsyncIterable } from '../util/compat';\nimport { Builder, IterableBuilderOptions } from '../builder';\nimport { VectorType as V, VectorCtorArgs } from '../interfaces';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n\ndeclare module '../vector' {\n    namespace Vector {\n        export { newVector as new };\n        export { vectorFrom as from };\n    }\n}\n\ndeclare module './base' {\n    namespace BaseVector {\n        export { vectorFrom as from };\n    }\n    interface BaseVector<T extends DataType> {\n        get(index: number): T['TValue'] | null;\n        set(index: number, value: T['TValue'] | null): void;\n        indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n        toArray(): T['TArray'];\n        getByteWidth(): number;\n        [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    }\n}\n\n/** @nocollapse */\nVector.new = newVector;\n\n/** @nocollapse */\nVector.from = vectorFrom;\n\n/** @ignore */\nfunction newVector<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): V<T> {\n    return new (getVectorConstructor.getVisitFn<T>(data)())(data, ...args) as V<T>;\n}\n\n/** @ignore */\nexport interface VectorBuilderOptions<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: Iterable<T['TValue'] | TNull>; }\n/** @ignore */\nexport interface VectorBuilderOptionsAsync<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: AsyncIterable<T['TValue'] | TNull>; }\n\n/** @ignore */\nexport function vectorFromValuesWithType<T extends DataType, TNull = any>(newDataType: () => T, input: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    if (isIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as V<T>;\n    } else if (isAsyncIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as Promise<V<T>>;\n    }\n    const {\n        'values': values = [],\n        'type': type = newDataType(),\n        'nullValues': nullValues = [null, undefined],\n    } = { ...input };\n    return isIterable(values)\n        ? Vector.from({ nullValues, ...input, type } as VectorBuilderOptions<T, TNull>)\n        : Vector.from({ nullValues, ...input, type } as VectorBuilderOptionsAsync<T, TNull>);\n}\n\n/** @ignore */\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull>): Vector<T>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Vector<T>>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    const { 'values': values = [], ...options } = { 'nullValues': [null, undefined], ...input } as VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>;\n    if (isIterable<T['TValue'] | TNull>(values)) {\n        const chunks = [...Builder.throughIterable(options)(values)];\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    }\n    return (async (chunks: V<T>[]) => {\n        const transform = Builder.throughAsyncIterable(options);\n        for await (const chunk of transform(values)) {\n            chunks.push(chunk);\n        }\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    })([]);\n}\n\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\nBaseVector.prototype.get = function baseVectorGet<T extends DataType>(this: BaseVector<T>, index: number): T['TValue'] | null {\n    return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet<T extends DataType>(this: BaseVector<T>, index: number, value: T['TValue'] | null): void {\n    return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf<T extends DataType>(this: BaseVector<T>, value: T['TValue'] | null, fromIndex?: number): number {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray<T extends DataType>(this: BaseVector<T>): T['TArray'] {\n    return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth<T extends DataType>(this: BaseVector<T>): number {\n    return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator<T extends DataType>(this: BaseVector<T>): IterableIterator<T['TValue'] | null> {\n    return iteratorVisitor.visit(this);\n};\n\n(BaseVector.prototype as any)._bindDataAccessors = bindBaseVectorDataAccessors;\n\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number')\n    .filter((typeId) => typeId !== Type.NONE)\n    .forEach((typeId) => {\n        const VectorCtor = getVectorConstructor.visit(typeId);\n        VectorCtor.prototype['get'] = fn.partial1(getVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['set'] = fn.partial2(setVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['indexOf'] = fn.partial2(indexOfVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['toArray'] = fn.partial0(toArrayVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\n        VectorCtor.prototype[Symbol.iterator] = fn.partial0(iteratorVisitor.getVisitFn(typeId));\n    });\n\n/** @ignore */\nfunction partialType0<T extends Vector>(visit: (node: T['type']) => any) {\n    return function(this: T) { return visit(this.type); };\n}\n\n/** @ignore */\nfunction wrapNullableGet<T extends DataType, V extends Vector<T>, F extends (i: number) => any>(fn: F): (...args: Parameters<F>) => ReturnType<F> {\n    return function(this: V, i: number) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n\n/** @ignore */\nfunction wrapNullableSet<T extends DataType, V extends BaseVector<T>, F extends (i: number, a: any) => void>(fn: F): (...args: Parameters<F>) => void {\n    return function(this: V, i: number, a: any) {\n        if (setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\n            fn.call(this, i, a);\n        }\n    };\n}\n\n/** @ignore */\nfunction bindBaseVectorDataAccessors<T extends DataType>(this: BaseVector<T>) {\n    const nullBitmap = this.nullBitmap;\n    if (nullBitmap && nullBitmap.byteLength > 0) {\n        this.get = wrapNullableGet(this.get);\n        this.set = wrapNullableSet(this.set);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Column } from './column';\nimport { Schema, Field } from './schema';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from './recordbatch';\nimport { DataFrame } from './compute/dataframe';\nimport { RecordBatchReader } from './ipc/reader';\nimport { DataType, RowLike, Struct } from './type';\nimport { selectColumnArgs, selectArgs } from './util/args';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { isPromise, isIterable, isAsyncIterable } from './util/compat';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\nimport { distributeColumnsIntoRecordBatches, distributeVectorsIntoRecordBatches } from './util/recordbatch';\nimport { Vector, Chunked, StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = Data<T[keyof T]>[] | Vector<T[keyof T]>[];\ntype Columns<T extends { [key: string]: DataType }> = Column<T[keyof T]>[] | Column<T[keyof T]>[][];\n\nexport interface Table<T extends { [key: string]: DataType } = any> {\n\n    get(index: number): Struct<T>['TValue'];\n    [Symbol.iterator](): IterableIterator<RowLike<T>>;\n\n    slice(begin?: number, end?: number): Table<T>;\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    clone(chunks?: RecordBatch<T>[], offsets?: Uint32Array): Table<T>;\n\n    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    scanReverse(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    countBy(name: import('./compute/predicate').Col | string): import('./compute/dataframe').CountByResult;\n    filter(predicate: import('./compute/predicate').Predicate): import('./compute/dataframe').FilteredDataFrame<T>;\n}\n\nexport class Table<T extends { [key: string]: DataType } = any>\n    extends Chunked<Struct<T>>\n    implements DataFrame<T>,\n               Clonable<Table<T>>,\n               Sliceable<Table<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    /** @nocollapse */\n    public static empty<T extends { [key: string]: DataType } = {}>(schema = new Schema<T>([])) { return new Table<T>(schema, []); }\n\n    public static from(): Table<{}>;\n    public static from<T extends { [key: string]: DataType } = any>(source: RecordBatchReader<T>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg0): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg2): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg1): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg3): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg4): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg5): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: PromiseLike<RecordBatchReader<T>>): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(input?: any) {\n\n        if (!input) { return Table.empty(); }\n\n        if (typeof input === 'object') {\n            let table = isIterable(input['values']) ? tableFromIterable<T, TNull>(input)\n                 : isAsyncIterable(input['values']) ? tableFromAsyncIterable<T, TNull>(input)\n                                                    : null;\n            if (table !== null) { return table; }\n        }\n\n        let reader = RecordBatchReader.from<T>(input) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n\n        if (isPromise<RecordBatchReader<T>>(reader)) {\n            return (async () => await Table.from(await reader))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty() : new Table<T>(reader.schema, [...reader]);\n        }\n        return (async (opening) => {\n            const reader = await opening;\n            const schema = reader.schema;\n            const batches: RecordBatch[] = [];\n            if (schema) {\n                for await (let batch of reader) {\n                    batches.push(batch);\n                }\n                return new Table<T>(schema, batches);\n            }\n            return Table.empty();\n        })(reader.open());\n    }\n\n    /** @nocollapse */\n    public static async fromAsync<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArgs): Promise<Table<T>> {\n        return await Table.from<T>(source as any);\n    }\n\n    /** @nocollapse */\n    public static fromStruct<T extends { [key: string]: DataType } = any>(vector: Vector<Struct<T>>) {\n        return Table.new<T>(vector.data.childData as Data<T[keyof T]>[], vector.type.children);\n    }\n\n    /**\n     * @summary Create a new Table from a collection of Columns or Vectors,\n     * with an optional list of names or Fields.\n     *\n     *\n     * `Table.new` accepts an Object of\n     * Columns or Vectors, where the keys will be used as the field names\n     * for the Schema:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new({ i32: i32s, f32: f32s });\n     * assert(table.schema.fields[0].name === 'i32');\n     * ```\n     *\n     * It also accepts a a list of Vectors with an optional list of names or\n     * Fields for the resulting Schema. If the list is omitted or a name is\n     * missing, the numeric index of each Vector will be used as the name:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new([i32s, f32s], ['i32']);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === '1');\n     * ```\n     *\n     * If the supplied arguments are Columns, `Table.new` will infer the Schema\n     * from the Columns:\n     * ```ts\n     * const i32s = Column.new('i32', Int32Vector.from([1, 2, 3]));\n     * const f32s = Column.new('f32', Float32Vector.from([.1, .2, .3]));\n     * const table = Table.new(i32s, f32s);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === 'f32');\n     * ```\n     *\n     * If the supplied Vector or Column lengths are unequal, `Table.new` will\n     * extend the lengths of the shorter Columns, allocating additional bytes\n     * to represent the additional null slots. The memory required to allocate\n     * these additional bitmaps can be computed as:\n     * ```ts\n     * let additionalBytes = 0;\n     * for (let vec in shorter_vectors) {\n     *     additionalBytes += (((longestLength - vec.length) + 63) & ~63) >> 3;\n     * }\n     * ```\n     *\n     * For example, an additional null bitmap for one million null values would require\n     * 125,000 bytes (`((1e6 + 63) & ~63) >> 3`), or approx. `0.11MiB`\n     */\n    public static new<T extends { [key: string]: DataType } = any>(...columns: Columns<T>): Table<T>;\n    public static new<T extends VectorMap = any>(children: T): Table<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Table<T>;\n    /** @nocollapse */\n    public static new(...cols: any[]) {\n        return new Table(...distributeColumnsIntoRecordBatches(selectColumnArgs(cols)));\n    }\n\n    constructor(batches: RecordBatch<T>[]);\n    constructor(...batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, ...batches: RecordBatch<T>[]);\n    constructor(...args: any[]) {\n\n        let schema: Schema<T> = null!;\n\n        if (args[0] instanceof Schema) { schema = args.shift(); }\n\n        let chunks = selectArgs<RecordBatch<T>>(RecordBatch, args);\n\n        if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n        }\n\n        chunks[0] || (chunks[0] = new _InternalEmptyPlaceholderRecordBatch(schema));\n\n        super(new Struct(schema.fields), chunks);\n\n        this._schema = schema;\n        this._chunks = chunks;\n    }\n\n    protected _schema: Schema<T>;\n    // List of inner RecordBatches\n    protected _chunks: RecordBatch<T>[];\n    protected _children?: Column<T[keyof T]>[];\n\n    public get schema() { return this._schema; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get numCols() { return this._numChildren; }\n\n    public clone(chunks = this._chunks) {\n        return new Table<T>(this._schema, chunks);\n    }\n\n    public getColumn<R extends keyof T>(name: R): Column<T[R]> {\n        return this.getColumnAt(this.getColumnIndex(name)) as Column<T[R]>;\n    }\n    public getColumnAt<R extends DataType = any>(index: number): Column<R> | null {\n        return this.getChildAt(index);\n    }\n    public getColumnIndex<R extends keyof T>(name: R) {\n        return this._schema.fields.findIndex((f) => f.name === name);\n    }\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n        if (index < 0 || index >= this.numChildren) { return null; }\n        let field: Field<R>, child: Column<R>;\n        const fields = (this._schema as Schema<any>).fields;\n        const columns = this._children || (this._children = []) as Column[];\n        if (child = columns[index]) { return child as Column<R>; }\n        if (field = fields[index]) {\n            const chunks = this._chunks\n                .map((chunk) => chunk.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n        return null;\n    }\n\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        const Writer = !stream\n            ? RecordBatchFileWriter\n            : RecordBatchStreamWriter;\n        return Writer.writeAll(this).toUint8Array(true);\n    }\n    public count(): number {\n        return this._length;\n    }\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt<K>(...columnIndices);\n        return new Table(schema, this._chunks.map(({ length, data: { childData } }) => {\n            return new RecordBatch(schema, length, columnIndices.map((i) => childData[i]).filter(Boolean));\n        }));\n    }\n    public assign<R extends { [key: string]: DataType } = any>(other: Table<R>) {\n\n        const fields = this._schema.fields;\n        const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx) => {\n            const [indices, oldToNew] = memo;\n            const i = fields.findIndex((f) => f.name === f2.name);\n            ~i ? (oldToNew[i] = newIdx) : indices.push(newIdx);\n            return memo;\n        }, [[], []] as number[][]);\n\n        const schema = this._schema.assign(other.schema);\n        const columns = [\n            ...fields.map((_f, i, _fs, j = oldToNew[i]) =>\n                (j === undefined ? this.getColumnAt(i) : other.getColumnAt(j))!),\n            ...indices.map((i) => other.getColumnAt(i)!)\n        ].filter(Boolean) as Column<(T & R)[keyof T | keyof R]>[];\n\n        return new Table<T & R>(...distributeVectorsIntoRecordBatches<any>(schema, columns));\n    }\n}\n\nfunction tableFromIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptions<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return Table.fromStruct(StructVector.from(input as VectorBuilderOptions<Struct<T>, TNull>));\n    }\n    return null;\n}\n\nfunction tableFromAsyncIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return StructVector.from(input as VectorBuilderOptionsAsync<Struct<T>, TNull>).then((vector) => Table.fromStruct(vector));\n    }\n    return null;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Visitor } from './visitor';\nimport { Schema, Field } from './schema';\nimport { isIterable } from './util/compat';\nimport { Chunked } from './vector/chunked';\nimport { selectFieldArgs } from './util/args';\nimport { DataType, Struct, Dictionary } from './type';\nimport { ensureSameLengthData } from './util/recordbatch';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = (Data<T[keyof T]> | Vector<T[keyof T]>)[];\n\nexport interface RecordBatch<T extends { [key: string]: DataType } = any> {\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    slice(begin?: number, end?: number): RecordBatch<T>;\n    clone(data: Data<Struct<T>>, children?: Vector[]): RecordBatch<T>;\n}\n\nexport class RecordBatch<T extends { [key: string]: DataType } = any>\n    extends StructVector<T>\n    implements Clonable<RecordBatch<T>>,\n               Sliceable<RecordBatch<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull> | VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n        if (isIterable<(Struct<T>)['TValue'] | TNull>(options['values'])) {\n            return Table.from(options as VectorBuilderOptions<Struct<T>, TNull>);\n        }\n        return Table.from(options as VectorBuilderOptionsAsync<Struct<T>, TNull>);\n    }\n\n    public static new<T extends VectorMap = any>(children: T): RecordBatch<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): RecordBatch<T>;\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType } = any>(...args: any[]) {\n        const [fs, xs] = selectFieldArgs<T>(args);\n        const vs = xs.filter((x): x is Vector<T[keyof T]> => x instanceof Vector);\n        return new RecordBatch(...ensureSameLengthData(new Schema<T>(fs), vs.map((x) => x.data)));\n    }\n\n    protected _schema: Schema;\n    protected _dictionaries?: Map<number, Vector>;\n\n    constructor(schema: Schema<T>, length: number, children: (Data | Vector)[]);\n    constructor(schema: Schema<T>, data: Data<Struct<T>>, children?: Vector[]);\n    constructor(...args: any[]) {\n        let data: Data<Struct<T>>;\n        let schema = args[0] as Schema<T>;\n        let children: Vector[] | undefined;\n        if (args[1] instanceof Data) {\n            [, data, children] = (args as [any, Data<Struct<T>>, Vector<T[keyof T]>[]?]);\n        } else {\n            const fields = schema.fields as Field<T[keyof T]>[];\n            const [, length, childData] = args as [any, number, Data<T[keyof T]>[]];\n            data = Data.Struct(new Struct<T>(fields), 0, length, 0, null, childData);\n        }\n        super(data, children);\n        this._schema = schema;\n    }\n\n    public clone(data: Data<Struct<T>>, children = this._children) {\n        return new RecordBatch<T>(this._schema, data, children);\n    }\n\n    public concat(...others: Vector<Struct<T>>[]): Table<T> {\n        const schema = this._schema, chunks = Chunked.flatten(this, ...others);\n        return new Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));\n    }\n\n    public get schema() { return this._schema; }\n    public get numCols() { return this._schema.fields.length; }\n    public get dictionaries() {\n        return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt(...columnIndices);\n        const childData = columnIndices.map((i) => this.data.childData[i]).filter(Boolean);\n        return new RecordBatch<{ [key: string]: K }>(schema, this.length, childData);\n    }\n}\n\n/**\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\n * implementations to differentiate between a stream with valid zero-length\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\n * @see https://github.com/apache/arrow/pull/4373\n * @ignore\n * @private\n */\n/* tslint:disable:class-name */\nexport class _InternalEmptyPlaceholderRecordBatch<T extends { [key: string]: DataType } = any> extends RecordBatch<T> {\n    constructor(schema: Schema<T>) {\n        super(schema, 0, schema.fields.map((f) => Data.new(f.type, 0, 0, 0)));\n    }\n}\n\n/** @ignore */\nclass DictionaryCollector extends Visitor {\n    public dictionaries = new Map<number, Vector>();\n    public static collect<T extends RecordBatch>(batch: T) {\n        return new DictionaryCollector().visit(\n            batch.data, new Struct(batch.schema.fields)\n        ).dictionaries;\n    }\n    public visit(data: Data, type: DataType) {\n        if (DataType.isDictionary(type)) {\n            return this.visitDictionary(data, type);\n        } else {\n            data.childData.forEach((child, i) =>\n                this.visit(child, type.children[i].type));\n        }\n        return this;\n    }\n    public visitDictionary(data: Data, type: Dictionary) {\n        const dictionary = data.dictionary;\n        if (dictionary && dictionary.length > 0) {\n            this.dictionaries.set(type.id, dictionary);\n        }\n        return this;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport { Schema, Field } from '../schema';\nimport streamAdapters from '../io/adapters';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport {\n    FileHandle,\n    ArrowJSONLike,\n    ITERATOR_DONE,\n    ReadableInterop,\n} from '../io/interfaces';\nimport {\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding\n} from './message';\nimport {\n    isPromise,\n    isIterable, isAsyncIterable,\n    isIteratorResult, isArrowJSON,\n    isFileHandle, isFetchResponse,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */ export type FromArg0 = ArrowJSONLike;\n/** @ignore */ export type FromArg1 = PromiseLike<ArrowJSONLike>;\n/** @ignore */ export type FromArg2 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n/** @ignore */ export type FromArg3 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\n/** @ignore */ export type FromArg4 = Response | NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\n/** @ignore */ export type FromArg5 = FileHandle | PromiseLike<FileHandle> | PromiseLike<FromArg4>;\n/** @ignore */ export type FromArgs = FromArg0 | FromArg1 | FromArg2 | FromArg3 | FromArg4 | FromArg5;\n\n/** @ignore */ type OpenOptions = { autoDestroy?: boolean; };\n/** @ignore */ type RecordBatchReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n/** @ignore */ type AsyncRecordBatchReaders<T extends { [key: string]: DataType } = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\n/** @ignore */ type RecordBatchFileReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T>;\n/** @ignore */ type RecordBatchStreamReaders<T extends { [key: string]: DataType } = any> = RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T>;\n\nexport class RecordBatchReader<T extends { [key: string]: DataType } = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected _impl: RecordBatchReaderImpls<T>;\n    protected constructor(impl: RecordBatchReaderImpls<T>) {\n        super();\n        this._impl = impl;\n    }\n\n    public get closed() { return this._impl.closed; }\n    public get schema() { return this._impl.schema; }\n    public get autoDestroy() { return this._impl.autoDestroy; }\n    public get dictionaries() { return this._impl.dictionaries; }\n    public get numDictionaries() { return this._impl.numDictionaries; }\n    public get numRecordBatches() { return this._impl.numRecordBatches; }\n    public get footer() { return this._impl.isFile() ? this._impl.footer : null; }\n\n    public isSync(): this is RecordBatchReaders<T> { return this._impl.isSync(); }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return this._impl.isAsync(); }\n    public isFile(): this is RecordBatchFileReaders<T> { return this._impl.isFile(); }\n    public isStream(): this is RecordBatchStreamReaders<T> { return this._impl.isStream(); }\n\n    public next() {\n        return this._impl.next();\n    }\n    public throw(value?: any) {\n        return this._impl.throw(value);\n    }\n    public return(value?: any) {\n        return this._impl.return(value);\n    }\n    public cancel() {\n        return this._impl.cancel();\n    }\n    public reset(schema?: Schema<T> | null): this {\n        this._impl.reset(schema);\n        this._DOMStream = undefined;\n        this._nodeStream = undefined;\n        return this;\n    }\n    public open(options?: OpenOptions) {\n        const opening = this._impl.open(options);\n        return isPromise(opening) ? opening.then(() => this) : this;\n    }\n    public readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null> {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return (<IterableIterator<RecordBatch<T>>> this._impl)[Symbol.iterator]();\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return (<AsyncIterableIterator<RecordBatch<T>>> this._impl)[Symbol.asyncIterator]();\n    }\n    public toDOMStream() {\n        return streamAdapters.toDOMStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>));\n    }\n    public toNodeStream() {\n        return streamAdapters.toNodeStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>),\n            { objectMode: true });\n    }\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: ByteLengthQueuingStrategy,\n        // @ts-ignore\n        readableStrategy?: { autoDestroy: boolean }\n    ): { writable: WritableStream<Uint8Array>, readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg1): Promise<RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg2): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg4): Promise<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg5): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return fromArrowJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return fromFileHandle<T>(source);\n        } else if (isPromise<any>(source)) {\n            return (async () => await RecordBatchReader.from<any>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return fromByteStream<T>(new ByteStream(source));\n    }\n\n    public static readAll<T extends RecordBatchReader>(source: T): T extends RecordBatchReaders ? IterableIterator<T> : AsyncIterableIterator<T>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg0): IterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg1): AsyncIterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg2): IterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg3): AsyncIterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg4): AsyncIterableIterator<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg5): AsyncIterableIterator<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static readAll<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source as AsyncRecordBatchReaders<T>);\n        } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable<ArrayBufferViewInput>(source) || isIteratorResult(source)) {\n            return readAllSync<T>(source) as IterableIterator<RecordBatchReaders<T>>;\n        }\n        return readAllAsync<T>(source) as AsyncIterableIterator<RecordBatchReaders<T> | AsyncRecordBatchReaders<T>>;\n    }\n}\n\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n\n/** @ignore */\nexport class RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: RecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator]() { return (this._impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: AsyncRecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    public [Symbol.asyncIterator]() { return (this._impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n}\n/** @ignore */\nexport class RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    constructor(protected _impl: RecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    constructor(protected _impl: AsyncRecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n\n//\n// Now override the return types for each sync/async RecordBatchReader variant\n//\n\n/** @ignore */\nexport interface RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): this;\n    cancel(): void;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): Promise<this>;\n    cancel(): Promise<void>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n\n/** @ignore */\nexport interface RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\ntype RecordBatchReaderImpls<T extends { [key: string]: DataType } = any> =\n     RecordBatchJSONReaderImpl<T> |\n     RecordBatchFileReaderImpl<T> |\n     RecordBatchStreamReaderImpl<T> |\n     AsyncRecordBatchFileReaderImpl<T> |\n     AsyncRecordBatchStreamReaderImpl<T>;\n\n/** @ignore */\ninterface RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoDestroy: boolean;\n    dictionaries: Map<number, Vector>;\n\n    isFile(): this is RecordBatchFileReaders<T>;\n    isStream(): this is RecordBatchStreamReaders<T>;\n    isSync(): this is RecordBatchReaders<T>;\n    isAsync(): this is AsyncRecordBatchReaders<T>;\n\n    reset(schema?: Schema<T> | null): this;\n}\n\n/** @ignore */\ninterface RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): this;\n    cancel(): void;\n\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n\n    [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): Promise<this>;\n    cancel(): Promise<void>;\n\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n\n    [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\nabstract class RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> implements RecordBatchReaderImpl<T> {\n\n    // @ts-ignore\n    public schema: Schema;\n    public closed = false;\n    public autoDestroy = true;\n    public dictionaries: Map<number, Vector>;\n\n    protected _dictionaryIndex = 0;\n    protected _recordBatchIndex = 0;\n    public get numDictionaries() { return this._dictionaryIndex; }\n    public get numRecordBatches() { return this._recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return false; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return false; }\n    public isFile(): this is RecordBatchFileReaders<T> { return false; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return false; }\n\n    public reset(schema?: Schema<T> | null) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = <any> schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        return new RecordBatch<T>(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        const dictionary = dictionaries.get(id);\n        if (isDelta || !dictionary) {\n            const type = schema.dictionaries.get(id)!;\n            return (dictionary && isDelta ? dictionary.concat(\n                Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0])) as Vector;\n        }\n        return dictionary;\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n/** @ignore */\nclass RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements IterableIterator<RecordBatch<T>> {\n\n    protected _reader: MessageReader;\n    protected _handle: ByteStream | ArrowJSONLike;\n\n    constructor(source: ByteStream | ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = !isArrowJSON(source)\n            ? new MessageReader(this._handle = source)\n            : new JSONMessageReader(this._handle = source);\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()!))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return this.return();\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements AsyncIterableIterator<RecordBatch<T>> {\n\n    protected _handle: AsyncByteStream;\n    protected _reader: AsyncMessageReader;\n\n    constructor(source: AsyncByteStream, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = new AsyncMessageReader(this._handle = source);\n    }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async cancel() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public async open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())!))) {\n                await this.cancel();\n            }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = await this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return await this.return();\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n\n    // @ts-ignore\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: RandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n    }\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this._footer) { this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T>\n    implements AsyncRecordBatchFileReaderImpl<T> {\n\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: AsyncRandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: FileHandle, byteLength?: number, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, ...rest: any[]) {\n        const byteLength = typeof rest[0] !== 'number' ? <number> rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? <Map<number, Vector>> rest.shift() : undefined;\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public async open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = await this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return await super.open(options);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { await this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async _readFooter() {\n        const { _handle } = this;\n        _handle._pending && await _handle._pending;\n        const offset = _handle.size - magicAndPadding;\n        const length = await _handle.readInt32(offset);\n        const buffer = await _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this._footer) { await this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && await this._handle.seek(block.offset)) {\n                return await this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass RecordBatchJSONReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(source: ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(source, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n\n/** @ignore */\nfunction shouldAutoDestroy(self: { autoDestroy: boolean }, options?: OpenOptions) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n\n/** @ignore */\nfunction* readAllSync<T extends { [key: string]: DataType } = any>(source: RecordBatchReaders<T> | FromArg0 | FromArg2) {\n    const reader = RecordBatchReader.from<T>(<any> source) as RecordBatchReaders<T>;\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do { yield reader; } while (!(reader.reset().open()).closed);\n        }\n    } finally { reader.cancel(); }\n}\n\n/** @ignore */\nasync function* readAllAsync<T extends { [key: string]: DataType } = any>(source: AsyncRecordBatchReaders<T> | FromArg1 | FromArg3 | FromArg4 | FromArg5) {\n    const reader = await RecordBatchReader.from<T>(<any> source) as RecordBatchReader<T>;\n    try {\n        if (!(await reader.open({ autoDestroy: false })).closed) {\n            do { yield reader; } while (!(await reader.reset().open()).closed);\n        }\n    } finally { await reader.cancel(); }\n}\n\n/** @ignore */\nfunction fromArrowJSON<T extends { [key: string]: DataType }>(source: ArrowJSONLike) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl<T>(source));\n}\n\n/** @ignore */\nfunction fromByteStream<T extends { [key: string]: DataType }>(source: ByteStream) {\n    const bytes = source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromAsyncByteStream<T extends { [key: string]: DataType }>(source: AsyncByteStream) {\n    const bytes = await source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(await source.read()))\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(async function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromFileHandle<T extends { [key: string]: DataType }>(source: FileHandle) {\n    const { size } = await source.stat();\n    const file = new AsyncRandomAccessFile(source, size);\n    if (size >= magicX2AndPadding) {\n        if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n            return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl<T>(file));\n        }\n    }\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(file));\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { Vector } from '../../vector';\nimport { VectorType as V } from '../../interfaces';\nimport { Builder, BuilderOptions } from '../../builder/index';\n\n/** @ignore */\nexport interface BuilderTransformOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    readableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\n    writableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport function builderThroughDOMStream<T extends DataType = any, TNull = any>(options: BuilderTransformOptions<T, TNull>) {\n    return new BuilderTransform(options);\n}\n\n/** @ignore */\nexport class BuilderTransform<T extends DataType = any, TNull = any> {\n\n    public readable: ReadableStream<V<T>>;\n    public writable: WritableStream<T['TValue'] | TNull>;\n    public _controller: ReadableStreamDefaultController<V<T>> | null;\n\n    private _numChunks = 0;\n    private _finished = false;\n    private _bufferedSize = 0;\n    private _builder: Builder<T, TNull>;\n    private _getSize: (builder: Builder<T, TNull>) => number;\n\n    constructor(options: BuilderTransformOptions<T, TNull>) {\n\n        // Access properties by string indexers to defeat closure compiler\n\n        const {\n            ['readableStrategy']: readableStrategy,\n            ['writableStrategy']: writableStrategy,\n            ['queueingStrategy']: queueingStrategy = 'count',\n            ...builderOptions\n        } = options;\n\n        this._controller = null;\n        this._builder = Builder.new<T, TNull>(builderOptions);\n        this._getSize = queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength;\n\n        const { ['highWaterMark']: readableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...readableStrategy };\n        const { ['highWaterMark']: writableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...writableStrategy };\n\n        this['readable'] = new ReadableStream<V<T>>({\n            ['cancel']: ()  => { this._builder.clear(); },\n            ['pull']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n            ['start']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n        }, {\n            'highWaterMark': readableHighWaterMark,\n            'size': queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength,\n        });\n\n        this['writable'] = new WritableStream({\n            ['abort']: () => { this._builder.clear(); },\n            ['write']: () => { this._maybeFlush(this._builder, this._controller); },\n            ['close']: () => { this._maybeFlush(this._builder.finish(), this._controller); },\n        }, {\n            'highWaterMark': writableHighWaterMark,\n            'size': (value: T['TValue'] | TNull) => this._writeValueAndReturnChunkSize(value),\n        });\n    }\n\n    private _writeValueAndReturnChunkSize(value: T['TValue'] | TNull) {\n        const bufferedSize = this._bufferedSize;\n        this._bufferedSize = this._getSize(this._builder.append(value));\n        return this._bufferedSize - bufferedSize;\n    }\n\n    private _maybeFlush(builder: Builder<T, TNull>, controller: ReadableStreamDefaultController<V<T>> | null) {\n        if (controller === null) { return; }\n        if (this._bufferedSize >= controller.desiredSize!) {\n            ++this._numChunks && this._enqueue(controller, builder.toVector());\n        }\n        if (builder.finished) {\n            if (builder.length > 0 || this._numChunks === 0) {\n                ++this._numChunks && this._enqueue(controller, builder.toVector());\n            }\n            if (!this._finished && (this._finished = true)) {\n                this._enqueue(controller, null);\n            }\n        }\n    }\n\n    private _enqueue(controller: ReadableStreamDefaultController<V<T>>, chunk: V<T> | null) {\n        this._bufferedSize = 0;\n        this._controller = null;\n        chunk === null ? controller.close() : controller.enqueue(chunk);\n    }\n}\n\n/** @ignore */ const chunkLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.length;\n/** @ignore */ const chunkByteLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.byteLength;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { RecordBatch } from '../recordbatch';\nimport { DictionaryVector } from '../vector/dictionary';\n\n/** @ignore */\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\n/** @ignore */\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\n/** @ignore */\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\n/** @ignore */\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\n/** @ignore */\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch): (idx: number, batch?: RecordBatch) => any {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n\n        const vec = this.vector = batch.getChildAt(this.colidx)!;\n        return (idx: number) => vec.get(idx);\n    }\n}\n\n/** @ignore */\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\n/** @ignore */\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\n/** @ignore */\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[];\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to prototype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\n/** @ignore */\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is commutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\n/** @ignore */\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\n/** @ignore */\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\n/** @ignore */\nexport type BindFunc = (batch: RecordBatch) => void;\n/** @ignore */\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.scanReverse = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scanReverse(next, bind); };\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\n\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(this.chunks, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\n/** @ignore */\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        type R = { values: T, counts: TCount };\n        const schema = new Schema<R>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch<R>(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\n/** @ignore */\nexport class FilteredDataFrame<T extends { [key: string]: DataType } = any> extends DataFrame<T> {\n    private _predicate: Predicate;\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(\n            this._chunks,\n            this._predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './io/adapters';\nimport { Builder } from './builder/index';\nimport { RecordBatchReader } from './ipc/reader';\nimport { RecordBatchWriter } from './ipc/writer';\nimport { toDOMStream } from './io/whatwg/iterable';\nimport { builderThroughDOMStream } from './io/whatwg/builder';\nimport { recordBatchReaderThroughDOMStream } from './io/whatwg/reader';\nimport { recordBatchWriterThroughDOMStream } from './io/whatwg/writer';\n\nstreamAdapters.toDOMStream = toDOMStream;\nBuilder['throughDOM'] = builderThroughDOMStream;\nRecordBatchReader['throughDOM'] = recordBatchReaderThroughDOMStream;\nRecordBatchWriter['throughDOM'] = recordBatchWriterThroughDOMStream;\n\nexport {\n    ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, BufferType,\n    Data,\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n    Table,\n    Column,\n    Schema, Field,\n    Visitor,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n    ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink,\n    RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader,\n    RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter,\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    Message,\n    RecordBatch,\n    ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions,\n    DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc,\n    predicate,\n    util,\n    Builder,\n    BinaryBuilder,\n    BoolBuilder,\n    DateBuilder, DateDayBuilder, DateMillisecondBuilder,\n    DecimalBuilder,\n    DictionaryBuilder,\n    FixedSizeBinaryBuilder,\n    FixedSizeListBuilder,\n    FloatBuilder, Float16Builder, Float32Builder, Float64Builder,\n    IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder,\n    IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder,\n    ListBuilder,\n    MapBuilder,\n    NullBuilder,\n    StructBuilder,\n    TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder,\n    TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder,\n    UnionBuilder, DenseUnionBuilder, SparseUnionBuilder,\n    Utf8Builder,\n} from './Arrow';\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from '../../util/buffer';\nimport { ReadableDOMStreamOptions } from '../../io/interfaces';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n\n/** @ignore */\nexport function toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n    if (isAsyncIterable<T>(source)) { return asyncIterableAsReadableDOMStream(source, options); }\n    if (isIterable<T>(source)) { return iterableAsReadableDOMStream(source, options); }\n    /* istanbul ignore next */\n    throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n\n/** @ignore */\nfunction iterableAsReadableDOMStream<T>(source: Iterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: Iterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    function next(controller: ReadableStreamDefaultController<T>, it: Iterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream<T>(source: AsyncIterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: AsyncIterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]())); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    async function next(controller: ReadableStreamDefaultController<T>, it: AsyncIterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = await it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteQueue } from '../../io/stream';\nimport { RecordBatchReader } from '../../ipc/reader';\n\n/** @ignore */\nexport function recordBatchReaderThroughDOMStream<T extends { [key: string]: DataType } = any>(writableStrategy?: ByteLengthQueuingStrategy, readableStrategy?: { autoDestroy: boolean }) {\n\n    const queue = new AsyncByteQueue();\n    let reader: RecordBatchReader<T> | null = null;\n\n    const readable = new ReadableStream<RecordBatch<T>>({\n        async cancel() { await queue.close(); },\n        async start(controller) { await next(controller, reader || (reader = await open())); },\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\n    });\n\n    return { writable: new WritableStream(queue, { 'highWaterMark': 2 ** 14, ...writableStrategy }), readable };\n\n    async function open() {\n        return await (await RecordBatchReader.from<T>(queue)).open(readableStrategy);\n    }\n\n    async function next(controller: ReadableStreamDefaultController<RecordBatch<T>>, reader: RecordBatchReader<T>) {\n        let size = controller.desiredSize;\n        let r: IteratorResult<RecordBatch<T>> | null = null;\n        while (!(r = await reader.next()).done) {\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteStream } from '../../io/stream';\nimport { RecordBatchWriter } from '../../ipc/writer';\n\n/** @ignore */\nexport function recordBatchWriterThroughDOMStream<T extends { [key: string]: DataType } = any>(\n    this: typeof RecordBatchWriter,\n    writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n    readableStrategy?: { highWaterMark?: number, size?: any }\n) {\n\n    const writer = new this<T>(writableStrategy);\n    const reader = new AsyncByteStream(writer);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await reader.cancel(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, { 'highWaterMark': 2 ** 14, ...readableStrategy });\n\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n\n    async function next(controller: ReadableStreamDefaultController<Uint8Array>) {\n        let buf: Uint8Array | null = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            controller.enqueue(buf);\n            if (size != null && (size -= buf.byteLength) <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n","/**\n * @license\n * Copyright 2018-2021 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Table, Type } from \"apache-arrow\";\nvar ArrowTable = /** @class */ (function () {\n    function ArrowTable(dataBuffer, indexBuffer, columnsBuffer, styler) {\n        var _this = this;\n        this.getCell = function (rowIndex, columnIndex) {\n            var isBlankCell = rowIndex < _this.headerRows && columnIndex < _this.headerColumns;\n            var isIndexCell = rowIndex >= _this.headerRows && columnIndex < _this.headerColumns;\n            var isColumnsCell = rowIndex < _this.headerRows && columnIndex >= _this.headerColumns;\n            if (isBlankCell) {\n                var classNames = [\"blank\"];\n                if (columnIndex > 0) {\n                    classNames.push(\"level\" + rowIndex);\n                }\n                return {\n                    type: \"blank\",\n                    classNames: classNames.join(\" \"),\n                    content: \"\"\n                };\n            }\n            else if (isColumnsCell) {\n                var dataColumnIndex = columnIndex - _this.headerColumns;\n                var classNames = [\n                    \"col_heading\",\n                    \"level\" + rowIndex,\n                    \"col\" + dataColumnIndex\n                ];\n                return {\n                    type: \"columns\",\n                    classNames: classNames.join(\" \"),\n                    content: _this.getContent(_this.columnsTable, dataColumnIndex, rowIndex)\n                };\n            }\n            else if (isIndexCell) {\n                var dataRowIndex = rowIndex - _this.headerRows;\n                var classNames = [\n                    \"row_heading\",\n                    \"level\" + columnIndex,\n                    \"row\" + dataRowIndex\n                ];\n                return {\n                    type: \"index\",\n                    id: \"T_\" + _this.uuid + \"level\" + columnIndex + \"_row\" + dataRowIndex,\n                    classNames: classNames.join(\" \"),\n                    content: _this.getContent(_this.indexTable, dataRowIndex, columnIndex)\n                };\n            }\n            else {\n                var dataRowIndex = rowIndex - _this.headerRows;\n                var dataColumnIndex = columnIndex - _this.headerColumns;\n                var classNames = [\n                    \"data\",\n                    \"row\" + dataRowIndex,\n                    \"col\" + dataColumnIndex\n                ];\n                var content = _this.styler\n                    ? _this.getContent(_this.styler.displayValuesTable, dataRowIndex, dataColumnIndex)\n                    : _this.getContent(_this.dataTable, dataRowIndex, dataColumnIndex);\n                return {\n                    type: \"data\",\n                    id: \"T_\" + _this.uuid + \"row\" + dataRowIndex + \"_col\" + dataColumnIndex,\n                    classNames: classNames.join(\" \"),\n                    content: content\n                };\n            }\n        };\n        this.getContent = function (table, rowIndex, columnIndex) {\n            var column = table.getColumnAt(columnIndex);\n            if (column === null) {\n                return \"\";\n            }\n            var columnTypeId = _this.getColumnTypeId(table, columnIndex);\n            switch (columnTypeId) {\n                case Type.Timestamp: {\n                    return _this.nanosToDate(column.get(rowIndex));\n                }\n                default: {\n                    return column.get(rowIndex);\n                }\n            }\n        };\n        this.dataTable = Table.from(dataBuffer);\n        this.indexTable = Table.from(indexBuffer);\n        this.columnsTable = Table.from(columnsBuffer);\n        this.styler = styler\n            ? {\n                caption: styler.caption,\n                displayValuesTable: Table.from(styler.displayValues),\n                styles: styler.styles,\n                uuid: styler.uuid\n            }\n            : undefined;\n    }\n    Object.defineProperty(ArrowTable.prototype, \"rows\", {\n        get: function () {\n            return this.indexTable.length + this.columnsTable.numCols;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"columns\", {\n        get: function () {\n            return this.indexTable.numCols + this.columnsTable.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"headerRows\", {\n        get: function () {\n            return this.rows - this.dataRows;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"headerColumns\", {\n        get: function () {\n            return this.columns - this.dataColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"dataRows\", {\n        get: function () {\n            return this.dataTable.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"dataColumns\", {\n        get: function () {\n            return this.dataTable.numCols;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"uuid\", {\n        get: function () {\n            return this.styler && this.styler.uuid;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"caption\", {\n        get: function () {\n            return this.styler && this.styler.caption;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"styles\", {\n        get: function () {\n            return this.styler && this.styler.styles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"table\", {\n        get: function () {\n            return this.dataTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"index\", {\n        get: function () {\n            return this.indexTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"columnTable\", {\n        get: function () {\n            return this.columnsTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Serialize arrow table.\n     */\n    ArrowTable.prototype.serialize = function () {\n        return {\n            data: this.dataTable.serialize(),\n            index: this.indexTable.serialize(),\n            columns: this.columnsTable.serialize()\n        };\n    };\n    /**\n     * Returns apache-arrow specific typeId of column.\n     */\n    ArrowTable.prototype.getColumnTypeId = function (table, columnIndex) {\n        return table.schema.fields[columnIndex].type.typeId;\n    };\n    ArrowTable.prototype.nanosToDate = function (nanos) {\n        return new Date(nanos / 1e6);\n    };\n    return ArrowTable;\n}());\nexport { ArrowTable };\n","/**\n * @license\n * Copyright 2018-2021 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n// Safari doesn't support the EventTarget class, so we use a shim.\nimport { EventTarget } from \"event-target-shim\";\nimport { ArrowTable } from \"./ArrowTable\";\n/** Messages from Component -> Streamlit */\nvar ComponentMessageType;\n(function (ComponentMessageType) {\n    // A component sends this message when it's ready to receive messages\n    // from Streamlit. Streamlit won't send any messages until it gets this.\n    // Data: { apiVersion: number }\n    ComponentMessageType[\"COMPONENT_READY\"] = \"streamlit:componentReady\";\n    // The component has a new widget value. Send it back to Streamlit, which\n    // will then re-run the app.\n    // Data: { value: any }\n    ComponentMessageType[\"SET_COMPONENT_VALUE\"] = \"streamlit:setComponentValue\";\n    // The component has a new height for its iframe.\n    // Data: { height: number }\n    ComponentMessageType[\"SET_FRAME_HEIGHT\"] = \"streamlit:setFrameHeight\";\n})(ComponentMessageType || (ComponentMessageType = {}));\n/**\n * Streamlit communication API.\n *\n * Components can send data to Streamlit via the functions defined here,\n * and receive data from Streamlit via the `events` property.\n */\nvar Streamlit = /** @class */ (function () {\n    function Streamlit() {\n    }\n    /**\n     * The Streamlit component API version we're targetting.\n     * There's currently only 1!\n     */\n    Streamlit.API_VERSION = 1;\n    Streamlit.RENDER_EVENT = \"streamlit:render\";\n    /** Dispatches events received from Streamlit. */\n    Streamlit.events = new EventTarget();\n    Streamlit.registeredMessageListener = false;\n    /**\n     * Tell Streamlit that the component is ready to start receiving data.\n     * Streamlit will defer emitting RENDER events until it receives the\n     * COMPONENT_READY message.\n     */\n    Streamlit.setComponentReady = function () {\n        if (!Streamlit.registeredMessageListener) {\n            // Register for message events if we haven't already\n            window.addEventListener(\"message\", Streamlit.onMessageEvent);\n            Streamlit.registeredMessageListener = true;\n        }\n        Streamlit.sendBackMsg(ComponentMessageType.COMPONENT_READY, {\n            apiVersion: Streamlit.API_VERSION\n        });\n    };\n    /**\n     * Report the component's height to Streamlit.\n     * This should be called every time the component changes its DOM - that is,\n     * when it's first loaded, and any time it updates.\n     */\n    Streamlit.setFrameHeight = function (height) {\n        if (height === undefined) {\n            // `height` is optional. If undefined, it defaults to scrollHeight,\n            // which is the entire height of the element minus its border,\n            // scrollbar, and margin.\n            height = document.body.scrollHeight;\n        }\n        if (height === Streamlit.lastFrameHeight) {\n            // Don't bother updating if our height hasn't changed.\n            return;\n        }\n        Streamlit.lastFrameHeight = height;\n        Streamlit.sendBackMsg(ComponentMessageType.SET_FRAME_HEIGHT, { height: height });\n    };\n    /**\n     * Set the component's value. This value will be returned to the Python\n     * script, and the script will be re-run.\n     *\n     * For example:\n     *\n     * JavaScript:\n     * Streamlit.setComponentValue(\"ahoy!\")\n     *\n     * Python:\n     * value = st.my_component(...)\n     * st.write(value) # -> \"ahoy!\"\n     *\n     * The value must be an ArrowTable, a typed array, an ArrayBuffer, or be\n     * serializable to JSON.\n     */\n    Streamlit.setComponentValue = function (value) {\n        var dataType;\n        if (value instanceof ArrowTable) {\n            dataType = \"dataframe\";\n            value = value.serialize();\n        }\n        else if (isTypedArray(value)) {\n            // All typed arrays get sent as Uint8Array, because that's what our\n            // protobuf library uses for the \"bytes\" field type.\n            dataType = \"bytes\";\n            value = new Uint8Array(value.buffer);\n        }\n        else if (value instanceof ArrayBuffer) {\n            dataType = \"bytes\";\n            value = new Uint8Array(value);\n        }\n        else {\n            dataType = \"json\";\n        }\n        Streamlit.sendBackMsg(ComponentMessageType.SET_COMPONENT_VALUE, {\n            value: value,\n            dataType: dataType\n        });\n    };\n    /** Receive a ForwardMsg from the Streamlit app */\n    Streamlit.onMessageEvent = function (event) {\n        var type = event.data[\"type\"];\n        switch (type) {\n            case Streamlit.RENDER_EVENT:\n                Streamlit.onRenderMessage(event.data);\n                break;\n        }\n    };\n    /**\n     * Handle an untyped Streamlit render event and redispatch it as a\n     * StreamlitRenderEvent.\n     */\n    Streamlit.onRenderMessage = function (data) {\n        var args = data[\"args\"];\n        if (args == null) {\n            console.error(\"Got null args in onRenderMessage. This should never happen\");\n            args = {};\n        }\n        // Parse our dataframe arguments with arrow, and merge them into our args dict\n        var dataframeArgs = data[\"dfs\"] && data[\"dfs\"].length > 0\n            ? Streamlit.argsDataframeToObject(data[\"dfs\"])\n            : {};\n        args = __assign(__assign({}, args), dataframeArgs);\n        var disabled = Boolean(data[\"disabled\"]);\n        var theme = data[\"theme\"];\n        if (theme) {\n            _injectTheme(theme);\n        }\n        // Dispatch a render event!\n        var eventData = { disabled: disabled, args: args, theme: theme };\n        var event = new CustomEvent(Streamlit.RENDER_EVENT, {\n            detail: eventData\n        });\n        Streamlit.events.dispatchEvent(event);\n    };\n    Streamlit.argsDataframeToObject = function (argsDataframe) {\n        var argsDataframeArrow = argsDataframe.map(function (_a) {\n            var key = _a.key, value = _a.value;\n            return [key, Streamlit.toArrowTable(value)];\n        });\n        return Object.fromEntries(argsDataframeArrow);\n    };\n    Streamlit.toArrowTable = function (df) {\n        var _a = df.data, data = _a.data, index = _a.index, columns = _a.columns, styler = _a.styler;\n        return new ArrowTable(data, index, columns, styler);\n    };\n    /** Post a message to the Streamlit app. */\n    Streamlit.sendBackMsg = function (type, data) {\n        window.parent.postMessage(__assign({ isStreamlitMessage: true, type: type }, data), \"*\");\n    };\n    return Streamlit;\n}());\nexport { Streamlit };\nvar _injectTheme = function (theme) {\n    var style = document.createElement(\"style\");\n    document.head.appendChild(style);\n    style.innerHTML = \"\\n    :root {\\n      --primary-color: \" + theme.primaryColor + \";\\n      --background-color: \" + theme.backgroundColor + \";\\n      --secondary-background-color: \" + theme.secondaryBackgroundColor + \";\\n      --text-color: \" + theme.textColor + \";\\n      --font: \" + theme.font + \";\\n    }\\n\\n    body {\\n      background-color: var(--background-color);\\n      color: var(--text-color);\\n    }\\n  \";\n};\n/** True if the value is a TypedArray. */\nfunction isTypedArray(value) {\n    var isBigIntArray = false;\n    try {\n        isBigIntArray =\n            value instanceof BigInt64Array || value instanceof BigUint64Array;\n    }\n    catch (e) {\n        // Ignore cause Safari does not support this\n        // https://caniuse.com/mdn-javascript_builtins_bigint64array\n    }\n    return (value instanceof Int8Array ||\n        value instanceof Uint8Array ||\n        value instanceof Uint8ClampedArray ||\n        value instanceof Int16Array ||\n        value instanceof Uint16Array ||\n        value instanceof Int32Array ||\n        value instanceof Uint32Array ||\n        value instanceof Float32Array ||\n        value instanceof Float64Array ||\n        isBigIntArray);\n}\n","/**\n * @license\n * Copyright 2018-2021 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport hoistNonReactStatics from \"hoist-non-react-statics\";\nimport React from \"react\";\nimport { Streamlit } from \"./streamlit\";\n/**\n * Optional Streamlit React-based component base class.\n *\n * You are not required to extend this base class to create a Streamlit\n * component. If you decide not to extend it, you should implement the\n * `componentDidMount` and `componentDidUpdate` functions in your own class,\n * so that your plugin properly resizes.\n */\nvar StreamlitComponentBase = /** @class */ (function (_super) {\n    __extends(StreamlitComponentBase, _super);\n    function StreamlitComponentBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    StreamlitComponentBase.prototype.componentDidMount = function () {\n        // After we're rendered for the first time, tell Streamlit that our height\n        // has changed.\n        Streamlit.setFrameHeight();\n    };\n    StreamlitComponentBase.prototype.componentDidUpdate = function () {\n        // After we're updated, tell Streamlit that our height may have changed.\n        Streamlit.setFrameHeight();\n    };\n    return StreamlitComponentBase;\n}(React.PureComponent));\nexport { StreamlitComponentBase };\n/**\n * Wrapper for React-based Streamlit components.\n *\n * Bootstraps the communication interface between Streamlit and the component.\n */\nexport function withStreamlitConnection(WrappedComponent) {\n    var ComponentWrapper = /** @class */ (function (_super) {\n        __extends(ComponentWrapper, _super);\n        function ComponentWrapper(props) {\n            var _this = _super.call(this, props) || this;\n            _this.componentDidMount = function () {\n                // Set up event listeners, and signal to Streamlit that we're ready.\n                // We won't render the component until we receive the first RENDER_EVENT.\n                Streamlit.events.addEventListener(Streamlit.RENDER_EVENT, _this.onRenderEvent);\n                Streamlit.setComponentReady();\n            };\n            _this.componentDidUpdate = function () {\n                // If our child threw an error, we display it in render(). In this\n                // case, the child won't be mounted and therefore won't call\n                // `setFrameHeight` on its own. We do it here so that the rendered\n                // error will be visible.\n                if (_this.state.componentError != null) {\n                    Streamlit.setFrameHeight();\n                }\n            };\n            _this.componentWillUnmount = function () {\n                Streamlit.events.removeEventListener(Streamlit.RENDER_EVENT, _this.onRenderEvent);\n            };\n            /**\n             * Streamlit is telling this component to redraw.\n             * We save the render data in State, so that it can be passed to the\n             * component in our own render() function.\n             */\n            _this.onRenderEvent = function (event) {\n                // Update our state with the newest render data\n                var renderEvent = event;\n                _this.setState({ renderData: renderEvent.detail });\n            };\n            _this.render = function () {\n                // If our wrapped component threw an error, display it.\n                if (_this.state.componentError != null) {\n                    return (React.createElement(\"div\", null,\n                        React.createElement(\"h1\", null, \"Component Error\"),\n                        React.createElement(\"span\", null, _this.state.componentError.message)));\n                }\n                // Don't render until we've gotten our first RENDER_EVENT from Streamlit.\n                if (_this.state.renderData == null) {\n                    return null;\n                }\n                return (React.createElement(WrappedComponent, { width: window.innerWidth, disabled: _this.state.renderData.disabled, args: _this.state.renderData.args, theme: _this.state.renderData.theme }));\n            };\n            _this.state = {\n                renderData: undefined,\n                componentError: undefined\n            };\n            return _this;\n        }\n        /**\n         * Error boundary function. This will be called if our wrapped\n         * component throws an error. We store the caught error in our state,\n         * and display it in the next render().\n         */\n        ComponentWrapper.getDerivedStateFromError = function (error) {\n            return { componentError: error };\n        };\n        return ComponentWrapper;\n    }(React.PureComponent));\n    return hoistNonReactStatics(ComponentWrapper, WrappedComponent);\n}\n","'use strict';\n\nvar reactIs = require('react-is');\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true\n};\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\nvar FORWARD_REF_STATICS = {\n  '$$typeof': true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true\n};\nvar MEMO_STATICS = {\n  '$$typeof': true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true\n};\nvar TYPE_STATICS = {};\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\n\nfunction getStatics(component) {\n  // React v16.11 and below\n  if (reactIs.isMemo(component)) {\n    return MEMO_STATICS;\n  } // React v16.12 and above\n\n\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n    if (objectPrototype) {\n      var inheritedComponent = getPrototypeOf(sourceComponent);\n\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n      }\n    }\n\n    var keys = getOwnPropertyNames(sourceComponent);\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n\n    var targetStatics = getStatics(targetComponent);\n    var sourceStatics = getStatics(sourceComponent);\n\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i];\n\n      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor);\n        } catch (e) {}\n      }\n    }\n  }\n\n  return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?\nSymbol.for(\"react.suspense_list\"):60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.block\"):60121,w=b?Symbol.for(\"react.fundamental\"):60117,x=b?Symbol.for(\"react.responder\"):60118,y=b?Symbol.for(\"react.scope\"):60119;\nfunction z(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\n","/** @license React v16.14.0\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var l=require(\"object-assign\"),n=\"function\"===typeof Symbol&&Symbol.for,p=n?Symbol.for(\"react.element\"):60103,q=n?Symbol.for(\"react.portal\"):60106,r=n?Symbol.for(\"react.fragment\"):60107,t=n?Symbol.for(\"react.strict_mode\"):60108,u=n?Symbol.for(\"react.profiler\"):60114,v=n?Symbol.for(\"react.provider\"):60109,w=n?Symbol.for(\"react.context\"):60110,x=n?Symbol.for(\"react.forward_ref\"):60112,y=n?Symbol.for(\"react.suspense\"):60113,z=n?Symbol.for(\"react.memo\"):60115,A=n?Symbol.for(\"react.lazy\"):\n60116,B=\"function\"===typeof Symbol&&Symbol.iterator;function C(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}\nvar D={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},E={};function F(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}F.prototype.isReactComponent={};F.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(C(85));this.updater.enqueueSetState(this,a,b,\"setState\")};F.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};\nfunction G(){}G.prototype=F.prototype;function H(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}var I=H.prototype=new G;I.constructor=H;l(I,F.prototype);I.isPureReactComponent=!0;var J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,c){var e,d={},g=null,k=null;if(null!=b)for(e in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=\"\"+b.key),b)K.call(b,e)&&!L.hasOwnProperty(e)&&(d[e]=b[e]);var f=arguments.length-2;if(1===f)d.children=c;else if(1<f){for(var h=Array(f),m=0;m<f;m++)h[m]=arguments[m+2];d.children=h}if(a&&a.defaultProps)for(e in f=a.defaultProps,f)void 0===d[e]&&(d[e]=f[e]);return{$$typeof:p,type:a,key:g,ref:k,props:d,_owner:J.current}}\nfunction N(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+(\"\"+a).replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g,Q=[];function R(a,b,c,e){if(Q.length){var d=Q.pop();d.result=a;d.keyPrefix=b;d.func=c;d.context=e;d.count=0;return d}return{result:a,keyPrefix:b,func:c,context:e,count:0}}\nfunction S(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>Q.length&&Q.push(a)}\nfunction T(a,b,c,e){var d=typeof a;if(\"undefined\"===d||\"boolean\"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case \"string\":case \"number\":g=!0;break;case \"object\":switch(a.$$typeof){case p:case q:g=!0}}if(g)return c(e,a,\"\"===b?\".\"+U(a,0):b),1;g=0;b=\"\"===b?\".\":b+\":\";if(Array.isArray(a))for(var k=0;k<a.length;k++){d=a[k];var f=b+U(d,k);g+=T(d,f,c,e)}else if(null===a||\"object\"!==typeof a?f=null:(f=B&&a[B]||a[\"@@iterator\"],f=\"function\"===typeof f?f:null),\"function\"===typeof f)for(a=f.call(a),k=\n0;!(d=a.next()).done;)d=d.value,f=b+U(d,k++),g+=T(d,f,c,e);else if(\"object\"===d)throw c=\"\"+a,Error(C(31,\"[object Object]\"===c?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":c,\"\"));return g}function V(a,b,c){return null==a?0:T(a,\"\",b,c)}function U(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function W(a,b){a.func.call(a.context,b,a.count++)}\nfunction aa(a,b,c){var e=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?X(a,e,c,function(a){return a}):null!=a&&(O(a)&&(a=N(a,d+(!a.key||b&&b.key===a.key?\"\":(\"\"+a.key).replace(P,\"$&/\")+\"/\")+c)),e.push(a))}function X(a,b,c,e,d){var g=\"\";null!=c&&(g=(\"\"+c).replace(P,\"$&/\")+\"/\");b=R(b,g,e,d);V(a,aa,b);S(b)}var Y={current:null};function Z(){var a=Y.current;if(null===a)throw Error(C(321));return a}\nvar ba={ReactCurrentDispatcher:Y,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:J,IsSomeRendererActing:{current:!1},assign:l};exports.Children={map:function(a,b,c){if(null==a)return a;var e=[];X(a,e,null,b,c);return e},forEach:function(a,b,c){if(null==a)return a;b=R(null,null,b,c);V(a,W,b);S(b)},count:function(a){return V(a,function(){return null},null)},toArray:function(a){var b=[];X(a,b,null,function(a){return a});return b},only:function(a){if(!O(a))throw Error(C(143));return a}};\nexports.Component=F;exports.Fragment=r;exports.Profiler=u;exports.PureComponent=H;exports.StrictMode=t;exports.Suspense=y;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ba;\nexports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(C(267,a));var e=l({},a.props),d=a.key,g=a.ref,k=a._owner;if(null!=b){void 0!==b.ref&&(g=b.ref,k=J.current);void 0!==b.key&&(d=\"\"+b.key);if(a.type&&a.type.defaultProps)var f=a.type.defaultProps;for(h in b)K.call(b,h)&&!L.hasOwnProperty(h)&&(e[h]=void 0===b[h]&&void 0!==f?f[h]:b[h])}var h=arguments.length-2;if(1===h)e.children=c;else if(1<h){f=Array(h);for(var m=0;m<h;m++)f[m]=arguments[m+2];e.children=f}return{$$typeof:p,type:a.type,\nkey:d,ref:g,props:e,_owner:k}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};exports.forwardRef=function(a){return{$$typeof:x,render:a}};exports.isValidElement=O;\nexports.lazy=function(a){return{$$typeof:A,_ctor:a,_status:-1,_result:null}};exports.memo=function(a,b){return{$$typeof:z,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return Z().useCallback(a,b)};exports.useContext=function(a,b){return Z().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return Z().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return Z().useImperativeHandle(a,b,c)};\nexports.useLayoutEffect=function(a,b){return Z().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return Z().useMemo(a,b)};exports.useReducer=function(a,b,c){return Z().useReducer(a,b,c)};exports.useRef=function(a){return Z().useRef(a)};exports.useState=function(a){return Z().useState(a)};exports.version=\"16.14.0\";\n","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n"],"sourceRoot":""}